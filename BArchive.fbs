namespace FlatData;

enum GroundNodeType: int{
    None = 0,
    WalkAble = 1,
    JumpAble = 2,
    TSSOnly = 3,
    NotWalkAble = 2147483647
}

enum BubbleType: int{
    Idle = 0,
    Monologue = 1,
    EmoticonNormal = 2,
    EmoticonFavorite = 3,
    EmoticonReward = 4,
    EmoticonGiveGift = 5
}

enum FurnitureCategory: int{
    Furnitures = 0,
    Decorations = 1,
    Interiors = 2
}

enum FurnitureSubCategory: int{
    Table = 0,
    Closet = 1,
    Chair = 2,
    Bed = 3,
    FurnitureEtc = 4,
    FurnitureSubCategory1 = 5,
    Prop = 6,
    HomeAppliance = 7,
    WallDecoration = 8,
    FloorDecoration = 9,
    DecorationEtc = 10,
    DecorationSubCategory1 = 11,
    Floor = 12,
    Background = 13,
    Wallpaper = 14,
    InteriorsSubCategory1 = 15,
    All = 16
}

enum FurnitureLocation: int{
    None = 0,
    Inventory = 1,
    Floor = 2,
    WallLeft = 3,
    WallRight = 4
}

enum AcademyMessageConditions: int{
    None = 0,
    FavorRankUp = 1,
    AcademySchedule = 2,
    Answer = 3,
    Feedback = 4
}

enum AcademyMessageTypes: int{
    None = 0,
    Text = 1,
    Image = 2
}

enum VoiceEvent: int{
    OnTSA = 0,
    FormationPickUp = 1,
    CampaignResultDefeat = 2,
    CampaignResultVictory = 3,
    CharacterLevelUp = 4,
    CharacterTranscendence = 5,
    SkillLevelUp = 6,
    Formation = 7,
    CampaignCharacterSpawn = 8,
    BattleStartTimeline = 9,
    BattleVictoryTimeline = 10,
    CharacterFavor = 11,
    BattleMiss = 12,
    BattleBlock = 13,
    BattleCover = 14,
    BattleMove = 15,
    BattleMoveToForamtionBeacon = 16,
    MGS_GameStart = 17,
    MGS_CharacterSelect = 18,
    MGS_Attacking = 19,
    MGS_GeasGet = 20
}

enum UnitType: int{
    None = 0,
    AR = 1,
    RF = 2,
    HG = 3,
    MG = 4,
    SMG = 5,
    SG = 6,
    HZ = 7,
    Melee = 8
}

enum AttackType: int{
    Single = 0,
    Splash = 1,
    Through = 2,
    Heal = 3
}

enum ProjectileType: int{
    Guided = 0,
    Ground = 1,
    GuidedExplosion = 2,
    GroundConstDistance = 3,
    AirConstDistance = 4
}

enum DamageFontColor: int{
    Blue = 0,
    White = 1,
    Yellow = 2,
    Red = 3,
    Green = 4
}

enum TargetingCellType: int{
    None = 0,
    Near = 1,
    Far = 2
}

enum TargetingUnitType: int{
    None = 0,
    Near = 1,
    Far = 2,
    MinHp = 3,
    MaxHp = 4,
    Random = 5
}

enum ProjectileAction: int{
    None = 0,
    Damage = 1,
    Heal = 2
}

enum FontType: int{
    None = 0,
    Damage = 1,
    Block = 2,
    Heal = 3,
    Miss = 4,
    Critical = 5,
    Skill = 6,
    Immune = 7,
    DamageResist = 8,
    DamageWeak = 9,
    CriticalResist = 10,
    CriticalWeak = 11,
    Effective = 12,
    CriticalEffective = 13
}

enum EmoticonEvent: int{
    CoverEnter = 0,
    ShelterEnter = 1,
    Panic = 2,
    NearlyDead = 3,
    Reload = 4,
    Found = 5,
    GetBeacon = 6,
    Warning = 7
}

enum BulletType: int{
    Normal = 0,
    Pierce = 1,
    Explosion = 2,
    Siege = 3,
    Mystic = 4,
    None = 5,
    Sonic = 6
}

enum ActionType: int{
    Crush = 0,
    Courage = 1,
    Tactic = 2
}

enum BuffOverlap: int{
    Able = 0,
    Unable = 1,
    Change = 2,
    Additive = 3
}

enum ReArrangeTargetType: int{
    AllySelf = 0,
    AllyAll = 1,
    AllyUnitType = 2,
    AllyGroup = 3
}

enum ArmorType: int{
    LightArmor = 0,
    HeavyArmor = 1,
    Unarmed = 2,
    Structure = 3,
    Normal = 4,
    ElasticArmor = 5
}

enum WeaponType: int{
    None = 0,
    SG = 1,
    SMG = 2,
    AR = 3,
    GL = 4,
    HG = 5,
    RL = 6,
    SR = 7,
    DSMG = 8,
    RG = 9,
    DSG = 10,
    Vulcan = 11,
    Missile = 12,
    Cannon = 13,
    Taser = 14,
    MG = 15,
    Binah = 16,
    MT = 17,
    Relic = 18,
    FT = 19
}

enum EntityMaterialType: int{
    Wood = 0,
    Stone = 1,
    Flesh = 2,
    Metal = 3
}

enum CoverMotionType: int{
    All = 0,
    Kneel = 1
}

enum TargetSortBy: int{
    DISTANCE = 0,
    HP = 1,
    DAMAGE_EFFICIENCY = 2,
    TARGETED_COUNT = 3,
    RANDOM = 4,
    FRONT_FORMATION = 5
}

enum PositioningType: int{
    CloseToObstacle = 0,
    CloseToTarget = 1
}

enum DamageType: int{
    Normal = 0,
    Critical = 1,
    IgnoreDefence = 2
}

enum FormationLine: int{
    Students = 0,
    TSS = 1
}

enum ExternalBTNodeType: int{
    Sequence = 0,
    Selector = 1,
    Instant = 2,
    SubNode = 3,
    ExecuteAll = 4
}

enum ExternalBTTrigger: int{
    None = 0,
    HPUnder = 1,
    ApplySkillEffectCategory = 2,
    HaveNextExSkillActiveGauge = 3,
    UseNormalSkill = 4,
    UseExSkill = 5,
    CheckActiveGaugeOver = 6,
    CheckPeriod = 7,
    CheckSummonCharacterCountOver = 8,
    CheckSummonCharacterCountUnder = 9,
    ApplyGroggy = 10,
    ApplyLogicEffectTemplateId = 11,
    OnSpawned = 12,
    CheckActiveGaugeBetween = 13,
    DestroyParts = 14,
    CheckHallucinationCountOver = 15,
    CheckHallucinationCountUnder = 16,
    UseSkillEndGroupId = 17
}

enum ExternalBehavior: int{
    UseNextExSkill = 0,
    ChangePhase = 1,
    ChangeSection = 2,
    AddActiveGauge = 3,
    UseSelectExSkill = 4,
    ClearNormalSkill = 5,
    MoveLeft = 6,
    MoveRight = 7,
    AllUseSelectExSkill = 8,
    ConnectCharacterToDummy = 9,
    ConnectExSkillToParts = 10,
    SetMaxHPToParts = 11,
    AlivePartsUseExSkill = 12,
    ActivatePart = 13,
    AddGroggy = 14,
    SelectTargetToUseSkillAlly = 15,
    ForceChangePhase = 16,
    ClearUseSkillEndGroupId = 17
}

enum TacticEntityType: int{
    None = 0,
    Student = 1,
    Minion = 2,
    Elite = 4,
    Champion = 8,
    Boss = 16,
    Obstacle = 32,
    Servant = 64,
    Vehicle = 128,
    Summoned = 256,
    Hallucination = 512,
    DestructibleProjectile = 1024
}

enum BuffIconType: int{
    None = 0,
    Debuff_DyingPenalty = 1,
    CC_MindControl = 2,
    CC_Inoperative = 3,
    CC_Confusion = 4,
    CC_Provoke = 5,
    CC_Silence = 6,
    CC_Blind = 7,
    Dot_Damage = 8,
    Dot_Heal = 9,
    Buff_AttackPower = 10,
    Buff_CriticalChance = 11,
    Buff_CriticalDamage = 12,
    Buff_DefensePower = 13,
    Buff_Dodge = 14,
    Buff_Hit = 15,
    Buff_WeaponRange = 16,
    Buff_SightRange = 17,
    Buff_MoveSpeed = 18,
    Buff_Mind = 19,
    Debuf_AttackPower = 20,
    Debuff_CriticalChance = 21,
    Debuff_CriticalDamage = 22,
    Debuff_DefensePower = 23,
    Debuff_Dodge = 24,
    Debuff_Hit = 25,
    Debuff_WeaponRange = 26,
    Debuff_SightRange = 27,
    Debuff_MoveSpeed = 28,
    Debuff_Mind = 29,
    Buff_AttackTime = 30,
    Debuff_AttackTime = 31,
    Buff_MaxHp = 32,
    Debuff_MaxHp = 33,
    Buff_MaxBulletCount = 34,
    Debuff_MaxBulletCount = 35,
    Debuff_SuppliesCondition = 36,
    Buff_HealEffectivenessRate = 37,
    Debuff_HealEffectivenessRate = 38,
    Buff_HealPower = 39,
    Debuff_HealPower = 40,
    Buff_CriticalChanceResistPoint = 41,
    Debuff_CriticalChanceResistPoint = 42,
    CC_Stunned = 43,
    Debuff_ConcentratedTarget = 44,
    Buff_Immortal = 45,
    Max = 46
}

enum Difficulty: int{
    Normal = 0,
    Hard = 1,
    VeryHard = 2,
    Hardcore = 3,
    Extreme = 4,
    Insane = 5,
    Torment = 6
}

enum EngageType: int{
    SearchAndMove = 0,
    HoldPosition = 1
}

enum HitEffectPosition: int{
    Position = 0,
    HeadBone = 1,
    BodyBone = 2,
    Follow = 3
}

enum StageTopography: int{
    Street = 0,
    Outdoor = 1,
    Indoor = 2
}

enum TerrainAdaptationStat: int{
    D = 0,
    C = 1,
    B = 2,
    A = 3,
    S = 4,
    SS = 5
}

enum SquadType: int{
    None = 0,
    Main = 1,
    Support = 2,
    TSS = 3
}

enum ObstacleClass: int{
    MAIN = 0,
    SUB = 1
}

enum ObstacleDestroyType: int{
    Remain = 0,
    Remove = 1
}

enum ObstacleHeightType: int{
    Low = 0,
    Middle = 1,
    High = 2
}

enum ObstacleCoverType: int{
    None = 0,
    Cover = 1,
    Shelter = 2
}

enum SkillCategory: int{
    None = 0
}

enum LogicEffectCategory: int{
    None = 0,
    Attack = 1,
    Heal = 2,
    Buff = 3,
    Debuff = 4,
    CrowdControl = 5,
    Boss = 6,
    Dummy = 7
}

enum AimIKType: int{
    None = 0,
    OneHandRight = 1,
    OneHandLeft = 2,
    TwoHandRight = 3,
    TwoHandLeft = 4,
    Tripod = 5,
    Dual = 6,
    Max = 7
}

enum DamageAttribute: int{
    Resist = 0,
    Normal = 1,
    Weak = 2,
    Effective = 3
}

enum SkillPriorityCheckCondition: int{
    None = 0,
    HPRateUnder = 1,
    DebuffCountOver = 2,
    BuffCountOver = 3,
    CrowdControlOver = 4
}

enum SkillPriorityCheckTarget: int{
    Ally = 0,
    Enemy = 1,
    All = 2
}

enum StageType: int{
    Main = 0,
    Sub = 1
}

enum OperatorCondition: int{
    None = 0,
    StrategyStart = 1,
    StrategyVictory = 2,
    StrategyDefeat = 3,
    AdventureCombatStart = 4,
    AdventureCombatVictory = 5,
    AdventureCombatDefeat = 6,
    ArenaCombatStart = 7,
    ArenaCombatVictory = 8,
    ArenaCombatDefeat = 9,
    WeekDungeonCombatStart = 10,
    WeekDungeonCombatVictory = 11,
    WeekDungeonCombatDefeat = 12,
    SchoolDungeonCombatStart = 13,
    SchoolDungeonCombatVictory = 14,
    SchoolDungeonCombatDefeat = 15,
    StrategyWarpUnitFromHideTile = 16,
    TimeAttackDungeonStart = 17,
    TimeAttackDungeonVictory = 18,
    TimeAttackDungeonDefeat = 19,
    WorldRaidBossSpawn = 20,
    WorldRaidBossKill = 21,
    WorldRaidBossDamaged = 22,
    WorldRaidScenarioBattle = 23,
    MinigameTBGThemaOpen = 24,
    MinigameTBGThemaComeback = 25,
    MinigameTBGAllyRevive = 26,
    MinigameTBGItemUse = 27
}

enum KnockbackDirection: int{
    TargetToCaster = 0,
    CasterToTarget = 1,
    TargetToHitPosition = 2,
    HitPositionToTarget = 3,
    CasterToHitPosition = 4,
    HitPositionToCaster = 5,
    Caster = 6,
    Target = 7
}

enum EndCondition: int{
    Duration = 0,
    ReloadCount = 1,
    AmmoCount = 2,
    AmmoHit = 3,
    HitCount = 4,
    None = 5,
    UseExSkillCount = 6
}

enum LogicEffectSound: int{
    None = 0,
    Damage = 1,
    Heal = 2,
    Knockback = 3
}

enum EffectBone: int{
    None = 0,
    Shot = 1,
    Head = 2,
    Body = 3,
    Shot2 = 4,
    Shot3 = 5,
    Extra = 6,
    Extra2 = 7,
    Extra3 = 8
}

enum ArenaSimulatorServer: int{
    Preset = 0,
    Live = 1,
    Dev = 2,
    QA = 3
}

enum ClearCheck: int{
    None = 0,
    Success_Play = 1,
    Success_Sweep = 2,
    Fail_Timeout = 3,
    Fail_PlayerGiveUp = 4,
    Fail_Annihilation = 5
}

enum BuffType: int{
    None = 0,
    Buff_AttackPower = 1,
    Buff_CriticalChance = 2,
    Buff_CriticalDamage = 3,
    Buff_DefensePower = 4,
    Buff_Dodge = 5,
    Buff_Hit = 6,
    Buff_WeaponRange = 7,
    Buff_SightRange = 8,
    Buff_MoveSpeed = 9,
    Buff_AttackTime = 10,
    Buff_MaxHp = 11,
    Buff_MaxBulletCount = 12,
    DeBuff_AttackPower = 13,
    DeBuff_CriticalChance = 14,
    DeBuff_CriticalDamage = 15,
    DeBuff_DefensePower = 16,
    DeBuff_Dodge = 17,
    DeBuff_Hit = 18,
    DeBuff_WeaponRange = 19,
    DeBuff_SightRange = 20,
    DeBuff_MoveSpeed = 21,
    DeBuff_AttackTime = 22,
    DeBuff_MaxHp = 23,
    DeBuff_MaxBulletCount = 24
}

enum WorldRaidDifficulty: int{
    None = 0,
    A = 1,
    B = 2,
    C = 3,
    D = 4,
    E = 5,
    F = 6,
    G = 7
}

enum TacticSpeed: int{
    None = 0,
    Slow = 1,
    Normal = 2,
    Fast = 3
}

enum TacticSkillUse: int{
    None = 0,
    Auto = 1,
    Manual = 2
}

enum ShowSkillCutIn: int{
    None = 0,
    Once = 1,
    Always = 2
}

enum BattleCalculationStat: int{
    FinalDamage = 0,
    FinalHeal = 1,
    FinalDamageRatio = 2,
    FinalDamageRatio2 = 3,
    FinalCriticalRate = 4
}

enum StatLevelUpType: int{
    Standard = 0,
    Premature = 1,
    LateBloom = 2,
    Obstacle = 3,
    TimeAttack = 4
}

enum GrowthCategory: int{
    None = 0,
    LevelUp = 1,
    Transcend = 2,
    SkillLevelUp = 3
}

enum StatType: int{
    None = 0,
    MaxHP = 1,
    AttackPower = 2,
    DefensePower = 3,
    HealPower = 4,
    AccuracyPoint = 5,
    AccuracyRate = 6,
    DodgePoint = 7,
    DodgeRate = 8,
    CriticalPoint = 9,
    CriticalChanceRate = 10,
    CriticalResistChanceRate = 11,
    CriticalDamageRate = 12,
    MoveSpeed = 13,
    SightRange = 14,
    ActiveGauge = 15,
    StabilityPoint = 16,
    StabilityRate = 17,
    ReloadTime = 18,
    MaxBulletCount = 19,
    IgnoreDelayCount = 20,
    WeaponRange = 21,
    BlockRate = 22,
    BodyRadius = 23,
    ActionCount = 24,
    StrategyMobility = 25,
    StrategySightRange = 26,
    StreetBattleAdaptation = 27,
    OutdoorBattleAdaptation = 28,
    IndoorBattleAdaptation = 29,
    HealEffectivenessRate = 30,
    CriticalChanceResistPoint = 31,
    CriticalDamageResistRate = 32,
    LifeRecoverOnHit = 33,
    NormalAttackSpeed = 34,
    AmmoCost = 35,
    GroggyGauge = 36,
    GroggyTime = 37,
    DamageRatio = 38,
    DamagedRatio = 39,
    OppressionPower = 40,
    OppressionResist = 41,
    RegenCost = 42,
    InitialWeaponRangeRate = 43,
    DefensePenetration = 44,
    DefensePenetrationResisit = 45,
    ExtendBuffDuration = 46,
    ExtendDebuffDuration = 47,
    ExtendCrowdControlDuration = 48,
    EnhanceExplosionRate = 49,
    EnhancePierceRate = 50,
    EnhanceMysticRate = 51,
    EnhanceLightArmorRate = 52,
    EnhanceHeavyArmorRate = 53,
    EnhanceUnarmedRate = 54,
    EnhanceSiegeRate = 55,
    EnhanceNormalRate = 56,
    EnhanceStructureRate = 57,
    EnhanceNormalArmorRate = 58,
    DamageRatio2Increase = 59,
    DamageRatio2Decrease = 60,
    DamagedRatio2Increase = 61,
    DamagedRatio2Decrease = 62,
    Max = 63,
    EnhanceSonicRate = 64,
    EnhanceElasticArmorRate = 65
}

enum ProductionStep: int{
    ToDo = 0,
    Doing = 1,
    Complete = 2,
    Release = 3
}

enum TacticRole: int{
    None = 0,
    DamageDealer = 1,
    Tanker = 2,
    Supporter = 3,
    Healer = 4,
    Vehicle = 5
}

enum TacticRange: int{
    Back = 0,
    Front = 1,
    Middle = 2
}

enum CVCollectionType: int{
    CVNormal = 0,
    CVEvent = 1,
    CVEtc = 2
}

enum CVPrintType: int{
    CharacterOverwrite = 0,
    PrefabOverwrite = 1,
    Add = 2
}

enum CVExceptionTarget: int{
    CharacterId = 0,
    SquadType = 1
}

enum ClanSocialGrade: int{
    None = 0,
    President = 1,
    Manager = 2,
    Member = 3,
    Applicant = 4,
    Refused = 5,
    Kicked = 6,
    Quit = 7,
    VicePredisident = 8
}

enum ClanJoinOption: int{
    Free = 0,
    Permission = 1,
    All = 2
}

enum ClanSearchOption: int{
    Name = 0,
    Id = 1
}

enum ClanRewardType: int{
    None = 0,
    AssistTerm = 1,
    AssistRent = 2,
    Attendance = 3
}

enum ConquestEnemyType: int{
    None = 0,
    Normal = 1,
    MiddleBoss = 2,
    Boss = 3,
    UnexpectedEvent = 4,
    Challenge = 5,
    IndividualErosion = 6,
    MassErosion = 7
}

enum ConquestTeamType: int{
    None = 0,
    Team1 = 1,
    Team2 = 2,
    Team3 = 3
}

enum ConquestTileType: int{
    None = 0,
    Start = 1,
    Normal = 2,
    Battle = 3,
    Base = 4
}

enum ConquestObjectType: int{
    None = 0,
    ParcelOneTimePerAccount = 1
}

enum ConquestItemType: int{
    None = 0,
    EventPoint = 1,
    EventToken1 = 2,
    EventToken2 = 3,
    EventToken3 = 4,
    EventToken4 = 5,
    EventToken5 = 6
}

enum ConquestProgressType: int{
    None = 0,
    Upgrade = 1,
    Manage = 2
}

enum TileState: int{
    None = 0,
    PartiallyConquested = 1,
    FullyConquested = 2
}

enum ConquestEventType: int{
    None = 0,
    Event01 = 1,
    Event02 = 2
}

enum ConquestConditionType: int{
    None = 0,
    OpenDateOffset = 1,
    ItemAcquire = 2,
    ParcelUse = 3,
    KillUnit = 4
}

enum ConquestErosionType: int{
    None = 0,
    IndividualErosion = 1,
    MassErosion = 2
}

enum ContentType: int{
    None = 0,
    CampaignMainStage = 1,
    CampaignSubStage = 2,
    WeekDungeon = 3,
    EventContentMainStage = 4,
    EventContentSubStage = 5,
    CampaignTutorialStage = 6,
    EventContentMainGroundStage = 7,
    SchoolDungeon = 8,
    TimeAttackDungeon = 9,
    Raid = 10,
    Conquest = 11,
    EventContentStoryStage = 12,
    CampaignExtraStage = 13,
    StoryStrategyStage = 14,
    ScenarioMode = 15,
    EventContent = 16,
    WorldRaid = 17,
    EliminateRaid = 18,
    Chaser = 19
}

enum EventContentType: int{
    Stage = 0,
    Gacha = 1,
    Mission = 2,
    Shop = 3,
    Raid = 4,
    Arena = 5,
    BoxGacha = 6,
    Collection = 7,
    Recollection = 8,
    MiniGameRhythm = 9,
    CardShop = 10,
    EventLocation = 11,
    MinigameRhythmEvent = 12,
    FortuneGachaShop = 13,
    SubEvent = 14,
    EventMeetup = 15,
    BoxGachaResult = 16,
    Conquest = 17,
    WorldRaid = 18,
    DiceRace = 19,
    MiniGameRhythmMission = 20,
    WorldRaidEntrance = 21,
    MiniEvent = 22,
    MiniGameShooting = 23,
    MiniGameShootingMission = 24,
    MiniGameTBG = 25,
    TimeAttackDungeon = 26,
    EliminateRaid = 27
}

enum OpenCondition: int{
    Hide = 0,
    Lock = 1,
    Open = 2
}

enum ResetContentType: int{
    None = 0,
    HardStagePlay = 1,
    StarategyMapHeal = 2,
    ShopRefresh = 3,
    ArenaDefenseVictoryReward = 4,
    WeeklyMasterCoin = 5,
    WorldRaidGemEnterCount = 6,
    ConquestDailyErosionCheck = 7,
    MiniEventToken = 8
}

enum WeekDungeonType: int{
    None = 0,
    ChaserA = 1,
    ChaserB = 2,
    ChaserC = 3,
    FindGift = 4,
    Blood = 5
}

enum StarGoalType: int{
    None = 0,
    AllAlive = 1,
    Clear = 2,
    GetBoxes = 3,
    ClearTimeInSec = 4
}

enum OpenConditionContent: int{
    Shop = 0,
    Gacha = 1,
    LobbyIllust = 2,
    Raid = 3,
    Cafe = 4,
    Unit_Growth_Skill = 5,
    Unit_Growth_LevelUp = 6,
    Unit_Growth_Transcendence = 7,
    Arena = 8,
    Academy = 9,
    Equip = 10,
    Item = 11,
    Favor = 12,
    Prologue = 13,
    Mission = 14,
    WeekDungeon_Chase = 15,
    __Deprecated_WeekDungeon_FindGift = 16,
    __Deprecated_WeekDungeon_Blood = 17,
    Story_Sub = 18,
    Story_Replay = 19,
    WeekDungeon = 20,
    None = 21,
    Shop_Gem = 22,
    Craft = 23,
    Student = 24,
    GuideMission = 25,
    Clan = 26,
    Echelon = 27,
    Campaign = 28,
    EventContent = 29,
    Guild = 30,
    EventStage_1 = 31,
    EventStage_2 = 32,
    Talk = 33,
    Billing = 34,
    Schedule = 35,
    Story = 36,
    Tactic_Speed = 37,
    Cafe_Invite = 38,
    EventMiniGame_1 = 39,
    SchoolDungeon = 40,
    TimeAttackDungeon = 41,
    ShiftingCraft = 42,
    WorldRaid = 43,
    Tactic_Skip = 44,
    Mulligan = 45,
    EventPermanent = 46,
    Main_L_1_2 = 47,
    Main_L_1_3 = 48,
    Main_L_1_4 = 49,
    EliminateRaid = 50,
    ContentType02 = 51,
    ContentType0201 = 52
}

enum ContentLockType: int{
    None = 0,
    NotUseControlledByOtherSetting = 1,
    Academy = 2,
    Arena = 3,
    Billing = 4,
    Cafe = 5,
    Campaign = 6,
    Clan = 7,
    Craft = 8,
    Echelon = 9,
    Equipment = 10,
    EventContent = 11,
    EventStage_1 = 12,
    EventStage_2 = 13,
    Favor = 14,
    Gacha = 15,
    GuideMission = 16,
    Item = 17,
    LobbyIllust = 18,
    Mission = 19,
    MomoTalk = 20,
    Raid = 21,
    Schedule = 22,
    Shop = 23,
    SkipHistorySave = 24,
    Story = 25,
    Unit_Growth_LevelUp = 26,
    Unit_Growth_Skill = 27,
    Unit_Growth_Transcendence = 28,
    WeekDungeon = 29,
    WeekDungeon_Chase = 30,
    SchoolDungeon = 31,
    TimeAttackDungeon = 32,
    WorldRaid = 33,
    RaidSeasonReward = 34,
    RaidRankingReward = 35,
    Friend = 36,
    Main_L_1_2 = 37,
    Main_L_1_3 = 38,
    Main_L_1_4 = 39,
    EliminateRaid = 40,
    EliminateRaidSeasonReward = 41,
    EliminateRaidRankingReward = 42
}

enum TutorialFailureContentType: int{
    None = 0,
    Campaign = 1,
    WeekDungeon = 2,
    Raid = 3,
    TimeAttackDungeon = 4,
    WorldRaid = 5,
    Conquest = 6,
    EliminateRaid = 7
}

enum FeverBattleType: int{
    Campaign = 0,
    Raid = 1,
    WeekDungeon = 2,
    Arena = 3
}

enum EventContentScenarioConditionType: int{
    None = 0,
    DayAfter = 1,
    EventPoint = 2
}

enum EventTargetType: int{
    WeekDungeon = 0,
    Chaser = 1,
    Campaign_Normal = 2,
    Campaign_Hard = 3,
    SchoolDungeon = 4,
    AcademySchedule = 5,
    TimeAttackDungeon = 6,
    AccountLevelExpIncrease = 7,
    Raid = 8,
    EliminateRaid = 9
}

enum ContentResultType: int{
    Failure = 0,
    Success = 1
}

enum EventContentItemType: int{
    EventPoint = 0,
    EventToken1 = 1,
    EventToken2 = 2,
    EventToken3 = 3,
    EventToken4 = 4,
    EventToken5 = 5,
    EventMeetUpTicket = 6
}

enum RaidSeasonType: int{
    None = 0,
    Open = 1,
    Close = 2,
    Settlement = 3
}

enum BuffConditionType: int{
    All = 0,
    Character = 1,
    School = 2,
    Weapon = 3
}

enum EventCollectionUnlockType: int{
    None = 0,
    ClearSpecificEventStage = 1,
    ClearSpecificEventScenario = 2,
    ClearSpecificEventMission = 3,
    PurchaseSpecificItemCount = 4,
    SpecificEventLocationRank = 5,
    DiceRaceConsumeDiceCount = 6,
    MinigameTBGThemaClear = 7,
    MinigameEnter = 8
}

enum ShortcutContentType: int{
    None = 0,
    CampaignStage = 1,
    EventStage = 2,
    Blood = 3,
    WeekDungeon = 4,
    Arena = 5,
    Raid = 6,
    Shop = 7,
    ItemInventory = 8,
    Craft = 9,
    SchoolDungeon = 10,
    Academy = 11
}

enum JudgeGrade: int{
    None = 0,
    Miss = 1,
    Attack = 2,
    Critical = 3
}

enum SchoolDungeonType: int{
    SchoolA = 0,
    SchoolB = 1,
    SchoolC = 2,
    None = 3
}

enum EventContentBuffFindRule: int{
    None = 0,
    WeaponType = 1,
    SquadType = 2,
    StreetBattleAdaptation = 3,
    OutdoorBattleAdaptation = 4,
    IndoorBattleAdaptation = 5,
    BulletType = 6,
    School = 7,
    TacticRange = 8
}

enum TimeAttackDungeonRewardType: int{
    Fixed = 0,
    TimeWeight = 1
}

enum TimeAttackDungeonType: int{
    None = 0,
    Defense = 1,
    Shooting = 2,
    Destruction = 3,
    Escort = 4
}

enum SuddenMissionContentType: int{
    OrdinaryState = 0,
    CampaignNormalStage = 1,
    CampaignHardStage = 2,
    EventStage = 3,
    WeekDungeon = 4,
    Chaser = 5,
    SchoolDungeon = 6,
    TimeAttackDungeon = 7,
    Raid = 8
}

enum ContentsChangeType: int{
    None = 0,
    WorldRaidBossDamageRatio = 1,
    WorldRaidBossGroupDate = 2
}

enum EventNotifyType: int{
    RewardIncreaseEvent = 0,
    AccountExpIncreaseEvent = 1,
    RaidSeasonManager = 2,
    TimeAttackDungeonSeasonManage = 3,
    EliminateRaidSeasonManage = 4
}

enum EventContentDiceRaceResultType: int{
    DiceResult1 = 0,
    DiceResult2 = 1,
    DiceResult3 = 2,
    DiceResult4 = 3,
    DiceResult5 = 4,
    DiceResult6 = 5,
    MoveForward = 6,
    LapFinish = 7,
    EventOccur = 8,
    DiceResultFixed1 = 9,
    DiceResultFixed2 = 10,
    DiceResultFixed3 = 11,
    DiceResultFixed4 = 12,
    DiceResultFixed5 = 13,
    DiceResultFixed6 = 14,
    SpecialReward = 15
}

enum EventContentDiceRaceNodeType: int{
    StartNode = 0,
    RewardNode = 1,
    MoveForwardNode = 2,
    SpecialRewardNode = 3
}

enum GuideMissionTabType: int{
    None = 0,
    Daily = 1,
    StageClear = 2
}

enum RankingSearchType: int{
    None = 0,
    Rank = 1,
    Score = 2
}

enum EventContentReleaseType: int{
    None = 0,
    Permanent = 1,
    MainStory = 2
}

enum CraftSlotIndex: int{
    Slot00 = 0,
    Slot01 = 1,
    Slot02 = 2,
    Max = 3
}

enum CraftNodeTier: int{
    Base = 0,
    Node01 = 1,
    Node02 = 2,
    Node03 = 3,
    Max = 4
}

enum EquipmentCategory: int{
    Unable = 0,
    Exp = 1,
    Bag = 2,
    Hat = 3,
    Gloves = 4,
    Shoes = 5,
    Badge = 6,
    Hairpin = 7,
    Charm = 8,
    Watch = 9,
    Necklace = 10,
    WeaponExpGrowthA = 11,
    WeaponExpGrowthB = 12,
    WeaponExpGrowthC = 13,
    WeaponExpGrowthZ = 14
}

enum EquipmentOptionType: int{
    None = 0,
    MaxHP_Base = 1,
    MaxHP_Coefficient = 2,
    AttackPower_Base = 3,
    AttackPower_Coefficient = 4,
    DefensePower_Base = 5,
    DefensePower_Coefficient = 6,
    HealPower_Base = 7,
    HealPower_Coefficient = 8,
    CriticalPoint_Base = 9,
    CriticalPoint_Coefficient = 10,
    CriticalChanceRate_Base = 11,
    CriticalDamageRate_Base = 12,
    CriticalDamageRate_Coefficient = 13,
    SightRange_Base = 14,
    SightRange_Coefficient = 15,
    MaxBulletCount_Base = 16,
    MaxBulletCount_Coefficient = 17,
    HPRecoverOnKill_Base = 18,
    HPRecoverOnKill_Coefficient = 19,
    StreetBattleAdaptation_Base = 20,
    OutdoorBattleAdaptation_Base = 21,
    IndoorBattleAdaptation_Base = 22,
    HealEffectivenessRate_Base = 23,
    HealEffectivenessRate_Coefficient = 24,
    CriticalChanceResistPoint_Base = 25,
    CriticalChanceResistPoint_Coefficient = 26,
    CriticalDamageResistRate_Base = 27,
    CriticalDamageResistRate_Coefficient = 28,
    ExSkillUpgrade = 29,
    OppressionPower_Base = 30,
    OppressionPower_Coefficient = 31,
    OppressionResist_Base = 32,
    OppressionResist_Coefficient = 33,
    StabilityPoint_Base = 34,
    StabilityPoint_Coefficient = 35,
    AccuracyPoint_Base = 36,
    AccuracyPoint_Coefficient = 37,
    DodgePoint_Base = 38,
    DodgePoint_Coefficient = 39,
    MoveSpeed_Base = 40,
    MoveSpeed_Coefficient = 41,
    Max = 42,
    NormalAttackSpeed_Base = 43,
    NormalAttackSpeed_Coefficient = 44,
    DefensePenetration_Base = 45,
    DefensePenetrationResisit_Base = 46,
    ExtendBuffDuration_Base = 47,
    ExtendDebuffDuration_Base = 48,
    ExtendCrowdControlDuration_Base = 49,
    EnhanceExplosionRate_Base = 50,
    EnhanceExplosionRate_Coefficient = 51,
    EnhancePierceRate_Base = 52,
    EnhancePierceRate_Coefficient = 53,
    EnhanceMysticRate_Base = 54,
    EnhanceMysticRate_Coefficient = 55,
    EnhanceLightArmorRate_Base = 56,
    EnhanceLightArmorRate_Coefficient = 57,
    EnhanceHeavyArmorRate_Base = 58,
    EnhanceHeavyArmorRate_Coefficient = 59,
    EnhanceUnarmedRate_Base = 60,
    EnhanceUnarmedRate_Coefficient = 61,
    EnhanceSiegeRate_Base = 62,
    EnhanceSiegeRate_Coefficient = 63,
    EnhanceNormalRate_Base = 64,
    EnhanceNormalRate_Coefficient = 65,
    EnhanceStructureRate_Base = 66,
    EnhanceStructureRate_Coefficient = 67,
    EnhanceNormalArmorRate_Base = 68,
    EnhanceNormalArmorRate_Coefficient = 69,
    DamageRatio2Increase_Base = 70,
    DamageRatio2Increase_Coefficient = 71,
    DamageRatio2Decrease_Base = 72,
    DamageRatio2Decrease_Coefficient = 73,
    DamagedRatio2Increase_Base = 74,
    DamagedRatio2Increase_Coefficient = 75,
    DamagedRatio2Decrease_Base = 76,
    DamagedRatio2Decrease_Coefficient = 77,
    EnhanceSonicRate_Base = 78,
    EnhanceSonicRate_Coefficient = 79,
    EnhanceElasticArmorRate_Base = 80,
    EnhanceElasticArmorRate_Coefficient = 81,
    IgnoreDelayCount_Base = 82,
    WeaponRange_Base = 83,
    BlockRate_Base = 84,
    BlockRate_Coefficient = 85,
    AmmoCost_Base = 86,
    RegenCost_Base = 87,
    RegenCost_Coefficient = 88
}

enum MultipleConditionCheckType: int{
    And = 0,
    Or = 1
}

enum Language: int{
    Kr = 0,
    Jp = 1,
    Th = 2,
    Tw = 3,
    En = 4
}

enum SoundType: int{
    UI = 0,
    BGM = 1,
    FX = 2
}

enum WeekDay: int{
    Sunday = 0,
    Monday = 1,
    Tuesday = 2,
    Wednesday = 3,
    Thursday = 4,
    Friday = 5,
    Saturday = 6,
    All = 7
}

enum EchelonType: int{
    None = 0,
    Adventure = 1,
    Raid = 2,
    ArenaAttack = 3,
    ArenaDefence = 4,
    WeekDungeonChaserA = 5,
    Scenario = 6,
    WeekDungeonBlood = 7,
    WeekDungeonChaserB = 8,
    WeekDungeonChaserC = 9,
    WeekDungeonFindGift = 10,
    EventContent = 11,
    SchoolDungeonA = 12,
    SchoolDungeonB = 13,
    SchoolDungeonC = 14,
    TimeAttack = 15,
    WorldRaid = 16,
    Conquest = 17,
    ConquestManage = 18,
    StoryStrategyStage = 19,
    EliminateRaid01 = 20,
    EliminateRaid02 = 21,
    EliminateRaid03 = 22
}

enum NoticeType: int{
    None = 0,
    Notice = 1,
    Event = 2
}

enum RewardTag: int{
    Default = 0,
    FirstClear = 1,
    StrategyObject = 2,
    Event = 3,
    ThreeStar = 4,
    ProductMonthly = 5,
    Rare = 6,
    EventBonus = 7,
    TimeWeight = 8,
    ProductWeekly = 9,
    ProductBiweekly = 10,
    EventPermanentReward = 11,
    ConquestManageEvent = 12,
    ConquestManageDefault = 13,
    ConquestCalculateDefault = 14,
    ConquestCalculateLevel2 = 15,
    ConquestCalculateLevel3 = 16,
    ConquestFootholdUpgrade2 = 17,
    ConquestFootholdUpgrade3 = 18,
    ConquestErosionPenalty = 19,
    GemBonus = 20,
    GemPaid = 21
}

enum ArenaRewardType: int{
    None = 0,
    Time = 1,
    Daily = 2,
    SeasonRecord = 3,
    OverallRecord = 4,
    SeasonClose = 5,
    AttackVictory = 6,
    DefenseVictory = 7,
    RankIcon = 8
}

enum ServiceActionType: int{
    ClanCreate = 0,
    HardAdventurePlayCountRecover = 1
}

enum RaidStatus: int{
    None = 0,
    Playing = 1,
    Clear = 2,
    Close = 3
}

enum WebAPIErrorLevel: int{
    None = 0,
    Warning = 1,
    Error = 2
}

enum GachaTicketType: int{
    None = 0,
    PackageThreeStar = 1,
    ThreeStar = 2,
    TwoStar = 3,
    Normal = 4,
    NormalOnce = 5,
    StartDash = 6,
    SelectRecruit = 7,
    PackagePropertyThreeStar = 8
}

enum EventChangeType: int{
    MainSub = 0,
    SubMain = 1
}

enum CafeCharacterState: int{
    None = 0,
    Idle = 1,
    Walk = 2,
    Reaction = 3,
    Interaction = 4,
    Max = 5
}

enum FurnitureFunctionType: int{
    None = 0,
    EventCollection = 1,
    VideoPlay = 2,
    TrophyCollection = 3
}

enum NotificationEventReddot: int{
    StagePointReward = 0,
    MissionComplete = 1,
    MiniGameMissionComplete = 2,
    WorldRaidReward = 3,
    ConquestCalculateReward = 4,
    DiceRaceLapReward = 5
}

enum EmblemCategory: int{
    None = 0,
    Default = 1,
    Mission = 2,
    GroupStroy = 3,
    Event = 4,
    MainStory = 5,
    Favor = 6,
    Boss = 7
}

enum EmblemDisplayType: int{
    Always = 0,
    Time = 1,
    Favor = 2
}

enum EmblemCheckPassType: int{
    None = 0,
    Default = 1,
    Favor = 2,
    Story = 3
}

enum Nation: int{
    None = 0,
    All = 1,
    JP = 2,
    GL = 3,
    KR = 4
}

enum FriendSearchLevelOption: int{
    Recommend = 0,
    All = 1,
    Level1To30 = 2,
    Level31To40 = 3,
    Level41To50 = 4,
    Level51To60 = 5,
    Level61To70 = 6,
    Level71To80 = 7,
    Level81To90 = 8,
    Level91To100 = 9
}

enum ItemCategory: int{
    Coin = 0,
    CharacterExpGrowth = 1,
    SecretStone = 2,
    Material = 3,
    Consumable = 4,
    Collectible = 5,
    Favor = 6,
    RecruitCoin = 7,
    MonthlyBonus = 8,
    InvisibleToken = 9
}

enum MailType: int{
    System = 0,
    Attendance = 1,
    Event = 2,
    MassTrade = 3,
    InventoryFull = 4,
    ArenaDefenseVictory = 5,
    CouponUsageReward = 6,
    ArenaSeasonClose = 7,
    ProductReward = 8,
    MonthlyProductReward = 9,
    ExpiryChangeItem = 10,
    ClanAttendance = 11,
    AccountLink = 12,
    NewUserBonus = 13,
    LeftClanAssistReward = 14,
    CashShopBuy = 15,
    MonthlyProductPackage = 16,
    WebEventReward = 17,
    AttendanceImmediately = 18,
    WeeklyProductReward = 19,
    BiweeklyProductReward = 20
}

enum AttendanceType: int{
    Basic = 0,
    Event = 1,
    Newbie = 2,
    EventCountDown = 3,
    Event20Days = 4
}

enum AttendanceCountRule: int{
    Accumulation = 0,
    Date = 1
}

enum AttendanceResetType: int{
    User = 0,
    Server = 1
}

enum Geas: int{
    ForwardProjectile = 0,
    DiagonalProjectile = 1,
    SideProjectile = 2,
    Pierce = 3,
    Reflect = 4,
    Burn = 5,
    Chill = 6,
    AttackPower = 7,
    AttackSpeed = 8,
    Critical = 9,
    Heal = 10
}

enum TBGObjectType: int{
    None = 0,
    EnemyBoss = 1,
    EnemyMinion = 2,
    Random = 3,
    Facility = 4,
    TreasureBox = 5,
    Start = 6,
    Portal = 7
}

enum TBGOptionSuccessType: int{
    None = 0,
    TBGItemAcquire = 1,
    ItemAcquire = 2,
    TBGDiceAcquire = 3,
    Portal = 4
}

enum TBGItemType: int{
    None = 0,
    Dice = 1,
    Heal = 2,
    HealExpansion = 3,
    Defence = 4,
    Guide = 5,
    DiceResultValue = 6,
    DefenceCritical = 7,
    DiceResultConfirm = 8
}

enum TBGItemEffectType: int{
    None = 0,
    PermanentContinuity = 1,
    TemporaryContinuation = 2,
    Immediately = 3
}

enum TBGTileType: int{
    None = 0,
    Start = 1,
    Movable = 2,
    UnMovable = 3
}

enum TBGThemaType: int{
    None = 0,
    Normal = 1,
    Hidden = 2
}

enum TBGPortalCondition: int{
    None = 0,
    ObjectAllEncounter = 1,
    Round = 2
}

enum TBGProbModifyCondition: int{
    None = 0,
    AllyRevive = 1,
    DicePlayFail = 2
}

enum TBGVoiceCondition: int{
    None = 0,
    DiceResultSuccess = 1,
    DiceResultFailBattle = 2,
    DiceResultFailRandom = 3,
    EnemyDie = 4,
    TreasureBoxNormal = 5,
    TreasureBoxSpecial = 6,
    FacilityResult = 7
}

enum MiniGameTBGThemaRewardType: int{
    TreasureReward = 0,
    EmptyTreasureReward = 1,
    HiddenThemaTreasureReward = 2
}

enum MissionCategory: int{
    Challenge = 0,
    Daily = 1,
    Weekly = 2,
    Achievement = 3,
    GuideMission = 4,
    All = 5,
    MiniGameScore = 6,
    MiniGameEvent = 7,
    EventAchievement = 8,
    DailySudden = 9,
    DailyFixed = 10,
    EventFixed = 11
}

enum MissionResetType: int{
    None = 0,
    Daily = 1,
    Weekly = 2
}

enum MissionCompleteConditionType: int{
    None = 0,
    Reset_DailyLogin = 1,
    Reset_DailyLoginCount = 2,
    Reset_CompleteMission = 3,
    Achieve_EquipmentLevelUpCount = 4,
    Achieve_EquipmentTierUpCount = 5,
    Achieve_CharacterLevelUpCount = 6,
    Reset_CharacterTranscendenceCount = 7,
    Reset_ClearTaticBattleCount = 8,
    Achieve_ClearCampaignStageCount = 9,
    Reset_KillSpecificEnemyCount = 10,
    Reset_KillEnemyWithTagCount = 11,
    Reset_GetCharacterCount = 12,
    Reset_GetCharacterWithTagCount = 13,
    Reset_GetSpecificCharacterCount = 14,
    Reset_AccountLevelUp = 15,
    Reset_GetEquipmentCount = 16,
    Reset_GachaCount = 17,
    Reset_UseGem = 18,
    Reset_GetGem = 19,
    Reset_GetGemPaid = 20,
    Achieve_GetGold = 21,
    Achieve_GetItem = 22,
    Reset_GetFavorLevel = 23,
    Reset___Deprecated_EquipmentAtSpecificLevelCount = 24,
    Reset_EquipmentAtSpecificTierUpCount = 25,
    Reset_CharacterAtSpecificLevelCount = 26,
    Reset_CharacterAtSpecificTranscendenceCount = 27,
    Achieve_CharacterSkillLevelUpCount = 28,
    Reset_CharacterAtSpecificSkillLevelCount = 29,
    Reset_CompleteScheduleCount = 30,
    Reset_CompleteScheduleGroupCount = 31,
    Reset_AcademyLocationRankSum = 32,
    Reset_CraftCount = 33,
    Achieve_GetComfortPoint = 34,
    Achieve_GetWeaponCount = 35,
    Reset_EquipWeaponCount_Obsolete = 36,
    Reset_CompleteScheduleWithSpecificCharacter = 37,
    Reset_CafeInteractionCount = 38,
    Reset_SpecificCharacterAtSpecificLevel = 39,
    Reset_SpecificCharacterAtSpecificTranscendence = 40,
    Reset_LobbyInteraction = 41,
    Achieve_ClearWeekDungeonCount = 42,
    Reset_ClearSpecificWeekDungeonCount = 43,
    Achieve_JoinRaidCount = 44,
    Reset_JoinSpecificRaidCount = 45,
    Achieve_JoinArenaCount = 46,
    Reset_ArenaVictoryCount = 47,
    Reset_RaidDamageAmountOnOneBattle = 48,
    Reset_ClearEventStageCount = 49,
    Reset_UseSpecificCharacterCount = 50,
    Achieve_UseGold = 51,
    Reset_UseTiket = 52,
    Reset_ShopBuyCount = 53,
    Reset_ShopBuyActionPointCount = 54,
    Reset_SpecificCharacterAtSpecificFavorRank = 55,
    Reset_ClearSpecificScenario = 56,
    Reset_GetSpecificItemCount = 57,
    Achieve_TotalGetClearStarCount = 58,
    Reset_CompleteCampaignStageMinimumTurn = 59,
    Achieve_TotalLoginCount = 60,
    Reset_LoginAtSpecificTime = 61,
    Reset_CompleteFavorSchedule = 62,
    Reset_CompleteFavorScheduleAtSpecificCharacter = 63,
    Reset_GetMemoryLobbyCount = 64,
    Reset_GetFurnitureGroupCount = 65,
    Reset_AcademyLocationAtSpecificRank = 66,
    Reset_ClearCampaignStageDifficultyNormal = 67,
    Reset_ClearCampaignStageDifficultyHard = 68,
    Achieve_ClearChaserDungeonCount = 69,
    Reset_ClearSpecificChaserDungeonCount = 70,
    Reset_GetCafeRank = 71,
    Reset_SpecificStarCharacterCount = 72,
    Reset_EventClearCampaignStageCount = 73,
    Reset_EventClearSpecificCampaignStageCount = 74,
    Reset_EventCompleteCampaignStageMinimumTurn = 75,
    Reset_EventClearCampaignStageDifficultyNormal = 76,
    Reset_EventClearCampaignStageDifficultyHard = 77,
    Reset_ClearSpecificCampaignStageCount = 78,
    Reset_GetItemWithTagCount = 79,
    Reset_GetFurnitureWithTagCount = 80,
    Reset_GetEquipmentWithTagCount = 81,
    Reset_ClearCampaignStageTimeLimitFromSecond = 82,
    Reset_ClearEventStageTimeLimitFromSecond = 83,
    Reset_ClearRaidTimeLimitFromSecond = 84,
    Reset_ClearBattleWithTagCount = 85,
    Reset_ClearWeekDungeonTimeLimitFromSecond = 86,
    Reset_CompleteScheduleWithTagCount = 87,
    Reset_ClearChaserDungeonTimeLimitFromSecond = 88,
    Reset_GetTotalScoreRhythm = 89,
    Reset_GetBestScoreRhythm = 90,
    Reset_GetSpecificScoreRhythm = 91,
    Reset_ClearStageRhythm = 92,
    Reset_GetComboCountRhythm = 93,
    Reset_GetFullComboRhythm = 94,
    Reset_GetFeverCountRhythm = 95,
    Reset_UseActionPoint = 96,
    Achieve_ClearSchoolDungeonCount = 97,
    Reset_ClearSchoolDungeonTimeLimitFromSecond = 98,
    Reset_ClearSpecificSchoolDungeonCount = 99,
    Reset_GetCriticalCountRhythm = 100,
    Achieve_WeaponTranscendenceCount = 101,
    Achieve_WeaponLevelUpCount = 102,
    Reset_WeaponAtSpecificTranscendenceCount = 103,
    Reset_WeaponAtSpecificLevelUpCount = 104,
    Reset_BuyShopGoods = 105,
    Reset_ClanLogin = 106,
    Reset_AssistCharacterSetting = 107,
    Reset_DailyMissionFulfill = 108,
    Reset_SelectedMissionFulfill = 109,
    Reset_TotalDamageToWorldRaid = 110,
    Reset_JoinWorldRaidTypeNumber = 111,
    Reset_JoinWorldRaidBattleWithTagCount = 112,
    Reset_ClearWorldRaidTimeLimitFromSecond = 113,
    Achieve_KillEnemyWithDecagrammatonSPOTagCount = 114,
    Reset_ConquerTileCount = 115,
    Reset_ConquerSpecificStepTileCount = 116,
    Reset_ConquerSpecificStepTileAll = 117,
    Reset_UpgradeConquestBaseTileCount = 118,
    Reset_KillConquestBoss = 119,
    Reset_ClearEventConquestTileTimeLimitFromSecond = 120,
    Reset_DiceRaceUseDiceCount = 121,
    Reset_DiceRaceFinishLapCount = 122,
    Reset_FortuneGachaCount = 123,
    Reset_FortuneGachaCountByGrade = 124,
    Reset_ClearCountShooting = 125,
    Reset_ClearSpecificStageShooting = 126,
    Reset_ClearSpecificCharacterShooting = 127,
    Reset_ClearSpecificSectionShooting = 128,
    Achieve_JoinEliminateRaidCount = 129,
    Reset_TBGCompleteRoundCount = 130,
    Reset_CompleteStage = 131,
    Reset_TBGClearSpecificThema = 132
}

enum AccountAchievementType: int{
    TotalLoginCount = 0,
    TotalGetClearStarCount = 1,
    TotalCharacterLevelUpCount = 2,
    TotalCharacterSkillLevelUpCount = 3,
    TotalClearCampaignStageCount = 4,
    TotalClearChaserDungeonCount = 5,
    TotalClearWeekDungeonCount = 6,
    TotalEquipmentLevelUpCount = 7,
    TotalEquipmentTierUpCount = 8,
    MaxComfortPoint = 9,
    TotalGetGold = 10,
    TotalUseGold = 11,
    TotalJoinArenaCount = 12,
    TotalJoinRaidCount = 13,
    TotalClearSchoolDungeonCount = 14,
    TotalGetWeaponCount = 15,
    TotalWeaponLevelUpCount = 16,
    TotalWeaponTranscendenceCount = 17,
    KillEnemyWithDecagrammatonSPOTagCount = 18,
    EventPoint = 19,
    ConquestCalculateReward = 20,
    TotalJoinEliminateRaidCount = 21
}

enum MissionToastDisplayConditionType: int{
    Always = 0,
    Complete = 1,
    Never = 2
}

enum NexonBillingState: int{
    ValiDateWait = 0,
    ValiDateFail = 1,
    ValiDateSuccess = 2,
    Finish = 3
}

enum AccountBanType: int{
    None = 0,
    AbuseGamePlay = 1,
    AbuseMarket = 2,
    AbuseGameSystem = 3,
    OperaionPolicyViolate = 4,
    Useillegalprogram = 5,
    Temporaryconstraint = 6
}

enum ParcelType: int{
    None = 0,
    Character = 1,
    Currency = 2,
    Equipment = 3,
    Item = 4,
    GachaGroup = 5,
    Product = 6,
    Shop = 7,
    MemoryLobby = 8,
    AccountExp = 9,
    CharacterExp = 10,
    FavorExp = 11,
    TSS = 12,
    Furniture = 13,
    ShopRefresh = 14,
    LocationExp = 15,
    Recipe = 16,
    CharacterWeapon = 17,
    ProductMonthly = 18,
    CharacterGear = 19,
    IdCardBackground = 20,
    Emblem = 21,
    ParcelType01 = 22,
    Costume = 23
}

enum Rarity: int{
    N = 0,
    R = 1,
    SR = 2,
    SSR = 3
}

enum Tier: int{
    T1 = 0,
    T2 = 1,
    T3 = 2,
    T4 = 3
}

enum CurrencyTypes: int{
    Invalid = 0,
    Gold = 1,
    GemPaid = 2,
    GemBonus = 3,
    Gem = 4,
    ActionPoint = 5,
    AcademyTicket = 6,
    ArenaTicket = 7,
    RaidTicket = 8,
    WeekDungeonChaserATicket = 9,
    WeekDungeonFindGiftTicket = 10,
    WeekDungeonBloodTicket = 11,
    WeekDungeonChaserBTicket = 12,
    WeekDungeonChaserCTicket = 13,
    SchoolDungeonATicket = 14,
    SchoolDungeonBTicket = 15,
    SchoolDungeonCTicket = 16,
    TimeAttackDungeonTicket = 17,
    MasterCoin = 18,
    WorldRaidTicketA = 19,
    WorldRaidTicketB = 20,
    WorldRaidTicketC = 21,
    ChaserTotalTicket = 22,
    SchoolDungeonTotalTicket = 23,
    EliminateTicketA = 24,
    EliminateTicketB = 25,
    EliminateTicketC = 26,
    Max = 27
}

enum SortingTarget: int{
    None = 0,
    Rarity = 1,
    Level = 2,
    StarGrade = 3,
    Tier = 4
}

enum CurrencyOverChargeType: int{
    CanNotCharge = 0,
    FitToLimit = 1,
    ChargeOverLimit = 2
}

enum CurrencyAdditionalChargeType: int{
    EnableAutoChargeOverLimit = 0,
    DisableAutoChargeOverLimit = 1
}

enum RecipeType: int{
    None = 0,
    Craft = 1,
    SkillLevelUp = 2,
    CharacterTranscendence = 3,
    EquipmentTierUp = 4,
    CafeRankUp = 5,
    SelectionItem = 6,
    WeaponTranscendence = 7,
    SelectRecruit = 8
}

enum GachaGroupType: int{
    None = 0,
    Reward_General = 1,
    System_Craft = 2,
    Reward_Pack = 3
}

enum ParcelChangeReason: int{
    None = 0,
    Acquire_NewAccount = 1,
    Acquire_PlayReward = 2,
    Acquire_ChapterReward = 3,
    Acquire_LoginReward = 4,
    Acquire_EventReward = 5,
    Acquire_GMPush = 6,
    Acquire_ShopBuy = 7,
    Acquire_GachaBuy = 8,
    Acquire_CurrencyBuy = 9,
    Equipment_Equip = 10,
    Equipment_Unequip = 11,
    Equipment_Levelup = 12,
    Equipment_LimitBreak = 13,
    Equipment_Transcendence = 14,
    Equipment_Enchant = 15,
    Item_Use = 16,
    Item_Lock = 17,
    Item_CharacterGrowthMaterial = 18,
    Item_Change = 19,
    Item_Delete = 20,
    Item_Consume = 21,
    Item_SelectTicket = 22,
    Character_ExpGrowth = 23,
    Character_Transcendence = 24,
    Character_SkillLevelUp = 25,
    Character_FavorGrowth = 26,
    Furniture_CafeSet = 27,
    Furniture_CafeRecall = 28,
    Academy_AttendSchedule = 29,
    Academy_MessageList = 30,
    Adventure_EnterMainStage = 31,
    Adventure_EnterSubStage = 32,
    Adventure_MainStageBattleResult = 33,
    Adventure_SubStageBattleResult = 34,
    Adventure_ChapterClearReward = 35,
    Adventure_Retreat = 36,
    Adventure_PurchasePlayCountHardStage = 37,
    Adventure_TutorialStage = 38,
    Adventure_TutorialStageBattleResult = 39,
    ContentSweep_Sweep = 40,
    Arena_TimeReward = 41,
    Arena_DailyReward = 42,
    Arena_EnterBattle = 43,
    Arena_BattleResult = 44,
    Cafe_Interact = 45,
    Cafe_Production = 46,
    Cafe_RankUp = 47,
    Cafe_GiveGift = 48,
    WeekDungeon_BattleResult = 49,
    WeekDungeon_EnterBattle = 50,
    WeekDungeon_Retreat = 51,
    Mission_Clear = 52,
    Shop_Refresh = 53,
    Shop_BuyEligma = 54,
    Shop_BuyMerchandise = 55,
    Shop_BuyGacha = 56,
    Scenario_Clear = 57,
    Recipe_Craft = 58,
    Raid_Failed = 59,
    Raid_Reward = 60,
    Raid_SeasonReward = 61,
    Raid_CreateBattle = 62,
    CumulativeTimeReward_Reward = 63,
    Mail_Receive = 64,
    MomoTalk_FavorSchedule = 65,
    WeekDungeon_EnterBlood = 66,
    WeekDungeon_EnterGift = 67,
    Acquire_ActionPoint = 68,
    Acquire_ArenaTicket = 69,
    EventContent_TotalReward = 70,
    Craft_UpdateNode = 71,
    Craft_CompleteProcess = 72,
    Craft_Reward = 73,
    EventContent_BattleResult = 74,
    Adventure_Sweep = 75,
    EventContent_Sweep = 76,
    WeekDungeon_Sweep = 77,
    Acquire_MonthlyProduct = 78,
    Acquire_DailyReward = 79,
    Billing_PurchaseProduct = 80,
    EventContent_EnterMainStage = 81,
    EventContent_EnterSubStage = 82,
    EventContent_MainStageResult = 83,
    EventContent_SubStageResult = 84,
    EventContent_Retreat = 85,
    WeekDungeon_BloodResult = 86,
    WeekDungeon_GiftResult = 87,
    WeekDungeon_EnterChaserA = 88,
    WeekDungeon_EnterChaserB = 89,
    WeekDungeon_EnterChaserC = 90,
    WeekDungeon_ChaserAResult = 91,
    WeekDungeon_ChaserBResult = 92,
    WeekDungeon_ChaserCResult = 93,
    EventContent_BoxGacha = 94,
    Raid_Sweep = 95,
    Clan_AssistReward = 96,
    EventContent_CardShop = 97,
    CharacterWeapon_ExpGrowth = 98,
    CharacterWeapon_Transcendence = 99,
    MiniGameMission_Clear = 100,
    Clan_Create = 101,
    ContentDiscard_Currency = 102,
    SchoolDungeon_EnterSchoolA = 103,
    SchoolDungeon_EnterSchoolB = 104,
    SchoolDungeon_EnterSchoolC = 105,
    SchoolDungeon_SchoolAResult = 106,
    SchoolDungeon_SchoolBResult = 107,
    SchoolDungeon_SchoolCResult = 108,
    TimeAttackDungeon_CreateBattle = 109,
    TimeAttackDungeon_EndBattle = 110,
    TimeAttackDungeon_Reward = 111,
    Arena_SeasonReward = 112,
    Arena_OverallReward = 113,
    EventContent_AttendSchedule = 114,
    EventContent_BuyFortuneGacha = 115,
    Equipment_BatchGrowth = 116,
    Craft_Shift_Start = 117,
    Craft_Shift_CompleteProcess = 118,
    Craft_Shift_Reward = 119,
    EventContent_EnterStoryStage = 120,
    EventContent_StoryStageResult = 121,
    WorldRaid_EndBattle = 122,
    WorldRaid_Reward = 123,
    Conquest_EnterBattle = 124,
    Conquest_EnterUnExpectBattle = 125,
    Conquest_BattleResult = 126,
    Conquest_UnExpectBattleResult = 127,
    Conquest_UpgradeBase = 128,
    Conquest_ManageBase = 129,
    Conquest_CalculatedReward = 130,
    Conquest_TakeEventBoxObject = 131,
    Conquest_ConquerNormalTile = 132,
    Item_SelectRecruit = 133,
    Adventure_EnterExtraStage = 134,
    Adventure_ExtraStageBattleResult = 135,
    Scenario_EnterMainStage = 136,
    Scenario_MainStageResult = 137,
    Scenario_RetreatMainStage = 138,
    EventContent_DiceRaceRollReward = 139,
    EventContent_DiceRaceLapReward = 140,
    ShiftingCraft_BeginProcess = 141,
    ShiftingCraft_CompleteProcess = 142,
    ShiftingCraft_Reward = 143,
    MiniGame_ShootingBattleResult = 144,
    MiniGame_ShootingSweep = 145,
    EliminateRaid_Failed = 146,
    EliminateRaid_Reward = 147,
    EliminateRaid_SeasonReward = 148,
    EliminateRaid_CreateBattle = 149,
    EliminateRaid_Sweep = 150,
    Item_AutoSynth = 151,
    ContentSweep_MultiSweep = 152,
    Emblem_Acquire = 153,
    MiniGame_TBGMove = 154,
    MiniGame_TBGEncounterInput = 155,
    MiniGame_TBGResurrect = 156,
    MiniGame_TBGSweep = 157,
    Shop_BeforehandGacha = 158,
    EliminateRaid_LimitedReward = 159,
    Craft_AutoBeginProcess = 160,
    Craft_CompleteProcessAll = 161,
    Craft_RewardAll = 162,
    ShiftingCraft_CompleteProcessAll = 163,
    ShiftingCraft_RewardAll = 164
}

enum ConsumeCondition: int{
    And = 0,
    Or = 1
}

enum DailyRefillType: int{
    None = 0,
    Default = 1,
    Login = 2
}

enum ScenarioBGType: int{
    None = 0,
    Image = 1,
    BlurRT = 2,
    Spine = 3,
    Hide = 4
}

enum ScenarioType: int{
    None = 0,
    Title = 1,
    Place = 2
}

enum ScenarioTypes: int{
    None = 0,
    Title = 1,
    Place = 2
}

enum ScenarioCharacterAction: int{
    Idle = 0,
    Shake = 1,
    Greeting = 2,
    FalldownLeft = 3,
    FalldownRight = 4,
    Stiff = 5,
    Hophop = 6,
    Jump = 7
}

enum ScenarioCharacterBehaviors: int{
    None = 0,
    Appear = 1,
    Disappear = 2,
    AppearToLeft = 3,
    ApperToRight = 4,
    DisappearToLeft = 5,
    DisappearToRight = 6,
    MoveToTarget = 7
}

enum ScenarioCharacterShapes: int{
    None = 0,
    Signal = 1,
    BlackSilhouette = 2,
    Closeup = 4,
    Highlight = 8
}

enum ScenarioBGScroll: int{
    None = 0,
    Vertical = 1,
    Horizontal = 2
}

enum DialogCategory: int{
    Cafe = 0,
    Echelon = 1,
    CharacterSSRNew = 2,
    CharacterGet = 3,
    Birthday = 4,
    Dating = 5,
    Title = 6,
    UILobby = 7,
    UILobbySpecial = 8,
    UIShop = 9,
    UIGacha = 10,
    UIRaidLobby = 11,
    UIWork = 12,
    UITitle = 13,
    UIWeekDungeon = 14,
    UIAcademyLobby = 15,
    UIRaidLobbySeasonOff = 16,
    UIRaidLobbySeasonOn = 17,
    UIWorkAronaSit = 18,
    UIWorkAronaSleep = 19,
    UIWorkAronaWatch = 20,
    UIGuideMission = 21,
    UILobby2 = 22,
    UIClanSearchList = 23,
    UIAttendance = 24,
    UIAttendanceEvent01 = 25,
    UIEventLobby = 26,
    UIEventShop = 27,
    UIEventBoxGachaShop = 28,
    UIAttendanceEvent02 = 29,
    UIAttendanceEvent03 = 30,
    UIEventCardShop = 31,
    UISchoolDungeon = 32,
    UIAttendanceEvent = 33,
    UISpecialOperationLobby = 34,
    WeaponGet = 35,
    UIAttendanceEvent04 = 36,
    UIEventFortuneGachaShop = 37,
    UIAttendanceEvent05 = 38,
    UIAttendanceEvent06 = 39,
    UIMission = 40,
    UIEventMission = 41,
    UIAttendanceEvent08 = 42,
    UIAttendanceEvent07 = 43,
    UIEventMiniGameMission = 44,
    UIAttendanceEvent09 = 45,
    UIAttendanceEvent10 = 46,
    UIAttendanceEvent11 = 47,
    UIWorkPlanaSit = 48,
    UIWorkPlanaUmbrella = 49,
    UIWorkPlanaCabinet = 50,
    UIWorkCoexist_AronaSleepSit = 51,
    UIWorkCoexist_PlanaWatchSky = 52,
    UIWorkCoexist_PlanaSitPeek = 53,
    UIWorkCoexist_AronaSleepPeek = 54,
    UIEventArchive = 55,
    UIAttendanceEvent12 = 56,
    UIAttendanceEvent13 = 57,
    GlobalAttendance01 = 58,
    GlobalAttendance02 = 59,
    GlobalAttendance03 = 60,
    GlobalAttendance04 = 61,
    GlobalAttendance05 = 62,
    UIAttendanceEvent14 = 63
}

enum DialogCondition: int{
    Idle = 0,
    Enter = 1,
    Exit = 2,
    Buy = 3,
    SoldOut = 4,
    BoxGachaNormal = 5,
    BoxGachaPrize = 6,
    Prize0 = 7,
    Prize1 = 8,
    Prize2 = 9,
    Prize3 = 10,
    Interaction = 11,
    Luck0 = 12,
    Luck1 = 13,
    Luck2 = 14,
    Luck3 = 15,
    Luck4 = 16,
    Luck5 = 17,
    StoryOpen = 18,
    CollectionOpen = 19,
    BoxGachaFinish = 20
}

enum DialogConditionDetail: int{
    None = 0,
    Day = 1,
    Close = 2
}

enum DialogType: int{
    Talk = 0,
    Think = 1,
    UITalk = 2
}

enum Anniversary: int{
    None = 0,
    UserBDay = 1,
    StudentBDay = 2
}

enum School: int{
    None = 0,
    Hyakkiyako = 1,
    RedWinter = 2,
    Trinity = 3,
    Gehenna = 4,
    Abydos = 5,
    Millennium = 6,
    Arius = 7,
    Shanhaijing = 8,
    Valkyrie = 9,
    WildHunt = 10,
    SRT = 11,
    SCHALE = 12,
    ETC = 13
}

enum StoryCondition: int{
    Open = 0,
    Locked = 1,
    ComingSoon = 2,
    Hide = 3
}

enum EmojiEvent: int{
    EnterConver = 0,
    EnterShelter = 1,
    SignalLeader = 2,
    Nice = 3,
    Reload = 4,
    Blind = 5,
    Panic = 6,
    Silence = 7,
    NearyDead = 8,
    Run = 9,
    TerrainAdaptionS = 10,
    TerrainAdaptionA = 11,
    TerrainAdaptionB = 12,
    TerrainAdaptionC = 13,
    TerrainAdaptionD = 14,
    TerrainAdaptionSS = 15
}

enum ScenarioModeTypes: int{
    None = 0,
    Main = 1,
    Sub = 2,
    Replay = 3,
    Mini = 4
}

enum ScenarioModeSubTypes: int{
    None = 0,
    Club = 1,
    TSS = 2
}

enum ScenarioModeReplayTypes: int{
    None = 0,
    Event = 1,
    Favor = 2,
    Work = 3,
    EventMeetup = 4
}

enum ScenarioEffectDepth: int{
    None = 0,
    AboveBg = 1,
    AboveCharacter = 2,
    AboveAll = 3
}

enum ScenarioZoomAnchors: int{
    Center = 0,
    LeftTop = 1,
    LeftBottom = 2,
    RightTop = 3,
    RightBottom = 4
}

enum ScenarioZoomType: int{
    Instant = 0,
    Slide = 1
}

enum ScenarioContentType: int{
    Prologue = 0,
    WeekDungeon = 1,
    Raid = 2,
    Arena = 3,
    Favor = 4,
    Shop = 5,
    EventContent = 6,
    Craft = 7,
    Chaser = 8,
    EventContentMeetup = 9,
    TimeAttack = 10,
    Mission = 11,
    EventContentPermanentPrologue = 12,
    EventContentReturnSeason = 13,
    MiniEvent = 14,
    EliminateRaid = 15
}

enum PurchaseCountResetType: int{
    None = 0,
    Day = 1,
    Week = 2,
    Month = 3
}

enum ShopCategoryType: int{
    General = 0,
    SecretStone = 1,
    Raid = 2,
    Gold = 3,
    Ap = 4,
    PickupGacha = 5,
    NormalGacha = 6,
    PointGacha = 7,
    EventGacha = 8,
    ArenaTicket = 9,
    Arena = 10,
    TutoGacha = 11,
    RecruitSellection = 12,
    EventContent_0 = 13,
    EventContent_1 = 14,
    EventContent_2 = 15,
    EventContent_3 = 16,
    EventContent_4 = 17,
    _Obsolete = 18,
    LimitedGacha = 19,
    MasterCoin = 20,
    SecretStoneGrowth = 21,
    TicketGacha = 22,
    DirectPayGacha_DontUseGlobal = 23,
    FesGacha = 24,
    TimeAttack = 25,
    Chaser = 26,
    ChaserTicket = 27,
    SchoolDungeonTicket = 28,
    AcademyTicket = 29,
    Special = 30,
    Care = 31,
    BeforehandGacha = 32,
    EliminateRaid = 33,
    GlobalSpecialGacha = 34
}

enum PurchaseServerTag: int{
    Audit = 0,
    PreAudit = 1,
    Production = 2,
    Hotfix = 3,
    Standby2 = 4,
    Standby1 = 5,
    Major = 6,
    Minor = 7,
    Temp = 8,
    Test = 9,
    TestIn = 10
}

enum PurchaseStatusCode: int{
    None = 0,
    Start = 1,
    PublishSuccess = 2,
    End = 3,
    Error = 4,
    DuplicateOrder = 5,
    Refund = 6
}

enum StoreType: int{
    None = 0,
    GooglePlay = 1,
    AppStore = 2,
    OneStore = 3,
    MicrosoftStore = 4,
    GalaxyStore = 5
}

enum PurchasePeriodType: int{
    None = 0,
    Day = 1,
    Week = 2,
    Month = 3
}

enum PurchaseSourceType: int{
    None = 0,
    Product = 1,
    ProductMonthly = 2
}

enum ProductCategory: int{
    None = 0,
    Gem = 1,
    Monthly = 2,
    Package = 3,
    GachaDirect_DontUseGlobal = 4,
    TimeLimit = 5
}

enum ProductDisplayTag: int{
    None = 0,
    New = 1,
    Hot = 2,
    Sale = 3
}

enum ProductTagType: int{
    Monthly = 0,
    Weekly = 1,
    Biweekly = 2
}

enum BillingTransactionEndType: int{
    None = 0,
    Success = 1,
    Cancel = 2
}

enum GachaRewardType: int{
    None = 0,
    Eligma = 1,
    Eleph = 2
}

enum ShopFreeRecruitType: int{
    None = 0,
    Accumulation = 1,
    Reset = 2
}

enum GachaDisplayTag: int{
    None = 0,
    Limited = 1,
    TwoStar = 2,
    ThreeStar = 3,
    Free = 4,
    New = 5,
    Fes = 6,
    SelectRecruit = 7
}

enum ShopFilterType: int{
    GachaTicket = 0,
    SecretStone = 1,
    SecretStone_1 = 2,
    SkillBook_Ultimate = 3,
    ExSkill = 4,
    SkillBook = 5,
    Craft = 6,
    AP = 7,
    CharacterExpItem = 8,
    Equip = 9,
    Material = 10,
    Creddit = 11,
    Furniture = 12,
    SelectItem = 13,
    Currency = 14,
    Hyakkiyako = 15,
    RedWinter = 16,
    Trinity = 17,
    Gehenna = 18,
    Abydos = 19,
    Millennium = 20,
    Arius = 21,
    Shanhaijing = 22,
    Valkyrie = 23,
    SRT = 24,
    Event = 25,
    ChaserTotalTicket = 26,
    SchoolTotalTicket = 27,
    ShopFilterDUMMY_1 = 28,
    ShopFilterDUMMY_2 = 29,
    ShopFilterDUMMY_3 = 30,
    ShopFilterDUMMY_4 = 31,
    ShopFilterDUMMY_5 = 32,
    ShopFilterDUMMY_6 = 33,
    ShopFilterDUMMY_7 = 34,
    ETC = 35
}

enum SocialMode: int{
    TITLE = 0,
    LOBBY = 1,
    FORMATION = 2,
    STAGE_SELECT = 3,
    BATTLE = 4,
    POPUP = 5,
    BATTLE_RESULT = 6,
    BATTLE_RESULT_VICTORY = 7,
    BATTLE_RESULT_DEFEAT = 8,
    INVALID = 9,
    TACTIC = 10,
    STRATEGY = 11,
    ACCONT = 12,
    CAMPAIGN_STORY = 13,
    CAMPAIGN_STAGE = 14,
    TACTICREADY = 15
}

enum AccountState: int{
    WaitingSignIn = 0,
    Normal = 1,
    Dormant = 2,
    Comeback = 3,
    Newbie = 4
}

enum MessagePopupLayout: int{
    TextOnly = 0,
    ImageBig = 1,
    ImageSmall = 2
}

enum MessagePopupImagePositionType: int{
    ImageFirst = 0,
    TextFirst = 1
}

enum MessagePopupButtonType: int{
    Accept = 0,
    Cancel = 1,
    Command = 2
}

enum ToastType: int{
    None = 0,
    Tactic_Left = 1,
    Tactic_Right = 2,
    Social_Center = 3,
    Social_Mission = 4,
    Social_Right = 5,
    Notice_Center = 6
}

enum StrategyAIType: int{
    None = 0,
    Guard = 1,
    Pursuit = 2
}

enum StageDifficulty: int{
    None = 0,
    Normal = 1,
    Hard = 2,
    VeryHard = 3,
    VeryHard_Ex = 4
}

enum HexaUnitGrade: int{
    Grade1 = 0,
    Grade2 = 1,
    Grade3 = 2,
    Boss = 3
}

enum TacticEnvironment: int{
    None = 0,
    WarFog = 1
}

enum StrategyObjectType: int{
    None = 0,
    Start = 1,
    Heal = 2,
    Skill = 3,
    StatBuff = 4,
    Parcel = 5,
    ParcelOneTimePerAccount = 6,
    Portal = 7,
    PortalOneWayEnterance = 8,
    PortalOneWayExit = 9,
    Observatory = 10,
    Beacon = 11,
    BeaconOneTime = 12,
    EnemySpawn = 13,
    SwitchToggle = 14,
    SwitchMovableWhenToggleOff = 15,
    SwitchMovableWhenToggleOn = 16,
    FixedStart01 = 17,
    FixedStart02 = 18,
    FixedStart03 = 19,
    FixedStart04 = 20
}

enum StrategyEnvironment: int{
    None = 0,
    MapFog = 1
}

enum Tag: int{
    Furniture = 0,
    MovieMania = 1,
    Scientific = 2,
    Military = 3,
    Machine = 4,
    Gamer = 5,
    Cook = 6,
    Farmer = 7,
    Sociable = 8,
    Officer = 9,
    Eerie = 10,
    Intellectual = 11,
    Healthy = 12,
    Gourmet = 13,
    TreasureHunter = 14,
    CraftItem = 15,
    CDItem = 16,
    ExpItem = 17,
    SecretStone = 18,
    BookItem = 19,
    FavorItem = 20,
    MaterialItem = 21,
    Item = 22,
    CraftCommitment = 23,
    ExpendableItem = 24,
    Equipment = 25,
    EnemyLarge = 26,
    Decagram = 27,
    EnemySmall = 28,
    EnemyMedium = 29,
    EnemyXLarge = 30,
    Gehenna = 31,
    Millennium = 32,
    Valkyrie = 33,
    Hyakkiyako = 34,
    RedWinter = 35,
    Shanhaijing = 36,
    Abydos = 37,
    Trinity = 38,
    Hanger = 39,
    StudyRoom = 40,
    ClassRoom = 41,
    Library = 42,
    Lobby = 43,
    ShootingRange = 44,
    Office = 45,
    SchaleResidence = 46,
    SchaleOffice = 47,
    Restaurant = 48,
    Laboratory = 49,
    AVRoom = 50,
    ArcadeCenter = 51,
    Gym = 52,
    Garden = 53,
    Convenience = 54,
    Soldiery = 55,
    Lounge = 56,
    SchoolBuilding = 57,
    Club = 58,
    Campus = 59,
    SchoolYard = 60,
    Plaza = 61,
    StudentCouncilOffice = 62,
    ClosedBuilding = 63,
    Annex = 64,
    Pool = 65,
    AllySmall = 66,
    AllyMedium = 67,
    AllyLarge = 68,
    AllyXLarge = 69,
    Dessert = 70,
    Sports = 71,
    Bedding = 72,
    Curios = 73,
    Electronic = 74,
    Toy = 75,
    Reservation = 76,
    Household = 77,
    Horticulture = 78,
    Fashion = 79,
    Functional = 80,
    Delicious = 81,
    Freakish = 82,
    MomoFriends = 83,
    Music = 84,
    LoveStory = 85,
    Game = 86,
    Girlish = 87,
    Beauty = 88,
    Army = 89,
    Humanities = 90,
    Observational = 91,
    Jellyz = 92,
    Detective = 93,
    Roman = 94,
    CuriousFellow = 95,
    Mystery = 96,
    Doll = 97,
    Movie = 98,
    Art = 99,
    PureLiterature = 100,
    Food = 101,
    Smart = 102,
    BigMeal = 103,
    Simplicity = 104,
    Specialized = 105,
    Books = 106,
    Cosmetics = 107,
    Gift1 = 108,
    Gift2 = 109,
    F_Aru = 110,
    F_Eimi = 111,
    F_Haruna = 112,
    F_Hihumi = 113,
    F_Hina = 114,
    F_Hoshino = 115,
    F_Iori = 116,
    F_Maki = 117,
    F_Neru = 118,
    F_Izumi = 119,
    F_Shiroko = 120,
    F_Shun = 121,
    F_Sumire = 122,
    F_Tsurugi = 123,
    F_Akane = 124,
    F_Chise = 125,
    F_Akari = 126,
    F_Hasumi = 127,
    F_Nonomi = 128,
    F_Kayoko = 129,
    F_Mutsuki = 130,
    F_Zunko = 131,
    F_Serika = 132,
    F_Tsubaki = 133,
    F_Yuuka = 134,
    F_Haruka = 135,
    F_Asuna = 136,
    F_Kotori = 137,
    F_Suzumi = 138,
    F_Pina = 139,
    F_Aris = 140,
    F_Azusa = 141,
    F_Cherino = 142,
    TagName0004 = 143,
    TagName0005 = 144,
    F_Koharu = 145,
    F_Hanako = 146,
    F_Midori = 147,
    F_Momoi = 148,
    F_Hibiki = 149,
    F_Karin = 150,
    F_Saya = 151,
    F_Mashiro = 152,
    F_Airi = 153,
    F_Fuuka = 154,
    F_Hanae = 155,
    F_Hare = 156,
    F_Utaha = 157,
    F_Ayane = 158,
    F_Chinatsu = 159,
    F_Kotama = 160,
    F_Juri = 161,
    F_Serina = 162,
    F_Shimiko = 163,
    F_Yoshimi = 164,
    TagName0009 = 165,
    F_Shizuko = 166,
    F_Izuna = 167,
    F_Nodoka = 168,
    F_Yuzu = 169,
    Shield = 170,
    Helmet = 171,
    RedHelmet = 172,
    Helicopter = 173,
    RangeAttack = 174,
    MeleeAttack = 175,
    Sweeper = 176,
    Blackmarket = 177,
    Yoheki = 178,
    Kaiserpmc = 179,
    Crusader = 180,
    Goliath = 181,
    Drone = 182,
    Piece = 183,
    ChampionHeavyArmor = 184,
    Sukeban = 185,
    Arius = 186,
    EnemyKotori = 187,
    EnemyYuuka = 188,
    KaiserpmcHeavyArmor = 189,
    BlackmarketHeavyArmor = 190,
    YohekiHeavyArmor = 191,
    SweeperBlack = 192,
    SweeperYellow = 193,
    GasMaskLightArmor = 194,
    GehennaFuuki = 195,
    ChampionAutomata = 196,
    YohekiAutomata = 197,
    Automata = 198,
    EnemyIori = 199,
    EnemyAkari = 200,
    NewAutomata = 201,
    NewAutomataBlack = 202,
    NewAutomataYellow = 203,
    Hat = 204,
    Gloves = 205,
    Shoes = 206,
    Bag = 207,
    Badge = 208,
    Hairpin = 209,
    Charm = 210,
    Watch = 211,
    Necklace = 212,
    Cafe = 213,
    GameCenter = 214,
    ChocolateCafe = 215,
    Main = 216,
    Support = 217,
    Explosion = 218,
    Pierce = 219,
    Mystic = 220,
    LightArmor = 221,
    HeavyArmor = 222,
    Unarmed = 223,
    Cover = 224,
    Uncover = 225,
    AR = 226,
    SR = 227,
    DSG = 228,
    SMG = 229,
    MG = 230,
    HG = 231,
    GL = 232,
    SG = 233,
    MT = 234,
    RG = 235,
    Front = 236,
    Middle = 237,
    Back = 238,
    StreetBattle_Over_A = 239,
    OutdoorBattle_Over_A = 240,
    IndoorBattle_Over_A = 241,
    StreetBattle_Under_B = 242,
    OutdoorBattle_Under_B = 243,
    IndoorBattle_Under_B = 244,
    Kaitenranger = 245,
    Transport = 246,
    Itcenter = 247,
    Powerplant = 248,
    SukebanSwim_SMG = 249,
    SukebanSwim_MG = 250,
    SukebanSwim_SR = 251,
    SukebanSwim_Champion = 252,
    Token_S6 = 253,
    Swimsuit = 254,
    WaterPlay = 255,
    F_Hihumi_Swimsuit = 256,
    F_Azusa_Swimsuit = 257,
    F_Tsurugi_Swimsuit = 258,
    F_Mashiro_Swimsuit = 259,
    F_Hina_swimsuit = 260,
    F_Iori_swimsuit = 261,
    F_Izumi_swimsuit = 262,
    F_Shiroko_RidingSuit = 263,
    Church = 264,
    Stronghold = 265,
    Gallery = 266,
    MusicRoom = 267,
    Emotional = 268,
    F_Shun_Kid = 269,
    F_Kirino_default = 270,
    F_Saya_Casual = 271,
    F_Neru_BunnyGirl = 272,
    F_Karin_BunnyGirl = 273,
    F_Asuna_BunnyGirl = 274,
    DecagrammatonSPO = 275,
    Justice = 276,
    F_Natsu = 277,
    F_Miku = 278,
    F_Ako = 279,
    F_Mari = 280,
    F_Chinatsu_Onsen = 281,
    F_Tomoe = 282,
    F_Cherino_Onsen = 283,
    F_Nodoka_Onsen = 284,
    F_Aru_Newyear = 285,
    F_Mutsuki_Newyear = 286,
    F_Serika_Newyear = 287,
    Boss = 288,
    F_Wakamo = 289,
    F_Sena = 290,
    F_Chihiro = 291,
    F_Fubuki = 292,
    F_Mimori = 293,
    SkillBookUltimatePieace = 294,
    MaterialItemN = 295,
    MaterialItemR = 296,
    MaterialItemSR = 297,
    MaterialItemSSR = 298,
    CDItemN = 299,
    CDItemR = 300,
    CDItemSR = 301,
    CDItemSSR = 302,
    BookItemN = 303,
    BookItemR = 304,
    BookItemSR = 305,
    BookItemSSR = 306,
    ShiftingCraftMaterial_Furniture = 307,
    TrophyBronzeGroup001 = 308,
    TrophySilverGroup001 = 309,
    TrophyGoldGroup001 = 310,
    TrophyPlatinumGroup001 = 311,
    ShiftingCraftCategory_CommonMaterial = 312,
    ShiftingCraftCategory_CDItem = 313,
    ShiftingCraftCategory_BookItem = 314,
    ShiftingCraftCategory_Furniture = 315,
    Token_S14 = 316,
    F_Ui = 317,
    F_Hinata = 318,
    F_Marina = 319,
    SRT = 320,
    F_Miyako = 321,
    F_Miyu = 322,
    F_Saki = 323,
    Ninja = 324,
    F_Tsukuyo = 325,
    F_Michiru = 326,
    F_Kaede = 327,
    F_Iroha = 328,
    F_Misaki = 329,
    F_Atsuko = 330,
    F_Hiyori = 331,
    F_Wakamo_Swimsuit = 332,
    F_Nonomi_Swimsuit = 333,
    F_Ayane_Swimsuit = 334,
    CraftMaterial_SecretStone = 335,
    CraftMaterial_FurnitureN = 336,
    CraftMaterial_FurnitureR = 337,
    CraftMaterial_FurnitureSR = 338,
    CraftMaterial_FurnitureSSR = 339,
    ExpEquip = 340,
    WeaponExpEquip = 341,
    TheSeminar = 342,
    Fuuki = 343,
    Kohshinjo68 = 344,
    GameDev = 345,
    Countermeasure = 346,
    CleanNClearing = 347,
    GourmetClub = 348,
    F_Hoshino_Swimsuit = 349,
    F_Izuna_Swimsuit = 350,
    F_Chise_Swimsuit = 351,
    F_Shizuko_Swimsuit = 352,
    F_Saori = 353,
    CraftMaterial_FavorItemSR = 354,
    CraftMaterial_FavorItemSSR = 355,
    ShiftingCraftCategory_FavorItem = 356,
    F_Akari2 = 357,
    F_Aris2 = 358,
    F_Asuna2 = 359,
    F_Asuna_BunnyGirl2 = 360,
    F_Atsuko2 = 361,
    F_Ayane_Swimsuit2 = 362,
    F_Azusa_Swimsuit2 = 363,
    F_Cherino_Onsen2 = 364,
    F_Chinatsu2 = 365,
    F_Hare2 = 366,
    F_Haruna2 = 367,
    F_Hihumi2 = 368,
    F_Hihumi_Swimsuit2 = 369,
    F_Hina2 = 370,
    F_Hina_swimsuit2 = 371,
    F_Hinata2 = 372,
    F_Hoshino2 = 373,
    F_Hoshino_Swimsuit2 = 374,
    F_Juri2 = 375,
    F_Karin2 = 376,
    F_Karin_BunnyGirl2 = 377,
    F_Kirino_default2 = 378,
    F_Kotori2 = 379,
    F_Mashiro2 = 380,
    F_Mashiro_Swimsuit2 = 381,
    F_Midori2 = 382,
    F_Misaki2 = 383,
    F_Miyako2 = 384,
    F_Miyu2 = 385,
    F_Momoi2 = 386,
    F_Neru_BunnyGirl2 = 387,
    F_Pina2 = 388,
    F_Saya_Casual2 = 389,
    F_Sena2 = 390,
    F_Serina2 = 391,
    F_Suzumi2 = 392,
    F_Tomoe2 = 393,
    F_Tsubaki2 = 394,
    F_Tsurugi2 = 395,
    F_Tsurugi_Swimsuit2 = 396,
    F_Ui2 = 397,
    F_Utaha2 = 398,
    F_Wakamo2 = 399,
    F_Wakamo_Swimsuit2 = 400,
    F_Yuuka2 = 401,
    CraftMaterial_Furniture = 402,
    TrophyBronzeGroup002 = 403,
    TrophySilverGroup002 = 404,
    TrophyGoldGroup002 = 405,
    TrophyPlatinumGroup002 = 406,
    F_Kazusa = 407,
    F_Kokona = 408,
    F_Moe = 409,
    F_Kokona2 = 410,
    AtsukoOriginal = 411,
    FromAriusSquad = 412,
    EventChallenge_ExplosionTarget = 413,
    F_Utaha_Cheerleader = 414,
    F_Hibiki_Cheerleader = 415,
    F_Akane_BunnyGirl = 416,
    F_Noa = 417,
    F_Utaha_Cheerleader2 = 418,
    F_Hibiki_Cheerleader2 = 419,
    F_Akane_BunnyGirl2 = 420,
    F_Yuuka_Track = 421,
    F_Mari_Track = 422,
    F_Hasumi_Track = 423,
    F_Himari = 424,
    F_Mari_Track2 = 425,
    F_Hasumi_Track2 = 426,
    F_Himari2 = 427,
    Veritas = 428,
    SPTF = 429,
    Engineer = 430,
    F_Shigure = 431,
    F_Serina_Holiday = 432,
    F_Hanae_Holiday = 433,
    F_Shigure2 = 434,
    F_Serina_Holiday2 = 435,
    F_Hanae_Holiday2 = 436,
    Holiday = 437,
    Perorozilla_MiddleSize = 438,
    Perorozilla_SmallSize = 439,
    F_Haruna_Newyear = 440,
    F_Haruna_Newyear2 = 441,
    F_Mine = 442,
    F_Mine2 = 443,
    F_Junko_Newyear = 444,
    F_Junko_Newyear2 = 445,
    F_Fuuka_Newyear = 446,
    F_Fuuka_Newyear2 = 447,
    F_Megu = 448,
    F_Megu2 = 449,
    F_Sakurako = 450,
    F_Sakurako2 = 451,
    F_Kanna = 452,
    F_Kanna2 = 453,
    F_Mika = 454,
    F_Mika2 = 455,
    UnNamedGuardianMiddle = 456,
    F_Toki = 457,
    F_Toki2 = 458,
    F_Koyuki = 459,
    F_Koyuki2 = 460,
    F_Nagisa = 461,
    F_Nagisa2 = 462,
    F_Kayoko_Newyear = 463,
    F_Kayoko_Newyear2 = 464,
    F_Haruka_Newyear = 465,
    F_Haruka_Newyear2 = 466,
    F_Kaho = 467,
    F_Kaho2 = 468,
    DUArea = 469,
    F_Aris_Maid = 470,
    F_Aris_Maid2 = 471,
    F_Yuzu_Maid = 472,
    F_Yuzu_Maid2 = 473,
    F_Toki_BunnyGirl = 474,
    F_Toki_BunnyGirl2 = 475,
    F_Reisa = 476,
    F_Reisa2 = 477,
    Genryumon = 478,
    BlackTortoisePromenade = 479,
    LaborParty = 480,
    F_Rumi = 481,
    F_Rumi2 = 482,
    F_Mina = 483,
    F_Mina2 = 484,
    F_Minori = 485,
    F_Minori2 = 486,
    ValkyrieCD = 487,
    ValkyrieBook = 488,
    F_Miyako_Swimsuit = 489,
    F_Miyako_Swimsuit2 = 490,
    F_Saki_Swimsuit = 491,
    F_Saki_Swimsuit2 = 492,
    F_Miyu_Swimsuit = 493,
    F_Miyu_Swimsuit2 = 494,
    F_Shiroko_Swimsuit = 495,
    F_Shiroko_Swimsuit2 = 496,
    EN0005_CenterPipe = 497,
    F_Koharu_Swimsuit = 498,
    F_Koharu_Swimsuit2 = 499,
    F_Ui_Swimsuit = 500,
    F_Ui_Swimsuit2 = 501,
    F_Hanako_Swimsuit = 502,
    F_Hanako_Swimsuit2 = 503,
    F_Hinata_Swimsuit = 504,
    F_Hinata_Swimsuit2 = 505,
    F_Mimori_Swimsuit = 506,
    F_Mimori_Swimsuit2 = 507,
    Hostage = 508,
    HoverMissile = 509,
    HoverObject = 510,
    HoverGuidedDevice = 511,
    HoverStealthMissile = 512,
    Gift3 = 513,
    HoverResort = 514,
    Raid_Normal = 515,
    Raid_Hard = 516,
    Raid_VeryHard = 517,
    Raid_HardCore = 518,
    Raid_Extreme = 519,
    Raid_Insane = 520,
    Raid_Torment = 521,
    KnowledgeLiberationFront = 522,
    SummerRemedialClass = 523,
    F_Momiji = 524,
    F_Momiji2 = 525,
    F_Meru = 526,
    F_Meru2 = 527,
    F_Kotori_Cheerleader = 528,
    F_Kotori_Cheerleader2 = 529,
    F_Haruna_Track = 530,
    F_Haruna_Track2 = 531,
    F_Ichika = 532,
    F_Ichika2 = 533,
    F_Kasumi = 534,
    F_Kasumi2 = 535,
    F_Shigure_Onsen = 536,
    F_Shigure_Onsen2 = 537,
    Highlander = 538,
    SentryGun = 539,
    Token_S32 = 540,
    Tier2Piece = 541,
    Tier3Piece = 542,
    Tier4Piece = 543,
    Tier5Piece = 544,
    TagName0543 = 545,
    TagName0544 = 546,
    TagName0545 = 547,
    TagName0546 = 548,
    TagName0547 = 549,
    TagName0548 = 550,
    TagName0549 = 551,
    TagName0550 = 552,
    TagName0551 = 553,
    TagName0552 = 554,
    TagName0553 = 555,
    TagName0554 = 556,
    TagName0555 = 557,
    TagName0556 = 558,
    TagName0557 = 559,
    TagName0558 = 560,
    TagName0559 = 561,
    TagName0560 = 562,
    TagName0561 = 563,
    TagName0562 = 564,
    TagName0563 = 565,
    TagName0564 = 566,
    TagName0565 = 567,
    TagName0566 = 568,
    TagName0567 = 569,
    TagName0568 = 570,
    TagName0569 = 571,
    TagName0570 = 572,
    TagName0571 = 573,
    TagName0572 = 574,
    TagName0573 = 575,
    TagName0574 = 576,
    TagName0575 = 577,
    TagName0576 = 578,
    TagName0577 = 579,
    TagName0578 = 580,
    TagName0579 = 581,
    TagName0580 = 582,
    TagName0581 = 583,
    TagName0582 = 584,
    TagName0583 = 585,
    TagName0584 = 586,
    TagName0585 = 587,
    TagName0586 = 588,
    TagName0587 = 589,
    TagName0588 = 590,
    TagName0589 = 591,
    TagName0590 = 592,
    TagName0591 = 593,
    TagName0592 = 594,
    TagName0593 = 595,
    TagName0594 = 596,
    TagName0595 = 597,
    TagName0596 = 598,
    TagName0597 = 599,
    TagName0598 = 600,
    TagName0599 = 601,
    TagName0600 = 602,
    TagName0601 = 603,
    TagName0602 = 604,
    TagName0603 = 605,
    TagName0604 = 606,
    TagName0605 = 607,
    TagName0606 = 608,
    TagName0607 = 609,
    TagName0608 = 610,
    TagName0609 = 611,
    TagName0610 = 612,
    TagName0611 = 613,
    TagName0612 = 614,
    TagName0613 = 615,
    TagName0614 = 616,
    TagName0615 = 617,
    TagName0616 = 618,
    TagName0617 = 619,
    TagName0618 = 620,
    TagName0619 = 621,
    TagName0620 = 622,
    TagName0621 = 623,
    TagName0622 = 624,
    TagName0623 = 625,
    TagName0624 = 626,
    TagName0625 = 627,
    TagName0626 = 628,
    TagName0627 = 629,
    TagName0628 = 630,
    TagName0629 = 631,
    TagName0630 = 632,
    TagName0631 = 633,
    TagName0632 = 634,
    TagName0633 = 635,
    TagName0634 = 636,
    TagName0635 = 637,
    TagName0636 = 638,
    TagName0637 = 639,
    TagName0638 = 640,
    TagName0639 = 641,
    TagName0640 = 642,
    TagName0641 = 643,
    TagName0642 = 644,
    TagName0643 = 645,
    TagName0644 = 646,
    TagName0645 = 647,
    TagName0646 = 648,
    TagName0647 = 649,
    TagName0648 = 650,
    TagName0649 = 651,
    TagName0650 = 652,
    TagName0651 = 653,
    TagName0652 = 654,
    TagName0653 = 655,
    TagName0654 = 656,
    TagName0655 = 657,
    TagName0656 = 658,
    TagName0657 = 659,
    TagName0658 = 660,
    TagName0659 = 661,
    TagName0660 = 662,
    TagName0661 = 663,
    TagName0662 = 664,
    TagName0663 = 665,
    TagName0664 = 666,
    TagName0665 = 667,
    TagName0666 = 668,
    TagName0667 = 669,
    TagName0668 = 670,
    TagName0669 = 671,
    TagName0670 = 672,
    TagName0671 = 673,
    TagName0672 = 674,
    TagName0673 = 675,
    TagName0674 = 676,
    TagName0675 = 677,
    TagName0676 = 678,
    TagName0677 = 679,
    TagName0678 = 680,
    TagName0679 = 681,
    TagName0680 = 682,
    TagName0681 = 683,
    TagName0682 = 684,
    TagName0683 = 685,
    TagName0684 = 686,
    TagName0685 = 687,
    TagName0686 = 688,
    TagName0687 = 689,
    TagName0688 = 690,
    TagName0689 = 691,
    TagName0690 = 692,
    TagName0691 = 693,
    TagName0692 = 694,
    TagName0693 = 695,
    TagName0694 = 696,
    TagName0695 = 697,
    TagName0696 = 698,
    TagName0697 = 699,
    TagName0698 = 700,
    TagName0699 = 701,
    TagName0700 = 702,
    TagName0701 = 703,
    TagName0702 = 704,
    TagName0703 = 705,
    TagName0704 = 706,
    TagName0705 = 707,
    TagName0706 = 708,
    TagName0707 = 709,
    TagName0708 = 710,
    TagName0709 = 711,
    TagName0710 = 712,
    TagName0711 = 713,
    TagName0712 = 714,
    TagName0713 = 715,
    TagName0714 = 716,
    TagName0715 = 717,
    TagName0716 = 718,
    TagName0717 = 719,
    TagName0718 = 720,
    TagName0719 = 721,
    TagName0720 = 722,
    TagName0721 = 723,
    TagName0722 = 724,
    TagName0723 = 725,
    TagName0724 = 726,
    TagName0725 = 727,
    TagName0726 = 728,
    TagName0727 = 729,
    TagName0728 = 730,
    TagName0729 = 731,
    TagName0730 = 732,
    TagName0731 = 733,
    TagName0732 = 734,
    TagName0733 = 735,
    TagName0734 = 736,
    TagName0735 = 737,
    TagName0736 = 738,
    TagName0737 = 739,
    TagName0738 = 740,
    TagName0739 = 741,
    TagName0740 = 742,
    TagName0741 = 743,
    TagName0742 = 744,
    TagName0743 = 745,
    TagName0744 = 746,
    TagName0745 = 747,
    TagName0746 = 748,
    TagName0747 = 749,
    TagName0748 = 750,
    TagName0749 = 751,
    TagName0750 = 752,
    TagName0751 = 753,
    TagName0752 = 754,
    TagName0753 = 755,
    TagName0754 = 756,
    TagName0755 = 757,
    TagName0756 = 758,
    TagName0757 = 759,
    TagName0758 = 760,
    TagName0759 = 761,
    TagName0760 = 762,
    TagName0761 = 763,
    TagName0762 = 764,
    TagName0763 = 765,
    TagName0764 = 766,
    TagName0765 = 767,
    TagName0766 = 768,
    TagName0767 = 769,
    TagName0768 = 770,
    TagName0769 = 771,
    TagName0770 = 772,
    TagName0771 = 773,
    TagName0772 = 774,
    TagName0773 = 775,
    TagName0774 = 776,
    TagName0775 = 777,
    TagName0776 = 778,
    TagName0777 = 779,
    TagName0778 = 780,
    TagName0779 = 781,
    TagName0780 = 782,
    TagName0781 = 783,
    TagName0782 = 784,
    TagName0783 = 785,
    TagName0784 = 786,
    TagName0785 = 787,
    TagName0786 = 788,
    TagName0787 = 789,
    TagName0788 = 790,
    TagName0789 = 791,
    TagName0790 = 792,
    TagName0791 = 793,
    TagName0792 = 794,
    TagName0793 = 795,
    TagName0794 = 796,
    TagName0795 = 797,
    TagName0796 = 798,
    TagName0797 = 799,
    TagName0798 = 800,
    TagName0799 = 801,
    TagName0800 = 802,
    TagName0801 = 803,
    TagName0802 = 804,
    TagName0803 = 805,
    TagName0804 = 806,
    TagName0805 = 807,
    TagName0806 = 808,
    TagName0807 = 809,
    TagName0808 = 810,
    TagName0809 = 811,
    TagName0810 = 812,
    TagName0811 = 813,
    TagName0812 = 814,
    TagName0813 = 815,
    TagName0814 = 816,
    TagName0815 = 817,
    TagName0816 = 818,
    TagName0817 = 819,
    TagName0818 = 820,
    TagName0819 = 821,
    TagName0820 = 822,
    TagName0821 = 823,
    TagName0822 = 824,
    TagName0823 = 825,
    TagName0824 = 826,
    TagName0825 = 827,
    TagName0826 = 828,
    TagName0827 = 829,
    TagName0828 = 830,
    TagName0829 = 831,
    TagName0830 = 832,
    TagName0831 = 833,
    TagName0832 = 834,
    TagName0833 = 835,
    TagName0834 = 836,
    TagName0835 = 837,
    TagName0836 = 838,
    TagName0837 = 839,
    TagName0838 = 840,
    TagName0839 = 841,
    TagName0840 = 842,
    TagName0841 = 843,
    TagName0842 = 844,
    TagName0843 = 845,
    TagName0844 = 846,
    TagName0845 = 847,
    TagName0846 = 848,
    TagName0847 = 849,
    TagName0848 = 850,
    TagName0849 = 851,
    TagName0850 = 852,
    TagName0851 = 853,
    TagName0852 = 854,
    TagName0853 = 855,
    TagName0854 = 856,
    TagName0855 = 857,
    TagName0856 = 858,
    TagName0857 = 859,
    TagName0858 = 860,
    TagName0859 = 861,
    TagName0860 = 862,
    TagName0861 = 863,
    TagName0862 = 864,
    TagName0863 = 865,
    TagName0864 = 866,
    TagName0865 = 867,
    TagName0866 = 868,
    TagName0867 = 869,
    TagName0868 = 870,
    TagName0869 = 871,
    TagName0870 = 872,
    TagName0871 = 873,
    TagName0872 = 874,
    TagName0873 = 875,
    TagName0874 = 876,
    TagName0875 = 877,
    TagName0876 = 878,
    TagName0877 = 879,
    TagName0878 = 880,
    TagName0879 = 881,
    TagName0880 = 882,
    TagName0881 = 883,
    TagName0882 = 884,
    TagName0883 = 885,
    TagName0884 = 886,
    TagName0885 = 887,
    TagName0886 = 888,
    TagName0887 = 889,
    TagName0888 = 890,
    TagName0889 = 891,
    TagName0890 = 892,
    TagName0891 = 893,
    TagName0892 = 894,
    TagName0893 = 895,
    TagName0894 = 896,
    TagName0895 = 897,
    TagName0896 = 898,
    TagName0897 = 899,
    TagName0898 = 900,
    TagName0899 = 901,
    TagName0900 = 902,
    TagName0901 = 903,
    TagName0902 = 904,
    TagName0903 = 905,
    TagName0904 = 906,
    TagName0905 = 907,
    TagName0906 = 908,
    TagName0907 = 909,
    TagName0908 = 910,
    TagName0909 = 911,
    TagName0910 = 912,
    TagName0911 = 913,
    TagName0912 = 914,
    TagName0913 = 915,
    TagName0914 = 916,
    TagName0915 = 917,
    TagName0916 = 918,
    TagName0917 = 919,
    TagName0918 = 920,
    TagName0919 = 921,
    TagName0920 = 922,
    TagName0921 = 923,
    TagName0922 = 924,
    TagName0923 = 925,
    TagName0924 = 926,
    TagName0925 = 927,
    TagName0926 = 928,
    TagName0927 = 929,
    TagName0928 = 930,
    TagName0929 = 931,
    TagName0930 = 932,
    TagName0931 = 933,
    TagName0932 = 934,
    TagName0933 = 935,
    TagName0934 = 936,
    TagName0935 = 937,
    TagName0936 = 938,
    TagName0937 = 939,
    TagName0938 = 940,
    TagName0939 = 941,
    TagName0940 = 942,
    TagName0941 = 943,
    TagName0942 = 944,
    TagName0943 = 945,
    TagName0944 = 946,
    TagName0945 = 947,
    TagName0946 = 948,
    TagName0947 = 949,
    TagName0948 = 950,
    TagName0949 = 951,
    TagName0950 = 952,
    TagName0951 = 953,
    TagName0952 = 954,
    TagName0953 = 955,
    TagName0954 = 956,
    TagName0955 = 957,
    TagName0956 = 958,
    TagName0957 = 959,
    TagName0958 = 960,
    TagName0959 = 961,
    TagName0960 = 962,
    TagName0961 = 963,
    TagName0962 = 964,
    TagName0963 = 965,
    TagName0964 = 966,
    TagName0965 = 967,
    TagName0966 = 968,
    TagName0967 = 969,
    TagName0968 = 970,
    TagName0969 = 971,
    TagName0970 = 972,
    TagName0971 = 973,
    TagName0972 = 974,
    TagName0973 = 975,
    TagName0974 = 976,
    TagName0975 = 977,
    TagName0976 = 978,
    TagName0977 = 979,
    TagName0978 = 980,
    TagName0979 = 981,
    TagName0980 = 982,
    TagName0981 = 983,
    TagName0982 = 984,
    TagName0983 = 985,
    TagName0984 = 986,
    TagName0985 = 987,
    TagName0986 = 988,
    TagName0987 = 989,
    TagName0988 = 990,
    TagName0989 = 991,
    TagName0990 = 992,
    TagName0991 = 993,
    TagName0992 = 994,
    TagName0993 = 995,
    TagName0994 = 996,
    TagName0995 = 997,
    TagName0996 = 998,
    TagName0997 = 999,
    TagName0998 = 1000,
    TagName0999 = 1001,
    TagName1000 = 1002,
    TagName1001 = 1003,
    TagName1002 = 1004,
    TagName1003 = 1005,
    TagName1004 = 1006,
    TagName1005 = 1007,
    TagName1006 = 1008,
    TagName1007 = 1009,
    TagName1008 = 1010,
    TagName1009 = 1011,
    TagName1010 = 1012,
    TagName1011 = 1013,
    TagName1012 = 1014,
    TagName1013 = 1015,
    TagName1014 = 1016,
    TagName1015 = 1017,
    TagName1016 = 1018,
    TagName1017 = 1019,
    TagName1018 = 1020,
    TagName1019 = 1021,
    TagName1020 = 1022,
    TagName1021 = 1023,
    TagName1022 = 1024,
    TagName1023 = 1025,
    TagName1024 = 1026,
    TagName1025 = 1027,
    TagName1026 = 1028,
    TagName1027 = 1029,
    TagName1028 = 1030,
    TagName1029 = 1031,
    TagName1030 = 1032,
    TagName1031 = 1033,
    TagName1032 = 1034,
    TagName1033 = 1035,
    TagName1034 = 1036,
    TagName1035 = 1037,
    TagName1036 = 1038,
    TagName1037 = 1039,
    TagName1038 = 1040,
    TagName1039 = 1041,
    TagName1040 = 1042,
    TagName1041 = 1043,
    TagName1042 = 1044,
    TagName1043 = 1045,
    TagName1044 = 1046,
    TagName1045 = 1047,
    TagName1046 = 1048,
    TagName1047 = 1049,
    TagName1048 = 1050,
    TagName1049 = 1051,
    TagName1050 = 1052,
    TagName1051 = 1053,
    TagName1052 = 1054,
    TagName1053 = 1055,
    TagName1054 = 1056,
    TagName1055 = 1057,
    TagName1056 = 1058,
    TagName1057 = 1059,
    TagName1058 = 1060,
    TagName1059 = 1061,
    TagName1060 = 1062,
    TagName1061 = 1063,
    TagName1062 = 1064,
    TagName1063 = 1065,
    TagName1064 = 1066,
    TagName1065 = 1067,
    TagName1066 = 1068,
    TagName1067 = 1069,
    TagName1068 = 1070,
    TagName1069 = 1071,
    TagName1070 = 1072,
    TagName1071 = 1073,
    TagName1072 = 1074,
    TagName1073 = 1075,
    TagName1074 = 1076,
    TagName1075 = 1077,
    TagName1076 = 1078,
    TagName1077 = 1079,
    TagName1078 = 1080,
    TagName1079 = 1081,
    TagName1080 = 1082,
    TagName1081 = 1083,
    TagName1082 = 1084,
    TagName1083 = 1085,
    TagName1084 = 1086,
    TagName1085 = 1087,
    TagName1086 = 1088,
    TagName1087 = 1089,
    TagName1088 = 1090,
    TagName1089 = 1091,
    TagName1090 = 1092,
    TagName1091 = 1093,
    TagName1092 = 1094,
    TagName1093 = 1095,
    TagName1094 = 1096,
    TagName1095 = 1097,
    TagName1096 = 1098,
    TagName1097 = 1099,
    TagName1098 = 1100,
    TagName1099 = 1101,
    TagName1100 = 1102,
    TagName1101 = 1103,
    TagName1102 = 1104,
    TagName1103 = 1105,
    TagName1104 = 1106,
    TagName1105 = 1107,
    TagName1106 = 1108,
    TagName1107 = 1109,
    TagName1108 = 1110,
    TagName1109 = 1111,
    TagName1110 = 1112,
    TagName1111 = 1113,
    TagName1112 = 1114,
    TagName1113 = 1115,
    TagName1114 = 1116,
    TagName1115 = 1117,
    TagName1116 = 1118,
    TagName1117 = 1119,
    TagName1118 = 1120,
    TagName1119 = 1121,
    TagName1120 = 1122,
    TagName1121 = 1123,
    TagName1122 = 1124,
    TagName1123 = 1125,
    TagName1124 = 1126,
    TagName1125 = 1127,
    TagName1126 = 1128,
    TagName1127 = 1129,
    TagName1128 = 1130,
    TagName1129 = 1131,
    TagName1130 = 1132,
    TagName1131 = 1133,
    TagName1132 = 1134,
    TagName1133 = 1135,
    TagName1134 = 1136,
    TagName1135 = 1137,
    TagName1136 = 1138,
    TagName1137 = 1139,
    TagName1138 = 1140,
    TagName1139 = 1141,
    TagName1140 = 1142,
    TagName1141 = 1143,
    TagName1142 = 1144,
    TagName1143 = 1145,
    TagName1144 = 1146,
    TagName1145 = 1147,
    TagName1146 = 1148,
    TagName1147 = 1149,
    TagName1148 = 1150,
    TagName1149 = 1151,
    TagName1150 = 1152,
    TagName1151 = 1153,
    TagName1152 = 1154,
    TagName1153 = 1155,
    TagName1154 = 1156,
    TagName1155 = 1157,
    TagName1156 = 1158,
    TagName1157 = 1159,
    TagName1158 = 1160,
    TagName1159 = 1161,
    TagName1160 = 1162,
    TagName1161 = 1163,
    TagName1162 = 1164,
    TagName1163 = 1165,
    TagName1164 = 1166,
    TagName1165 = 1167,
    TagName1166 = 1168,
    TagName1167 = 1169,
    TagName1168 = 1170,
    TagName1169 = 1171,
    TagName1170 = 1172,
    TagName1171 = 1173,
    TagName1172 = 1174,
    TagName1173 = 1175,
    TagName1174 = 1176,
    TagName1175 = 1177,
    TagName1176 = 1178,
    TagName1177 = 1179,
    TagName1178 = 1180,
    TagName1179 = 1181,
    TagName1180 = 1182,
    TagName1181 = 1183,
    TagName1182 = 1184,
    TagName1183 = 1185,
    TagName1184 = 1186,
    TagName1185 = 1187,
    TagName1186 = 1188,
    TagName1187 = 1189,
    TagName1188 = 1190,
    TagName1189 = 1191,
    TagName1190 = 1192,
    TagName1191 = 1193,
    TagName1192 = 1194,
    TagName1193 = 1195,
    TagName1194 = 1196,
    TagName1195 = 1197,
    TagName1196 = 1198,
    TagName1197 = 1199,
    TagName1198 = 1200,
    TagName1199 = 1201,
    TagName1200 = 1202,
    TagName1201 = 1203,
    TagName1202 = 1204,
    TagName1203 = 1205,
    TagName1204 = 1206,
    TagName1205 = 1207,
    TagName1206 = 1208,
    TagName1207 = 1209,
    TagName1208 = 1210,
    TagName1209 = 1211,
    TagName1210 = 1212,
    TagName1211 = 1213,
    TagName1212 = 1214,
    TagName1213 = 1215,
    TagName1214 = 1216,
    TagName1215 = 1217,
    TagName1216 = 1218,
    TagName1217 = 1219,
    TagName1218 = 1220,
    TagName1219 = 1221,
    TagName1220 = 1222,
    TagName1221 = 1223,
    TagName1222 = 1224,
    TagName1223 = 1225,
    TagName1224 = 1226,
    TagName1225 = 1227,
    TagName1226 = 1228,
    TagName1227 = 1229,
    TagName1228 = 1230,
    TagName1229 = 1231,
    TagName1230 = 1232,
    TagName1231 = 1233,
    TagName1232 = 1234,
    TagName1233 = 1235,
    TagName1234 = 1236,
    TagName1235 = 1237,
    TagName1236 = 1238,
    TagName1237 = 1239,
    TagName1238 = 1240,
    TagName1239 = 1241,
    TagName1240 = 1242,
    TagName1241 = 1243,
    TagName1242 = 1244,
    TagName1243 = 1245,
    TagName1244 = 1246,
    TagName1245 = 1247,
    TagName1246 = 1248,
    TagName1247 = 1249,
    TagName1248 = 1250,
    TagName1249 = 1251,
    TagName1250 = 1252,
    TagName1251 = 1253,
    TagName1252 = 1254,
    TagName1253 = 1255,
    TagName1254 = 1256,
    TagName1255 = 1257,
    TagName1256 = 1258,
    TagName1257 = 1259,
    TagName1258 = 1260,
    TagName1259 = 1261,
    TagName1260 = 1262,
    TagName1261 = 1263,
    TagName1262 = 1264,
    TagName1263 = 1265,
    TagName1264 = 1266,
    TagName1265 = 1267,
    TagName1266 = 1268,
    TagName1267 = 1269,
    TagName1268 = 1270,
    TagName1269 = 1271,
    TagName1270 = 1272,
    TagName1271 = 1273,
    TagName1272 = 1274,
    TagName1273 = 1275,
    TagName1274 = 1276,
    TagName1275 = 1277,
    TagName1276 = 1278,
    TagName1277 = 1279,
    TagName1278 = 1280,
    TagName1279 = 1281,
    TagName1280 = 1282,
    TagName1281 = 1283,
    TagName1282 = 1284,
    TagName1283 = 1285,
    TagName1284 = 1286,
    TagName1285 = 1287,
    TagName1286 = 1288,
    TagName1287 = 1289,
    TagName1288 = 1290,
    TagName1289 = 1291,
    TagName1290 = 1292,
    TagName1291 = 1293,
    TagName1292 = 1294,
    TagName1293 = 1295,
    TagName1294 = 1296,
    TagName1295 = 1297,
    TagName1296 = 1298,
    TagName1297 = 1299,
    TagName1298 = 1300,
    TagName1299 = 1301,
    TagName1300 = 1302,
    TagName1301 = 1303,
    TagName1302 = 1304,
    TagName1303 = 1305,
    TagName1304 = 1306,
    TagName1305 = 1307,
    TagName1306 = 1308,
    TagName1307 = 1309,
    TagName1308 = 1310,
    TagName1309 = 1311,
    TagName1310 = 1312,
    TagName1311 = 1313,
    TagName1312 = 1314,
    TagName1313 = 1315,
    TagName1314 = 1316,
    TagName1315 = 1317,
    TagName1316 = 1318,
    TagName1317 = 1319,
    TagName1318 = 1320,
    TagName1319 = 1321,
    TagName1320 = 1322,
    TagName1321 = 1323,
    TagName1322 = 1324,
    TagName1323 = 1325,
    TagName1324 = 1326,
    TagName1325 = 1327,
    TagName1326 = 1328,
    TagName1327 = 1329,
    TagName1328 = 1330,
    TagName1329 = 1331,
    TagName1330 = 1332,
    TagName1331 = 1333,
    TagName1332 = 1334,
    TagName1333 = 1335,
    TagName1334 = 1336,
    TagName1335 = 1337,
    TagName1336 = 1338,
    TagName1337 = 1339,
    TagName1338 = 1340,
    TagName1339 = 1341,
    TagName1340 = 1342,
    TagName1341 = 1343,
    TagName1342 = 1344,
    TagName1343 = 1345,
    TagName1344 = 1346,
    TagName1345 = 1347,
    TagName1346 = 1348,
    TagName1347 = 1349,
    TagName1348 = 1350,
    TagName1349 = 1351,
    TagName1350 = 1352,
    TagName1351 = 1353,
    TagName1352 = 1354,
    TagName1353 = 1355,
    TagName1354 = 1356,
    TagName1355 = 1357,
    TagName1356 = 1358,
    TagName1357 = 1359,
    TagName1358 = 1360,
    TagName1359 = 1361,
    TagName1360 = 1362,
    TagName1361 = 1363,
    TagName1362 = 1364,
    TagName1363 = 1365,
    TagName1364 = 1366,
    TagName1365 = 1367,
    TagName1366 = 1368,
    TagName1367 = 1369,
    TagName1368 = 1370,
    TagName1369 = 1371,
    TagName1370 = 1372,
    TagName1371 = 1373,
    TagName1372 = 1374,
    TagName1373 = 1375,
    TagName1374 = 1376,
    TagName1375 = 1377,
    TagName1376 = 1378,
    TagName1377 = 1379,
    TagName1378 = 1380,
    TagName1379 = 1381,
    TagName1380 = 1382,
    TagName1381 = 1383,
    TagName1382 = 1384,
    TagName1383 = 1385,
    TagName1384 = 1386,
    TagName1385 = 1387,
    TagName1386 = 1388,
    TagName1387 = 1389,
    TagName1388 = 1390,
    TagName1389 = 1391,
    TagName1390 = 1392,
    TagName1391 = 1393,
    TagName1392 = 1394,
    TagName1393 = 1395,
    TagName1394 = 1396,
    TagName1395 = 1397,
    TagName1396 = 1398,
    TagName1397 = 1399,
    TagName1398 = 1400,
    TagName1399 = 1401,
    TagName1400 = 1402,
    TagName1401 = 1403,
    TagName1402 = 1404,
    TagName1403 = 1405,
    TagName1404 = 1406,
    TagName1405 = 1407,
    TagName1406 = 1408,
    TagName1407 = 1409,
    TagName1408 = 1410,
    TagName1409 = 1411,
    TagName1410 = 1412,
    TagName1411 = 1413,
    TagName1412 = 1414,
    TagName1413 = 1415,
    TagName1414 = 1416,
    TagName1415 = 1417,
    TagName1416 = 1418,
    TagName1417 = 1419,
    TagName1418 = 1420,
    TagName1419 = 1421,
    TagName1420 = 1422,
    TagName1421 = 1423,
    TagName1422 = 1424,
    TagName1423 = 1425,
    TagName1424 = 1426,
    TagName1425 = 1427,
    TagName1426 = 1428,
    TagName1427 = 1429,
    TagName1428 = 1430,
    TagName1429 = 1431,
    TagName1430 = 1432,
    TagName1431 = 1433,
    TagName1432 = 1434,
    TagName1433 = 1435,
    TagName1434 = 1436,
    TagName1435 = 1437,
    TagName1436 = 1438,
    TagName1437 = 1439,
    TagName1438 = 1440,
    TagName1439 = 1441,
    TagName1440 = 1442,
    TagName1441 = 1443,
    TagName1442 = 1444,
    TagName1443 = 1445,
    TagName1444 = 1446,
    TagName1445 = 1447,
    TagName1446 = 1448,
    TagName1447 = 1449,
    TagName1448 = 1450,
    TagName1449 = 1451,
    TagName1450 = 1452,
    TagName1451 = 1453,
    TagName1452 = 1454,
    TagName1453 = 1455,
    TagName1454 = 1456,
    TagName1455 = 1457,
    TagName1456 = 1458,
    TagName1457 = 1459,
    TagName1458 = 1460,
    TagName1459 = 1461,
    TagName1460 = 1462,
    TagName1461 = 1463,
    TagName1462 = 1464,
    TagName1463 = 1465,
    TagName1464 = 1466,
    TagName1465 = 1467,
    TagName1466 = 1468,
    TagName1467 = 1469,
    TagName1468 = 1470,
    TagName1469 = 1471,
    TagName1470 = 1472,
    TagName1471 = 1473,
    TagName1472 = 1474,
    TagName1473 = 1475,
    TagName1474 = 1476,
    TagName1475 = 1477,
    TagName1476 = 1478,
    TagName1477 = 1479,
    TagName1478 = 1480,
    TagName1479 = 1481,
    TagName1480 = 1482,
    TagName1481 = 1483,
    TagName1482 = 1484,
    TagName1483 = 1485,
    TagName1484 = 1486,
    TagName1485 = 1487,
    TagName1486 = 1488,
    TagName1487 = 1489,
    TagName1488 = 1490,
    TagName1489 = 1491,
    TagName1490 = 1492,
    TagName1491 = 1493,
    TagName1492 = 1494,
    TagName1493 = 1495,
    TagName1494 = 1496,
    TagName1495 = 1497,
    TagName1496 = 1498,
    TagName1497 = 1499,
    TagName1498 = 1500,
    TagName1499 = 1501,
    TagName1500 = 1502,
    TagName1501 = 1503,
    TagName1502 = 1504,
    TagName1503 = 1505,
    TagName1504 = 1506,
    TagName1505 = 1507,
    TagName1506 = 1508,
    TagName1507 = 1509,
    TagName1508 = 1510,
    TagName1509 = 1511,
    TagName1510 = 1512,
    TagName1511 = 1513,
    TagName1512 = 1514,
    TagName1513 = 1515,
    TagName1514 = 1516,
    TagName1515 = 1517,
    TagName1516 = 1518,
    TagName1517 = 1519,
    TagName1518 = 1520,
    TagName1519 = 1521,
    TagName1520 = 1522,
    TagName1521 = 1523,
    TagName1522 = 1524,
    TagName1523 = 1525,
    TagName1524 = 1526,
    TagName1525 = 1527,
    TagName1526 = 1528,
    TagName1527 = 1529,
    TagName1528 = 1530,
    TagName1529 = 1531,
    TagName1530 = 1532,
    TagName1531 = 1533,
    TagName1532 = 1534,
    TagName1533 = 1535,
    TagName1534 = 1536,
    TagName1535 = 1537,
    TagName1536 = 1538,
    TagName1537 = 1539,
    TagName1538 = 1540,
    TagName1539 = 1541,
    TagName1540 = 1542,
    TagName1541 = 1543,
    TagName1542 = 1544,
    TagName1543 = 1545,
    TagName1544 = 1546,
    TagName1545 = 1547,
    TagName1546 = 1548,
    TagName1547 = 1549,
    TagName1548 = 1550,
    TagName1549 = 1551,
    TagName1550 = 1552,
    TagName1551 = 1553,
    TagName1552 = 1554,
    TagName1553 = 1555,
    TagName1554 = 1556,
    TagName1555 = 1557,
    TagName1556 = 1558,
    TagName1557 = 1559,
    TagName1558 = 1560,
    TagName1559 = 1561,
    TagName1560 = 1562,
    TagName1561 = 1563,
    TagName1562 = 1564,
    TagName1563 = 1565,
    TagName1564 = 1566,
    TagName1565 = 1567,
    TagName1566 = 1568,
    TagName1567 = 1569,
    TagName1568 = 1570,
    TagName1569 = 1571,
    TagName1570 = 1572,
    TagName1571 = 1573,
    TagName1572 = 1574,
    TagName1573 = 1575,
    TagName1574 = 1576,
    TagName1575 = 1577,
    TagName1576 = 1578,
    TagName1577 = 1579,
    TagName1578 = 1580,
    TagName1579 = 1581,
    TagName1580 = 1582,
    TagName1581 = 1583,
    TagName1582 = 1584,
    TagName1583 = 1585,
    TagName1584 = 1586,
    TagName1585 = 1587,
    TagName1586 = 1588,
    TagName1587 = 1589,
    TagName1588 = 1590,
    TagName1589 = 1591,
    TagName1590 = 1592,
    TagName1591 = 1593,
    TagName1592 = 1594,
    TagName1593 = 1595,
    TagName1594 = 1596,
    TagName1595 = 1597,
    TagName1596 = 1598,
    TagName1597 = 1599,
    TagName1598 = 1600,
    TagName1599 = 1601,
    TagName1600 = 1602,
    TagName1601 = 1603,
    TagName1602 = 1604,
    TagName1603 = 1605,
    TagName1604 = 1606,
    TagName1605 = 1607,
    TagName1606 = 1608,
    TagName1607 = 1609,
    TagName1608 = 1610,
    TagName1609 = 1611,
    TagName1610 = 1612,
    TagName1611 = 1613,
    TagName1612 = 1614,
    TagName1613 = 1615,
    TagName1614 = 1616,
    TagName1615 = 1617,
    TagName1616 = 1618,
    TagName1617 = 1619,
    TagName1618 = 1620,
    TagName1619 = 1621,
    TagName1620 = 1622,
    TagName1621 = 1623,
    TagName1622 = 1624,
    TagName1623 = 1625,
    TagName1624 = 1626,
    TagName1625 = 1627,
    TagName1626 = 1628,
    TagName1627 = 1629,
    TagName1628 = 1630,
    TagName1629 = 1631,
    TagName1630 = 1632,
    TagName1631 = 1633,
    TagName1632 = 1634,
    TagName1633 = 1635,
    TagName1634 = 1636,
    TagName1635 = 1637,
    TagName1636 = 1638,
    TagName1637 = 1639,
    TagName1638 = 1640,
    TagName1639 = 1641,
    TagName1640 = 1642,
    TagName1641 = 1643,
    TagName1642 = 1644,
    TagName1643 = 1645,
    TagName1644 = 1646,
    TagName1645 = 1647,
    TagName1646 = 1648,
    TagName1647 = 1649,
    TagName1648 = 1650,
    TagName1649 = 1651,
    TagName1650 = 1652,
    TagName1651 = 1653,
    TagName1652 = 1654,
    TagName1653 = 1655,
    TagName1654 = 1656,
    TagName1655 = 1657,
    TagName1656 = 1658,
    TagName1657 = 1659,
    TagName1658 = 1660,
    TagName1659 = 1661,
    TagName1660 = 1662,
    TagName1661 = 1663,
    TagName1662 = 1664,
    TagName1663 = 1665,
    TagName1664 = 1666,
    TagName1665 = 1667,
    TagName1666 = 1668,
    TagName1667 = 1669,
    TagName1668 = 1670,
    TagName1669 = 1671,
    TagName1670 = 1672,
    TagName1671 = 1673,
    TagName1672 = 1674,
    TagName1673 = 1675,
    TagName1674 = 1676,
    TagName1675 = 1677,
    TagName1676 = 1678,
    TagName1677 = 1679,
    TagName1678 = 1680,
    TagName1679 = 1681,
    TagName1680 = 1682,
    TagName1681 = 1683,
    TagName1682 = 1684,
    TagName1683 = 1685,
    TagName1684 = 1686,
    TagName1685 = 1687,
    TagName1686 = 1688,
    TagName1687 = 1689,
    TagName1688 = 1690,
    TagName1689 = 1691,
    TagName1690 = 1692,
    TagName1691 = 1693,
    TagName1692 = 1694,
    TagName1693 = 1695,
    TagName1694 = 1696,
    TagName1695 = 1697,
    TagName1696 = 1698,
    TagName1697 = 1699,
    TagName1698 = 1700,
    TagName1699 = 1701,
    TagName1700 = 1702,
    TagName1701 = 1703,
    TagName1702 = 1704,
    TagName1703 = 1705,
    TagName1704 = 1706,
    TagName1705 = 1707,
    TagName1706 = 1708,
    TagName1707 = 1709,
    TagName1708 = 1710,
    TagName1709 = 1711,
    TagName1710 = 1712,
    TagName1711 = 1713,
    TagName1712 = 1714,
    TagName1713 = 1715,
    TagName1714 = 1716,
    TagName1715 = 1717,
    TagName1716 = 1718,
    TagName1717 = 1719,
    TagName1718 = 1720,
    TagName1719 = 1721,
    TagName1720 = 1722,
    TagName1721 = 1723,
    TagName1722 = 1724,
    TagName1723 = 1725,
    TagName1724 = 1726,
    TagName1725 = 1727,
    TagName1726 = 1728,
    TagName1727 = 1729,
    TagName1728 = 1730,
    TagName1729 = 1731,
    TagName1730 = 1732,
    TagName1731 = 1733,
    TagName1732 = 1734,
    TagName1733 = 1735,
    TagName1734 = 1736,
    TagName1735 = 1737,
    TagName1736 = 1738,
    TagName1737 = 1739,
    TagName1738 = 1740,
    TagName1739 = 1741,
    TagName1740 = 1742,
    TagName1741 = 1743,
    TagName1742 = 1744,
    TagName1743 = 1745,
    TagName1744 = 1746,
    TagName1745 = 1747,
    TagName1746 = 1748,
    TagName1747 = 1749,
    TagName1748 = 1750,
    TagName1749 = 1751,
    TagName1750 = 1752,
    TagName1751 = 1753,
    TagName1752 = 1754,
    TagName1753 = 1755,
    TagName1754 = 1756,
    TagName1755 = 1757,
    TagName1756 = 1758,
    TagName1757 = 1759,
    TagName1758 = 1760,
    TagName1759 = 1761,
    TagName1760 = 1762,
    TagName1761 = 1763,
    TagName1762 = 1764,
    TagName1763 = 1765,
    TagName1764 = 1766,
    TagName1765 = 1767,
    TagName1766 = 1768,
    TagName1767 = 1769,
    TagName1768 = 1770,
    TagName1769 = 1771,
    TagName1770 = 1772,
    TagName1771 = 1773,
    TagName1772 = 1774,
    TagName1773 = 1775,
    TagName1774 = 1776,
    TagName1775 = 1777,
    TagName1776 = 1778,
    TagName1777 = 1779,
    TagName1778 = 1780,
    TagName1779 = 1781,
    TagName1780 = 1782,
    TagName1781 = 1783,
    TagName1782 = 1784,
    TagName1783 = 1785,
    TagName1784 = 1786,
    TagName1785 = 1787,
    TagName1786 = 1788,
    TagName1787 = 1789,
    TagName1788 = 1790,
    TagName1789 = 1791,
    TagName1790 = 1792,
    TagName1791 = 1793,
    TagName1792 = 1794,
    TagName1793 = 1795,
    TagName1794 = 1796,
    TagName1795 = 1797,
    TagName1796 = 1798,
    TagName1797 = 1799,
    TagName1798 = 1800,
    TagName1799 = 1801,
    TagName1800 = 1802,
    TagName1801 = 1803,
    TagName1802 = 1804,
    TagName1803 = 1805,
    TagName1804 = 1806,
    TagName1805 = 1807,
    TagName1806 = 1808,
    TagName1807 = 1809,
    TagName1808 = 1810,
    TagName1809 = 1811,
    TagName1810 = 1812,
    TagName1811 = 1813,
    TagName1812 = 1814,
    TagName1813 = 1815,
    TagName1814 = 1816,
    TagName1815 = 1817,
    TagName1816 = 1818,
    TagName1817 = 1819,
    TagName1818 = 1820,
    TagName1819 = 1821,
    TagName1820 = 1822,
    TagName1821 = 1823,
    TagName1822 = 1824,
    TagName1823 = 1825,
    TagName1824 = 1826,
    TagName1825 = 1827,
    TagName1826 = 1828,
    TagName1827 = 1829,
    TagName1828 = 1830,
    TagName1829 = 1831,
    TagName1830 = 1832,
    TagName1831 = 1833,
    TagName1832 = 1834,
    TagName1833 = 1835,
    TagName1834 = 1836,
    TagName1835 = 1837,
    TagName1836 = 1838,
    TagName1837 = 1839,
    TagName1838 = 1840,
    TagName1839 = 1841,
    TagName1840 = 1842,
    TagName1841 = 1843,
    TagName1842 = 1844,
    TagName1843 = 1845,
    TagName1844 = 1846,
    TagName1845 = 1847,
    TagName1846 = 1848,
    TagName1847 = 1849,
    TagName1848 = 1850,
    TagName1849 = 1851,
    TagName1850 = 1852,
    TagName1851 = 1853,
    TagName1852 = 1854,
    TagName1853 = 1855,
    TagName1854 = 1856,
    TagName1855 = 1857,
    TagName1856 = 1858,
    TagName1857 = 1859,
    TagName1858 = 1860,
    TagName1859 = 1861,
    TagName1860 = 1862,
    TagName1861 = 1863,
    TagName1862 = 1864,
    TagName1863 = 1865,
    TagName1864 = 1866,
    TagName1865 = 1867,
    TagName1866 = 1868,
    TagName1867 = 1869,
    TagName1868 = 1870,
    TagName1869 = 1871,
    TagName1870 = 1872,
    TagName1871 = 1873,
    TagName1872 = 1874,
    TagName1873 = 1875,
    TagName1874 = 1876,
    TagName1875 = 1877,
    TagName1876 = 1878,
    TagName1877 = 1879,
    TagName1878 = 1880,
    TagName1879 = 1881,
    TagName1880 = 1882,
    TagName1881 = 1883,
    TagName1882 = 1884,
    TagName1883 = 1885,
    TagName1884 = 1886,
    TagName1885 = 1887,
    TagName1886 = 1888,
    TagName1887 = 1889,
    TagName1888 = 1890,
    TagName1889 = 1891,
    TagName1890 = 1892,
    TagName1891 = 1893,
    TagName1892 = 1894,
    TagName1893 = 1895,
    TagName1894 = 1896,
    TagName1895 = 1897,
    TagName1896 = 1898,
    TagName1897 = 1899,
    TagName1898 = 1900,
    TagName1899 = 1901,
    TagName1900 = 1902,
    TagName1901 = 1903,
    TagName1902 = 1904,
    TagName1903 = 1905,
    TagName1904 = 1906,
    TagName1905 = 1907,
    TagName1906 = 1908,
    TagName1907 = 1909,
    TagName1908 = 1910,
    TagName1909 = 1911,
    TagName1910 = 1912,
    TagName1911 = 1913,
    TagName1912 = 1914,
    TagName1913 = 1915,
    TagName1914 = 1916,
    TagName1915 = 1917,
    TagName1916 = 1918,
    TagName1917 = 1919,
    TagName1918 = 1920,
    TagName1919 = 1921,
    TagName1920 = 1922,
    TagName1921 = 1923,
    TagName1922 = 1924,
    TagName1923 = 1925,
    TagName1924 = 1926,
    TagName1925 = 1927,
    TagName1926 = 1928,
    TagName1927 = 1929,
    TagName1928 = 1930,
    TagName1929 = 1931,
    TagName1930 = 1932,
    TagName1931 = 1933,
    TagName1932 = 1934,
    TagName1933 = 1935,
    TagName1934 = 1936,
    TagName1935 = 1937,
    TagName1936 = 1938,
    TagName1937 = 1939,
    TagName1938 = 1940,
    TagName1939 = 1941,
    TagName1940 = 1942,
    TagName1941 = 1943,
    TagName1942 = 1944,
    TagName1943 = 1945,
    TagName1944 = 1946,
    TagName1945 = 1947,
    TagName1946 = 1948,
    TagName1947 = 1949,
    TagName1948 = 1950,
    TagName1949 = 1951,
    TagName1950 = 1952,
    TagName1951 = 1953,
    TagName1952 = 1954,
    TagName1953 = 1955,
    TagName1954 = 1956,
    TagName1955 = 1957,
    TagName1956 = 1958,
    TagName1957 = 1959,
    TagName1958 = 1960,
    TagName1959 = 1961,
    TagName1960 = 1962,
    TagName1961 = 1963,
    TagName1962 = 1964,
    TagName1963 = 1965,
    TagName1964 = 1966,
    TagName1965 = 1967,
    TagName1966 = 1968,
    TagName1967 = 1969,
    TagName1968 = 1970,
    TagName1969 = 1971,
    TagName1970 = 1972,
    TagName1971 = 1973,
    TagName1972 = 1974,
    TagName1973 = 1975,
    TagName1974 = 1976,
    TagName1975 = 1977,
    TagName1976 = 1978,
    TagName1977 = 1979,
    TagName1978 = 1980,
    TagName1979 = 1981,
    TagName1980 = 1982,
    TagName1981 = 1983,
    TagName1982 = 1984,
    TagName1983 = 1985,
    TagName1984 = 1986,
    TagName1985 = 1987,
    TagName1986 = 1988,
    TagName1987 = 1989,
    TagName1988 = 1990,
    TagName1989 = 1991,
    TagName1990 = 1992,
    TagName1991 = 1993,
    TagName1992 = 1994,
    TagName1993 = 1995,
    TagName1994 = 1996,
    TagName1995 = 1997,
    TagName1996 = 1998,
    TagName1997 = 1999,
    TagName1998 = 2000,
    TagName1999 = 2001,
    TagName2000 = 2002,
    TagName2001 = 2003,
    TagName2002 = 2004,
    TagName2003 = 2005,
    TagName2004 = 2006,
    TagName2005 = 2007,
    TagName2006 = 2008,
    TagName2007 = 2009,
    TagName2008 = 2010,
    TagName2009 = 2011,
    TagName2010 = 2012,
    TagName2011 = 2013,
    TagName2012 = 2014,
    TagName2013 = 2015,
    TagName2014 = 2016,
    TagName2015 = 2017,
    TagName2016 = 2018,
    TagName2017 = 2019,
    TagName2018 = 2020,
    TagName2019 = 2021,
    TagName2020 = 2022,
    TagName2021 = 2023,
    TagName2022 = 2024,
    TagName2023 = 2025,
    TagName2024 = 2026,
    TagName2025 = 2027,
    TagName2026 = 2028,
    TagName2027 = 2029,
    TagName2028 = 2030,
    TagName2029 = 2031,
    TagName2030 = 2032,
    TagName2031 = 2033,
    TagName2032 = 2034,
    TagName2033 = 2035,
    TagName2034 = 2036,
    TagName2035 = 2037,
    TagName2036 = 2038,
    TagName2037 = 2039,
    TagName2038 = 2040,
    TagName2039 = 2041,
    TagName2040 = 2042,
    TagName2041 = 2043,
    TagName2042 = 2044,
    TagName2043 = 2045,
    TagName2044 = 2046,
    TagName2045 = 2047,
    TagName2046 = 2048,
    TagName2047 = 2049,
    TagName2048 = 2050,
    TagName2049 = 2051,
    TagName2050 = 2052,
    TagName2051 = 2053,
    TagName2052 = 2054,
    TagName2053 = 2055,
    TagName2054 = 2056,
    TagName2055 = 2057,
    TagName2056 = 2058,
    TagName2057 = 2059,
    TagName2058 = 2060,
    TagName2059 = 2061,
    TagName2060 = 2062,
    TagName2061 = 2063,
    TagName2062 = 2064,
    TagName2063 = 2065,
    TagName2064 = 2066,
    TagName2065 = 2067,
    TagName2066 = 2068,
    TagName2067 = 2069,
    TagName2068 = 2070,
    TagName2069 = 2071,
    TagName2070 = 2072,
    TagName2071 = 2073,
    TagName2072 = 2074,
    TagName2073 = 2075,
    TagName2074 = 2076,
    TagName2075 = 2077,
    TagName2076 = 2078,
    TagName2077 = 2079,
    TagName2078 = 2080,
    TagName2079 = 2081,
    TagName2080 = 2082,
    TagName2081 = 2083,
    TagName2082 = 2084,
    TagName2083 = 2085,
    TagName2084 = 2086,
    TagName2085 = 2087,
    TagName2086 = 2088,
    TagName2087 = 2089,
    TagName2088 = 2090,
    TagName2089 = 2091,
    TagName2090 = 2092,
    TagName2091 = 2093,
    TagName2092 = 2094,
    TagName2093 = 2095,
    TagName2094 = 2096,
    TagName2095 = 2097,
    TagName2096 = 2098,
    TagName2097 = 2099,
    TagName2098 = 2100,
    TagName2099 = 2101,
    TagName2100 = 2102,
    TagName2101 = 2103,
    TagName2102 = 2104,
    TagName2103 = 2105,
    TagName2104 = 2106,
    TagName2105 = 2107,
    TagName2106 = 2108,
    TagName2107 = 2109,
    TagName2108 = 2110,
    TagName2109 = 2111,
    TagName2110 = 2112,
    TagName2111 = 2113,
    TagName2112 = 2114,
    TagName2113 = 2115,
    TagName2114 = 2116,
    TagName2115 = 2117,
    TagName2116 = 2118,
    TagName2117 = 2119,
    TagName2118 = 2120,
    TagName2119 = 2121,
    TagName2120 = 2122,
    TagName2121 = 2123,
    TagName2122 = 2124,
    TagName2123 = 2125,
    TagName2124 = 2126,
    TagName2125 = 2127,
    TagName2126 = 2128,
    TagName2127 = 2129,
    TagName2128 = 2130,
    TagName2129 = 2131,
    TagName2130 = 2132,
    TagName2131 = 2133,
    TagName2132 = 2134,
    TagName2133 = 2135,
    TagName2134 = 2136,
    TagName2135 = 2137,
    TagName2136 = 2138,
    TagName2137 = 2139,
    TagName2138 = 2140,
    TagName2139 = 2141,
    TagName2140 = 2142,
    TagName2141 = 2143,
    TagName2142 = 2144,
    TagName2143 = 2145,
    TagName2144 = 2146,
    TagName2145 = 2147,
    TagName2146 = 2148,
    TagName2147 = 2149,
    TagName2148 = 2150,
    TagName2149 = 2151,
    TagName2150 = 2152,
    TagName2151 = 2153,
    TagName2152 = 2154,
    TagName2153 = 2155,
    TagName2154 = 2156,
    TagName2155 = 2157,
    TagName2156 = 2158,
    TagName2157 = 2159,
    TagName2158 = 2160,
    TagName2159 = 2161,
    TagName2160 = 2162,
    TagName2161 = 2163,
    TagName2162 = 2164,
    TagName2163 = 2165,
    TagName2164 = 2166,
    TagName2165 = 2167,
    TagName2166 = 2168,
    TagName2167 = 2169,
    TagName2168 = 2170,
    TagName2169 = 2171,
    TagName2170 = 2172,
    TagName2171 = 2173,
    TagName2172 = 2174,
    TagName2173 = 2175,
    TagName2174 = 2176,
    TagName2175 = 2177,
    TagName2176 = 2178,
    TagName2177 = 2179,
    TagName2178 = 2180,
    TagName2179 = 2181,
    TagName2180 = 2182,
    TagName2181 = 2183,
    TagName2182 = 2184,
    TagName2183 = 2185,
    TagName2184 = 2186,
    TagName2185 = 2187,
    TagName2186 = 2188,
    TagName2187 = 2189,
    TagName2188 = 2190,
    TagName2189 = 2191,
    TagName2190 = 2192,
    TagName2191 = 2193,
    TagName2192 = 2194,
    TagName2193 = 2195,
    TagName2194 = 2196,
    TagName2195 = 2197,
    TagName2196 = 2198,
    TagName2197 = 2199,
    TagName2198 = 2200,
    TagName2199 = 2201,
    TagName2200 = 2202,
    TagName2201 = 2203,
    TagName2202 = 2204,
    TagName2203 = 2205,
    TagName2204 = 2206,
    TagName2205 = 2207,
    TagName2206 = 2208,
    TagName2207 = 2209,
    TagName2208 = 2210,
    TagName2209 = 2211,
    TagName2210 = 2212,
    TagName2211 = 2213,
    TagName2212 = 2214,
    TagName2213 = 2215,
    TagName2214 = 2216,
    TagName2215 = 2217,
    TagName2216 = 2218,
    TagName2217 = 2219,
    TagName2218 = 2220,
    TagName2219 = 2221,
    TagName2220 = 2222,
    TagName2221 = 2223,
    TagName2222 = 2224,
    TagName2223 = 2225,
    TagName2224 = 2226,
    TagName2225 = 2227,
    TagName2226 = 2228,
    TagName2227 = 2229,
    TagName2228 = 2230,
    TagName2229 = 2231,
    TagName2230 = 2232,
    TagName2231 = 2233,
    TagName2232 = 2234,
    TagName2233 = 2235,
    TagName2234 = 2236,
    TagName2235 = 2237,
    TagName2236 = 2238,
    TagName2237 = 2239,
    TagName2238 = 2240,
    TagName2239 = 2241,
    TagName2240 = 2242,
    TagName2241 = 2243,
    TagName2242 = 2244,
    TagName2243 = 2245,
    TagName2244 = 2246,
    TagName2245 = 2247,
    TagName2246 = 2248,
    TagName2247 = 2249,
    TagName2248 = 2250,
    TagName2249 = 2251,
    TagName2250 = 2252,
    TagName2251 = 2253,
    TagName2252 = 2254,
    TagName2253 = 2255,
    TagName2254 = 2256,
    TagName2255 = 2257,
    TagName2256 = 2258,
    TagName2257 = 2259,
    TagName2258 = 2260,
    TagName2259 = 2261,
    TagName2260 = 2262,
    TagName2261 = 2263,
    TagName2262 = 2264,
    TagName2263 = 2265,
    TagName2264 = 2266,
    TagName2265 = 2267,
    TagName2266 = 2268,
    TagName2267 = 2269,
    TagName2268 = 2270,
    TagName2269 = 2271,
    TagName2270 = 2272,
    TagName2271 = 2273,
    TagName2272 = 2274,
    TagName2273 = 2275,
    TagName2274 = 2276,
    TagName2275 = 2277,
    TagName2276 = 2278,
    TagName2277 = 2279,
    TagName2278 = 2280,
    TagName2279 = 2281,
    TagName2280 = 2282,
    TagName2281 = 2283,
    TagName2282 = 2284,
    TagName2283 = 2285,
    TagName2284 = 2286,
    TagName2285 = 2287,
    TagName2286 = 2288,
    TagName2287 = 2289,
    TagName2288 = 2290,
    TagName2289 = 2291,
    TagName2290 = 2292,
    TagName2291 = 2293,
    TagName2292 = 2294,
    TagName2293 = 2295,
    TagName2294 = 2296,
    TagName2295 = 2297,
    TagName2296 = 2298,
    TagName2297 = 2299,
    TagName2298 = 2300,
    TagName2299 = 2301,
    TagName2300 = 2302,
    TagName2301 = 2303,
    TagName2302 = 2304,
    TagName2303 = 2305,
    TagName2304 = 2306,
    TagName2305 = 2307,
    TagName2306 = 2308,
    TagName2307 = 2309,
    TagName2308 = 2310,
    TagName2309 = 2311,
    TagName2310 = 2312,
    TagName2311 = 2313,
    TagName2312 = 2314,
    TagName2313 = 2315,
    TagName2314 = 2316,
    TagName2315 = 2317,
    TagName2316 = 2318,
    TagName2317 = 2319,
    TagName2318 = 2320,
    TagName2319 = 2321,
    TagName2320 = 2322,
    TagName2321 = 2323,
    TagName2322 = 2324,
    TagName2323 = 2325,
    TagName2324 = 2326,
    TagName2325 = 2327,
    TagName2326 = 2328,
    TagName2327 = 2329,
    TagName2328 = 2330,
    TagName2329 = 2331,
    TagName2330 = 2332,
    TagName2331 = 2333,
    TagName2332 = 2334,
    TagName2333 = 2335,
    TagName2334 = 2336,
    TagName2335 = 2337,
    TagName2336 = 2338,
    TagName2337 = 2339,
    TagName2338 = 2340,
    TagName2339 = 2341,
    TagName2340 = 2342,
    TagName2341 = 2343,
    TagName2342 = 2344,
    TagName2343 = 2345,
    TagName2344 = 2346,
    TagName2345 = 2347,
    TagName2346 = 2348,
    TagName2347 = 2349,
    TagName2348 = 2350,
    TagName2349 = 2351,
    TagName2350 = 2352,
    TagName2351 = 2353,
    TagName2352 = 2354,
    TagName2353 = 2355,
    TagName2354 = 2356,
    TagName2355 = 2357,
    TagName2356 = 2358,
    TagName2357 = 2359,
    TagName2358 = 2360,
    TagName2359 = 2361,
    TagName2360 = 2362,
    TagName2361 = 2363,
    TagName2362 = 2364,
    TagName2363 = 2365,
    TagName2364 = 2366,
    TagName2365 = 2367,
    TagName2366 = 2368,
    TagName2367 = 2369,
    TagName2368 = 2370,
    TagName2369 = 2371,
    TagName2370 = 2372,
    TagName2371 = 2373,
    TagName2372 = 2374,
    TagName2373 = 2375,
    TagName2374 = 2376,
    TagName2375 = 2377,
    TagName2376 = 2378,
    TagName2377 = 2379,
    TagName2378 = 2380,
    TagName2379 = 2381,
    TagName2380 = 2382,
    TagName2381 = 2383,
    TagName2382 = 2384,
    TagName2383 = 2385,
    TagName2384 = 2386,
    TagName2385 = 2387,
    TagName2386 = 2388,
    TagName2387 = 2389,
    TagName2388 = 2390,
    TagName2389 = 2391,
    TagName2390 = 2392,
    TagName2391 = 2393,
    TagName2392 = 2394,
    TagName2393 = 2395,
    TagName2394 = 2396,
    TagName2395 = 2397,
    TagName2396 = 2398,
    TagName2397 = 2399,
    TagName2398 = 2400,
    TagName2399 = 2401,
    TagName2400 = 2402,
    TagName2401 = 2403,
    TagName2402 = 2404,
    TagName2403 = 2405,
    TagName2404 = 2406,
    TagName2405 = 2407,
    TagName2406 = 2408,
    TagName2407 = 2409,
    TagName2408 = 2410,
    TagName2409 = 2411,
    TagName2410 = 2412,
    TagName2411 = 2413,
    TagName2412 = 2414,
    TagName2413 = 2415,
    TagName2414 = 2416,
    TagName2415 = 2417,
    TagName2416 = 2418,
    TagName2417 = 2419,
    TagName2418 = 2420,
    TagName2419 = 2421,
    TagName2420 = 2422,
    TagName2421 = 2423,
    TagName2422 = 2424,
    TagName2423 = 2425,
    TagName2424 = 2426,
    TagName2425 = 2427,
    TagName2426 = 2428,
    TagName2427 = 2429,
    TagName2428 = 2430,
    TagName2429 = 2431,
    TagName2430 = 2432,
    TagName2431 = 2433,
    TagName2432 = 2434,
    TagName2433 = 2435,
    TagName2434 = 2436,
    TagName2435 = 2437,
    TagName2436 = 2438,
    TagName2437 = 2439,
    TagName2438 = 2440,
    TagName2439 = 2441,
    TagName2440 = 2442,
    TagName2441 = 2443,
    TagName2442 = 2444,
    TagName2443 = 2445,
    TagName2444 = 2446,
    TagName2445 = 2447,
    TagName2446 = 2448,
    TagName2447 = 2449,
    TagName2448 = 2450,
    TagName2449 = 2451,
    TagName2450 = 2452,
    TagName2451 = 2453,
    TagName2452 = 2454,
    TagName2453 = 2455,
    TagName2454 = 2456,
    TagName2455 = 2457,
    TagName2456 = 2458,
    TagName2457 = 2459,
    TagName2458 = 2460,
    TagName2459 = 2461,
    TagName2460 = 2462,
    TagName2461 = 2463,
    TagName2462 = 2464,
    TagName2463 = 2465,
    TagName2464 = 2466,
    TagName2465 = 2467,
    TagName2466 = 2468,
    TagName2467 = 2469,
    TagName2468 = 2470,
    TagName2469 = 2471,
    TagName2470 = 2472,
    TagName2471 = 2473,
    TagName2472 = 2474,
    TagName2473 = 2475,
    TagName2474 = 2476,
    TagName2475 = 2477,
    TagName2476 = 2478,
    TagName2477 = 2479,
    TagName2478 = 2480,
    TagName2479 = 2481,
    TagName2480 = 2482,
    TagName2481 = 2483,
    TagName2482 = 2484,
    TagName2483 = 2485,
    TagName2484 = 2486,
    TagName2485 = 2487,
    TagName2486 = 2488,
    TagName2487 = 2489,
    TagName2488 = 2490,
    TagName2489 = 2491,
    TagName2490 = 2492,
    TagName2491 = 2493,
    TagName2492 = 2494,
    TagName2493 = 2495,
    TagName2494 = 2496,
    TagName2495 = 2497,
    TagName2496 = 2498,
    TagName2497 = 2499,
    TagName2498 = 2500,
    TagName2499 = 2501,
    TagName2500 = 2502,
    TagName2501 = 2503,
    TagName2502 = 2504,
    TagName2503 = 2505,
    TagName2504 = 2506,
    TagName2505 = 2507,
    TagName2506 = 2508,
    TagName2507 = 2509,
    TagName2508 = 2510,
    TagName2509 = 2511,
    TagName2510 = 2512,
    TagName2511 = 2513,
    TagName2512 = 2514,
    TagName2513 = 2515,
    TagName2514 = 2516,
    TagName2515 = 2517,
    TagName2516 = 2518,
    TagName2517 = 2519,
    TagName2518 = 2520,
    TagName2519 = 2521,
    TagName2520 = 2522,
    TagName2521 = 2523,
    TagName2522 = 2524,
    TagName2523 = 2525,
    TagName2524 = 2526,
    TagName2525 = 2527,
    TagName2526 = 2528,
    TagName2527 = 2529,
    TagName2528 = 2530,
    TagName2529 = 2531,
    TagName2530 = 2532,
    TagName2531 = 2533,
    TagName2532 = 2534,
    TagName2533 = 2535,
    TagName2534 = 2536,
    TagName2535 = 2537,
    TagName2536 = 2538,
    TagName2537 = 2539,
    TagName2538 = 2540,
    TagName2539 = 2541,
    TagName2540 = 2542,
    TagName2541 = 2543,
    TagName2542 = 2544,
    TagName2543 = 2545,
    TagName2544 = 2546,
    TagName2545 = 2547,
    TagName2546 = 2548,
    TagName2547 = 2549,
    TagName2548 = 2550,
    TagName2549 = 2551,
    TagName2550 = 2552,
    TagName2551 = 2553,
    TagName2552 = 2554,
    TagName2553 = 2555,
    TagName2554 = 2556,
    TagName2555 = 2557,
    TagName2556 = 2558,
    TagName2557 = 2559,
    TagName2558 = 2560,
    TagName2559 = 2561,
    TagName2560 = 2562,
    TagName2561 = 2563,
    TagName2562 = 2564,
    TagName2563 = 2565,
    TagName2564 = 2566,
    TagName2565 = 2567,
    TagName2566 = 2568,
    TagName2567 = 2569,
    TagName2568 = 2570,
    TagName2569 = 2571,
    TagName2570 = 2572,
    TagName2571 = 2573,
    TagName2572 = 2574,
    TagName2573 = 2575,
    TagName2574 = 2576,
    TagName2575 = 2577,
    TagName2576 = 2578,
    TagName2577 = 2579,
    TagName2578 = 2580,
    TagName2579 = 2581,
    TagName2580 = 2582,
    TagName2581 = 2583,
    TagName2582 = 2584,
    TagName2583 = 2585,
    TagName2584 = 2586,
    TagName2585 = 2587,
    TagName2586 = 2588,
    TagName2587 = 2589,
    TagName2588 = 2590,
    TagName2589 = 2591,
    TagName2590 = 2592,
    TagName2591 = 2593,
    TagName2592 = 2594,
    TagName2593 = 2595,
    TagName2594 = 2596,
    TagName2595 = 2597,
    TagName2596 = 2598,
    TagName2597 = 2599,
    TagName2598 = 2600,
    TagName2599 = 2601,
    TagName2600 = 2602,
    TagName2601 = 2603,
    TagName2602 = 2604,
    TagName2603 = 2605,
    TagName2604 = 2606,
    TagName2605 = 2607,
    TagName2606 = 2608,
    TagName2607 = 2609,
    TagName2608 = 2610,
    TagName2609 = 2611,
    TagName2610 = 2612,
    TagName2611 = 2613,
    TagName2612 = 2614,
    TagName2613 = 2615,
    TagName2614 = 2616,
    TagName2615 = 2617,
    TagName2616 = 2618,
    TagName2617 = 2619,
    TagName2618 = 2620,
    TagName2619 = 2621,
    TagName2620 = 2622,
    TagName2621 = 2623,
    TagName2622 = 2624,
    TagName2623 = 2625,
    TagName2624 = 2626,
    TagName2625 = 2627,
    TagName2626 = 2628,
    TagName2627 = 2629,
    TagName2628 = 2630,
    TagName2629 = 2631,
    TagName2630 = 2632,
    TagName2631 = 2633,
    TagName2632 = 2634,
    TagName2633 = 2635,
    TagName2634 = 2636,
    TagName2635 = 2637,
    TagName2636 = 2638,
    TagName2637 = 2639,
    TagName2638 = 2640,
    TagName2639 = 2641,
    TagName2640 = 2642,
    TagName2641 = 2643,
    TagName2642 = 2644,
    TagName2643 = 2645,
    TagName2644 = 2646,
    TagName2645 = 2647,
    TagName2646 = 2648,
    TagName2647 = 2649,
    TagName2648 = 2650,
    TagName2649 = 2651,
    TagName2650 = 2652,
    TagName2651 = 2653,
    TagName2652 = 2654,
    TagName2653 = 2655,
    TagName2654 = 2656,
    TagName2655 = 2657,
    TagName2656 = 2658,
    TagName2657 = 2659,
    TagName2658 = 2660,
    TagName2659 = 2661,
    TagName2660 = 2662,
    TagName2661 = 2663,
    TagName2662 = 2664,
    TagName2663 = 2665,
    TagName2664 = 2666,
    TagName2665 = 2667,
    TagName2666 = 2668,
    TagName2667 = 2669,
    TagName2668 = 2670,
    TagName2669 = 2671,
    TagName2670 = 2672,
    TagName2671 = 2673,
    TagName2672 = 2674,
    TagName2673 = 2675,
    TagName2674 = 2676,
    TagName2675 = 2677,
    TagName2676 = 2678,
    TagName2677 = 2679,
    TagName2678 = 2680,
    TagName2679 = 2681,
    TagName2680 = 2682,
    TagName2681 = 2683,
    TagName2682 = 2684,
    TagName2683 = 2685,
    TagName2684 = 2686,
    TagName2685 = 2687,
    TagName2686 = 2688,
    TagName2687 = 2689,
    TagName2688 = 2690,
    TagName2689 = 2691,
    TagName2690 = 2692,
    TagName2691 = 2693,
    TagName2692 = 2694,
    TagName2693 = 2695,
    TagName2694 = 2696,
    TagName2695 = 2697,
    TagName2696 = 2698,
    TagName2697 = 2699,
    TagName2698 = 2700,
    TagName2699 = 2701,
    TagName2700 = 2702,
    TagName2701 = 2703,
    TagName2702 = 2704,
    TagName2703 = 2705,
    TagName2704 = 2706,
    TagName2705 = 2707,
    TagName2706 = 2708,
    TagName2707 = 2709,
    TagName2708 = 2710,
    TagName2709 = 2711,
    TagName2710 = 2712,
    TagName2711 = 2713,
    TagName2712 = 2714,
    TagName2713 = 2715,
    TagName2714 = 2716,
    TagName2715 = 2717,
    TagName2716 = 2718,
    TagName2717 = 2719,
    TagName2718 = 2720,
    TagName2719 = 2721,
    TagName2720 = 2722,
    TagName2721 = 2723,
    TagName2722 = 2724,
    TagName2723 = 2725,
    TagName2724 = 2726,
    TagName2725 = 2727,
    TagName2726 = 2728,
    TagName2727 = 2729,
    TagName2728 = 2730,
    TagName2729 = 2731,
    TagName2730 = 2732,
    TagName2731 = 2733,
    TagName2732 = 2734,
    TagName2733 = 2735,
    TagName2734 = 2736,
    TagName2735 = 2737,
    TagName2736 = 2738,
    TagName2737 = 2739,
    TagName2738 = 2740,
    TagName2739 = 2741,
    TagName2740 = 2742,
    TagName2741 = 2743,
    TagName2742 = 2744,
    TagName2743 = 2745,
    TagName2744 = 2746,
    TagName2745 = 2747,
    TagName2746 = 2748,
    TagName2747 = 2749,
    TagName2748 = 2750,
    TagName2749 = 2751,
    TagName2750 = 2752,
    TagName2751 = 2753,
    TagName2752 = 2754,
    TagName2753 = 2755,
    TagName2754 = 2756,
    TagName2755 = 2757,
    TagName2756 = 2758,
    TagName2757 = 2759,
    TagName2758 = 2760,
    TagName2759 = 2761,
    TagName2760 = 2762,
    TagName2761 = 2763,
    TagName2762 = 2764,
    TagName2763 = 2765,
    TagName2764 = 2766,
    TagName2765 = 2767,
    TagName2766 = 2768,
    TagName2767 = 2769,
    TagName2768 = 2770,
    TagName2769 = 2771,
    TagName2770 = 2772,
    TagName2771 = 2773,
    TagName2772 = 2774,
    TagName2773 = 2775,
    TagName2774 = 2776,
    TagName2775 = 2777,
    TagName2776 = 2778,
    TagName2777 = 2779,
    TagName2778 = 2780,
    TagName2779 = 2781,
    TagName2780 = 2782,
    TagName2781 = 2783,
    TagName2782 = 2784,
    TagName2783 = 2785,
    TagName2784 = 2786,
    TagName2785 = 2787,
    TagName2786 = 2788,
    TagName2787 = 2789,
    TagName2788 = 2790,
    TagName2789 = 2791,
    TagName2790 = 2792,
    TagName2791 = 2793,
    TagName2792 = 2794,
    TagName2793 = 2795,
    TagName2794 = 2796,
    TagName2795 = 2797,
    TagName2796 = 2798,
    TagName2797 = 2799,
    TagName2798 = 2800,
    TagName2799 = 2801,
    TagName2800 = 2802,
    TagName2801 = 2803,
    TagName2802 = 2804,
    TagName2803 = 2805,
    TagName2804 = 2806,
    TagName2805 = 2807,
    TagName2806 = 2808,
    TagName2807 = 2809,
    TagName2808 = 2810,
    TagName2809 = 2811,
    TagName2810 = 2812,
    TagName2811 = 2813,
    TagName2812 = 2814,
    TagName2813 = 2815,
    TagName2814 = 2816,
    TagName2815 = 2817,
    TagName2816 = 2818,
    TagName2817 = 2819,
    TagName2818 = 2820,
    TagName2819 = 2821,
    TagName2820 = 2822,
    TagName2821 = 2823,
    TagName2822 = 2824,
    TagName2823 = 2825,
    TagName2824 = 2826,
    TagName2825 = 2827,
    TagName2826 = 2828,
    TagName2827 = 2829,
    TagName2828 = 2830,
    TagName2829 = 2831,
    TagName2830 = 2832,
    TagName2831 = 2833,
    TagName2832 = 2834,
    TagName2833 = 2835,
    TagName2834 = 2836,
    TagName2835 = 2837,
    TagName2836 = 2838,
    TagName2837 = 2839,
    TagName2838 = 2840,
    TagName2839 = 2841,
    TagName2840 = 2842,
    TagName2841 = 2843,
    TagName2842 = 2844,
    TagName2843 = 2845,
    TagName2844 = 2846,
    TagName2845 = 2847,
    TagName2846 = 2848,
    TagName2847 = 2849,
    TagName2848 = 2850,
    TagName2849 = 2851,
    TagName2850 = 2852,
    TagName2851 = 2853,
    TagName2852 = 2854,
    TagName2853 = 2855,
    TagName2854 = 2856,
    TagName2855 = 2857,
    TagName2856 = 2858,
    TagName2857 = 2859,
    TagName2858 = 2860,
    TagName2859 = 2861,
    TagName2860 = 2862,
    TagName2861 = 2863,
    TagName2862 = 2864,
    TagName2863 = 2865,
    TagName2864 = 2866,
    TagName2865 = 2867,
    TagName2866 = 2868,
    TagName2867 = 2869,
    TagName2868 = 2870,
    TagName2869 = 2871,
    TagName2870 = 2872,
    TagName2871 = 2873,
    TagName2872 = 2874,
    TagName2873 = 2875,
    TagName2874 = 2876,
    TagName2875 = 2877,
    TagName2876 = 2878,
    TagName2877 = 2879,
    TagName2878 = 2880,
    TagName2879 = 2881,
    TagName2880 = 2882,
    TagName2881 = 2883,
    TagName2882 = 2884,
    TagName2883 = 2885,
    TagName2884 = 2886,
    TagName2885 = 2887,
    TagName2886 = 2888,
    TagName2887 = 2889,
    TagName2888 = 2890,
    TagName2889 = 2891,
    TagName2890 = 2892,
    TagName2891 = 2893,
    TagName2892 = 2894,
    TagName2893 = 2895,
    TagName2894 = 2896,
    TagName2895 = 2897,
    TagName2896 = 2898,
    TagName2897 = 2899,
    TagName2898 = 2900,
    TagName2899 = 2901,
    TagName2900 = 2902,
    TagName2901 = 2903,
    TagName2902 = 2904,
    TagName2903 = 2905,
    TagName2904 = 2906,
    TagName2905 = 2907,
    TagName2906 = 2908,
    TagName2907 = 2909,
    TagName2908 = 2910,
    TagName2909 = 2911,
    TagName2910 = 2912,
    TagName2911 = 2913,
    TagName2912 = 2914,
    TagName2913 = 2915,
    TagName2914 = 2916,
    TagName2915 = 2917,
    TagName2916 = 2918,
    TagName2917 = 2919,
    TagName2918 = 2920,
    TagName2919 = 2921,
    TagName2920 = 2922,
    TagName2921 = 2923,
    TagName2922 = 2924,
    TagName2923 = 2925,
    TagName2924 = 2926,
    TagName2925 = 2927,
    TagName2926 = 2928,
    TagName2927 = 2929,
    TagName2928 = 2930,
    TagName2929 = 2931,
    TagName2930 = 2932,
    TagName2931 = 2933,
    TagName2932 = 2934,
    TagName2933 = 2935,
    TagName2934 = 2936,
    TagName2935 = 2937,
    TagName2936 = 2938,
    TagName2937 = 2939,
    TagName2938 = 2940,
    TagName2939 = 2941,
    TagName2940 = 2942,
    TagName2941 = 2943,
    TagName2942 = 2944,
    TagName2943 = 2945,
    TagName2944 = 2946,
    TagName2945 = 2947,
    TagName2946 = 2948,
    TagName2947 = 2949,
    TagName2948 = 2950,
    TagName2949 = 2951,
    TagName2950 = 2952,
    TagName2951 = 2953,
    TagName2952 = 2954,
    TagName2953 = 2955,
    TagName2954 = 2956,
    TagName2955 = 2957,
    TagName2956 = 2958,
    TagName2957 = 2959,
    TagName2958 = 2960,
    TagName2959 = 2961,
    TagName2960 = 2962,
    TagName2961 = 2963,
    TagName2962 = 2964,
    TagName2963 = 2965,
    TagName2964 = 2966,
    TagName2965 = 2967,
    TagName2966 = 2968,
    TagName2967 = 2969,
    TagName2968 = 2970,
    TagName2969 = 2971,
    TagName2970 = 2972,
    TagName2971 = 2973,
    TagName2972 = 2974,
    TagName2973 = 2975,
    TagName2974 = 2976,
    TagName2975 = 2977,
    TagName2976 = 2978,
    TagName2977 = 2979,
    TagName2978 = 2980,
    TagName2979 = 2981,
    TagName2980 = 2982,
    TagName2981 = 2983,
    TagName2982 = 2984,
    TagName2983 = 2985,
    TagName2984 = 2986,
    TagName2985 = 2987,
    TagName2986 = 2988,
    TagName2987 = 2989,
    TagName2988 = 2990,
    TagName2989 = 2991,
    TagName2990 = 2992,
    TagName2991 = 2993,
    TagName2992 = 2994,
    TagName2993 = 2995,
    TagName2994 = 2996,
    TagName2995 = 2997,
    TagName2996 = 2998,
    TagName2997 = 2999,
    TagName2998 = 3000,
    TagName2999 = 3001,
    TagName3000 = 3002,
    TagName3001 = 3003
}

enum Club: int{
    None = 0,
    Engineer = 1,
    CleanNClearing = 2,
    KnightsHospitaller = 3,
    IndeGEHENNA = 4,
    IndeMILLENNIUM = 5,
    IndeHyakkiyako = 6,
    IndeShanhaijing = 7,
    IndeTrinity = 8,
    FoodService = 9,
    Countermeasure = 10,
    BookClub = 11,
    MatsuriOffice = 12,
    GourmetClub = 13,
    HoukagoDessert = 14,
    RedwinterSecretary = 15,
    Schale = 16,
    TheSeminar = 17,
    AriusSqud = 18,
    Justice = 19,
    Fuuki = 20,
    Kohshinjo68 = 21,
    Meihuayuan = 22,
    SisterHood = 23,
    GameDev = 24,
    anzenkyoku = 25,
    RemedialClass = 26,
    SPTF = 27,
    TrinityVigilance = 28,
    Veritas = 29,
    TrainingClub = 30,
    Onmyobu = 31,
    Shugyobu = 32,
    Endanbou = 33,
    NinpoKenkyubu = 34,
    Class227 = 35,
    EmptyClub = 36,
    Emergentology = 37,
    RabbitPlatoon = 38,
    PandemoniumSociety = 39,
    HotSpringsDepartment = 40,
    TeaParty = 41,
    PublicPeaceBureau = 42,
    Genryumon = 43,
    BlackTortoisePromenade = 44,
    LaborParty = 45,
    KnowledgeLiberationFront = 46
}

table GroundVector3{
    X: float;
    Y: float;
    Z: float;
}

table AcademyFavorScheduleExcelTable{
    DataList: [AcademyFavorScheduleExcel];
}

table AcademyFavorScheduleExcel{
    Id: long;
    CharacterId: long;
    ScheduleGroupId: long;
    OrderInGroup: long;
    Location: string;
    LocalizeScenarioId: uint;
    FavorRank: long;
    SecretStoneAmount: long;
    ScenarioSriptGroupId: long;
    RewardParcelType: [ParcelType];
    RewardParcelId: [long];
    RewardAmount: [long];
}

table AcademyLocationExcelTable{
    DataList: [AcademyLocationExcel];
}

table AcademyLocationExcel{
    Id: long;
    LocalizeEtcId: uint;
    PrefabPath: string;
    IconImagePath: string;
    OpenCondition: [School];
    OpenConditionCount: [long];
    RewardParcelType: ParcelType;
    RewardParcelId: long;
    OpenTeacherRank: long;
}

table AcademyLocationRankExcelTable{
    DataList: [AcademyLocationRankExcel];
}

table AcademyLocationRankExcel{
    Rank: long;
    RankExp: long;
    TotalExp: long;
}

table AcademyMessanger1ExcelTable{
    DataList: [AcademyMessanger1Excel];
}

table AcademyMessanger1Excel{
    MessageGroupId: long;
    Id: long;
    CharacterId: long;
    MessageCondition: AcademyMessageConditions;
    ConditionValue: long;
    PreConditionGroupId: long;
    PreConditionFavorScheduleId: long;
    FavorScheduleId: long;
    NextGroupId: long;
    FeedbackTimeMillisec: long;
    MessageType: AcademyMessageTypes;
    ImagePath: string;
    MessageKR: string;
    MessageJP: string;
    MessageTH: string;
    MessageTW: string;
    MessageEN: string;
}

table AcademyMessanger2ExcelTable{
    DataList: [AcademyMessanger2Excel];
}

table AcademyMessanger2Excel{
    MessageGroupId: long;
    Id: long;
    CharacterId: long;
    MessageCondition: AcademyMessageConditions;
    ConditionValue: long;
    PreConditionGroupId: long;
    PreConditionFavorScheduleId: long;
    FavorScheduleId: long;
    NextGroupId: long;
    FeedbackTimeMillisec: long;
    MessageType: AcademyMessageTypes;
    ImagePath: string;
    MessageKR: string;
    MessageJP: string;
    MessageTH: string;
    MessageTW: string;
    MessageEN: string;
}

table AcademyMessanger3ExcelTable{
    DataList: [AcademyMessanger3Excel];
}

table AcademyMessanger3Excel{
    MessageGroupId: long;
    Id: long;
    CharacterId: long;
    MessageCondition: AcademyMessageConditions;
    ConditionValue: long;
    PreConditionGroupId: long;
    PreConditionFavorScheduleId: long;
    FavorScheduleId: long;
    NextGroupId: long;
    FeedbackTimeMillisec: long;
    MessageType: AcademyMessageTypes;
    ImagePath: string;
    MessageKR: string;
    MessageJP: string;
    MessageTH: string;
    MessageTW: string;
    MessageEN: string;
}

table AcademyMessangerExcelTable{
    DataList: [AcademyMessangerExcel];
}

table AcademyMessangerExcel{
    MessageGroupId: long;
    Id: long;
    CharacterId: long;
    MessageCondition: AcademyMessageConditions;
    ConditionValue: long;
    PreConditionGroupId: long;
    PreConditionFavorScheduleId: long;
    FavorScheduleId: long;
    NextGroupId: long;
    FeedbackTimeMillisec: long;
    MessageType: AcademyMessageTypes;
    ImagePath: string;
    MessageKR: string;
    MessageJP: string;
    MessageTH: string;
    MessageTW: string;
    MessageEN: string;
}

table AcademyRewardExcelTable{
    DataList: [AcademyRewardExcel];
}

table AcademyRewardExcel{
    Location: string;
    ScheduleGroupId: long;
    OrderInGroup: long;
    Id: long;
    ProgressTexture: string;
    LocalizeEtcId: uint;
    LocationRank: long;
    FavorExp: long;
    SecretStoneAmount: long;
    SecretStoneProb: long;
    ExtraFavorExp: long;
    ExtraFavorExpProb: long;
    ExtraRewardParcelType: [ParcelType];
    ExtraRewardParcelId: [long];
    ExtraRewardAmount: [long];
    ExtraRewardProb: [long];
    IsExtraRewardDisplayed: [bool];
    RewardParcelType: [ParcelType];
    RewardParcelId: [long];
    RewardAmount: [long];
}

table AcademyTicketExcelTable{
    DataList: [AcademyTicketExcel];
}

table AcademyTicketExcel{
    LocationRankSum: long;
    ScheduleTicktetMax: long;
}

table AcademyZoneExcelTable{
    DataList: [AcademyZoneExcel];
}

table AcademyZoneExcel{
    Id: long;
    LocationId: long;
    LocationRankForUnlock: long;
    LocalizeEtcId: uint;
    StudentVisitProb: [long];
    RewardGroupId: long;
    Tags: [Tag];
}

table AccountLevelExcelTable{
    DataList: [AccountLevelExcel];
}

table AccountLevelExcel{
    Id: long;
    Level: long;
    Exp: long;
    APAutoChargeMax: long;
}

table AddressableBlackListExcelTable{
    DataList: [AddressableBlackListExcel];
}

table AddressableBlackListExcel{
    Id: long;
    FolderPath: [string];
    ResourcePath: [string];
}

table AddressableWhiteListExcelTable{
    DataList: [AddressableWhiteListExcel];
}

table AddressableWhiteListExcel{
    Id: long;
    FolderPath: [string];
    ResourcePath: [string];
}

table AnimationBlendTable{
    DataList: [BlendData];
}

table BlendData{
    Type: int;
    InfoList: [BlendInfo];
}

table BlendInfo{
    From: int;
    To: int;
    Blend: float;
}

table AnimatorDataTable{
    DataList: [AnimatorData];
}

table AnimatorData{
    DefaultStateName: string;
    Name: string;
    DataList: [AniStateData];
}

table AniStateData{
    StateName: string;
    StatePrefix: string;
    StateNameWithPrefix: string;
    Tag: string;
    SpeedParameterName: string;
    SpeedParamter: float;
    StateSpeed: float;
    ClipName: string;
    Length: float;
    FrameRate: float;
    IsLooping: bool;
    Events: [AniEventData];
}

table AniEventData{
    Name: string;
    Time: float;
    IntParam: int;
    FloatParam: float;
    StringParam: string;
}

table ArenaLevelSectionExcelTable{
    DataList: [ArenaLevelSectionExcel];
}

table ArenaLevelSectionExcel{
    ArenaSeasonId: long;
    StartLevel: long;
    LastLevel: long;
    UserCount: long;
}

table ArenaLevelSection_StageExcelTable{
    DataList: [ArenaLevelSection_StageExcel];
}

table ArenaLevelSection_StageExcel{
    ArenaSeasonId: long;
    StartLevel: long;
    LastLevel: long;
    UserCount: long;
}

table ArenaMapExcelTable{
    DataList: [ArenaMapExcel];
}

table ArenaMapExcel{
    UniqueId: long;
    TerrainType: long;
    TerrainTypeLocalizeKey: string;
    ImagePath: string;
    GroundGroupId: long;
    GroundGroupNameLocalizeKey: string;
    StartRank: long;
    EndRank: long;
    GroundId: long;
}

table ArenaNPCExcelTable{
    DataList: [ArenaNPCExcel];
}

table ArenaNPCExcel{
    UniqueId: long;
    Rank: long;
    NPCAccountLevel: long;
    NPCLevel: long;
    NPCLevelDeviation: long;
    NPCStarGrade: long;
    UseTSS: bool;
    ExceptionCharacterRarities: [Rarity];
    ExceptionMainCharacterIds: [long];
    ExceptionSupportCharacterIds: [long];
    ExceptionTSSIds: [long];
}

table ArenaRewardExcelTable{
    DataList: [ArenaRewardExcel];
}

table ArenaRewardExcel{
    UniqueId: long;
    ArenaRewardType: ArenaRewardType;
    RankStart: long;
    RankEnd: long;
    RankIconPath: string;
    RewardParcelType: [ParcelType];
    RewardParcelUniqueId: [long];
    RewardParcelUniqueName: [string];
    RewardParcelAmount: [long];
}

table ArenaSeasonCloseRewardExcelTable{
    DataList: [ArenaSeasonCloseRewardExcel];
}

table ArenaSeasonCloseRewardExcel{
    SeasonId: long;
    RankStart: long;
    RankEnd: long;
    RewardParcelType: [ParcelType];
    RewardParcelUniqueId: [long];
    RewardParcelUniqueName: [string];
    RewardParcelAmount: [long];
}

table ArenaSeasonExcelTable{
    DataList: [ArenaSeasonExcel];
}

table ArenaSeasonExcel{
    UniqueId: long;
    SeasonStartDate: string;
    SeasonEndDate: string;
    SeasonGroupLimit: long;
    PrevSeasonId: long;
}

table AttendanceExcelTable{
    DataList: [AttendanceExcel];
}

table AttendanceExcel{
    Id: long;
    Type: AttendanceType;
    CountdownPrefab: string;
    DisplayOrder: long;
    AccountType: AccountState;
    AccountLevelLimit: long;
    Title: string;
    InfomationLocalizeCode: string;
    CountRule: AttendanceCountRule;
    CountReset: AttendanceResetType;
    BookSize: long;
    StartDate: string;
    StartableEndDate: string;
    EndDate: string;
    ExpiryDate: long;
    MailType: MailType;
    DialogCategory: DialogCategory;
    TitleImagePath: string;
    DecorationImagePath: string;
}

table AttendanceRewardExcelTable{
    DataList: [AttendanceRewardExcel];
}

table AttendanceRewardExcel{
    AttendanceId: long;
    Day: long;
    RewardIcon: string;
    RewardParcelType: [ParcelType];
    RewardId: [long];
    RewardAmount: [long];
}

table AudioAnimatorExcelTable{
    DataList: [AudioAnimatorExcel];
}

table AudioAnimatorExcel{
    ControllerNameHash: uint;
    VoiceNamePrefix: string;
    StateNameHash: uint;
    StateName: string;
    IgnoreInterruptDelay: bool;
    IgnoreInterruptPlay: bool;
    Volume: float;
    Delay: float;
    AudioPriority: int;
    AudioClipPath: [string];
    VoiceHash: [uint];
}

table BattleLevelFactorExcelTable{
    DataList: [BattleLevelFactorExcel];
}

table BattleLevelFactorExcel{
    LevelDiff: int;
    DamageRate: long;
}

table BGMExcelTable{
    DataList: [BGMExcel];
}

table BGMExcel{
    Id: long;
    ProductionStep: ProductionStep;
    Path: string;
    Volume: float;
    LoopStartTime: float;
    LoopEndTime: float;
    LoopTranstionTime: float;
    LoopOffsetTime: float;
}

table BGMRaidExcelTable{
    DataList: [BGMRaidExcel];
}

table BGMRaidExcel{
    StageId: long;
    PhaseIndex: long;
    BGMId: long;
}

table BGMUIExcelTable{
    DataList: [BGMUIExcel];
}

table BGMUIExcel{
    UIPrefab: uint;
    BGMId: long;
    BGMId2nd: long;
    BGMId3rd: long;
    EventContentId: long;
}

table BGM_GlobalExcelTable{
    DataList: [BGM_GlobalExcel];
}

table BGM_GlobalExcel{
    GroupBGMId: long;
    BGMIdKr: long;
    BGMIdJp: long;
    BGMIdTh: long;
    BGMIdTw: long;
    BGMIdEn: long;
}

table BossExternalBTExcelTable{
    DataList: [BossExternalBTExcel];
}

table BossExternalBTExcel{
    ExternalBTId: long;
    AIPhase: long;
    ExternalBTNodeType: ExternalBTNodeType;
    ExternalBTTrigger: ExternalBTTrigger;
    TriggerArgument: string;
    BehaviorRate: long;
    ExternalBehavior: ExternalBehavior;
    BehaviorArgument: string;
}

table BossPhaseExcelTable{
    DataList: [BossPhaseExcel];
}

table BossPhaseExcel{
    Id: long;
    AIPhase: long;
    NormalAttackSkillUniqueName: string;
    UseExSkill: [bool];
}

table BuffParticleExcelTable{
    DataList: [BuffParticleExcel];
}

table BuffParticleExcel{
    UniqueId: long;
    UniqueName: string;
    BuffType: string;
    BuffName: string;
    ResourcePath: string;
}

table BulletArmorDamageFactorExcelTable{
    DataList: [BulletArmorDamageFactorExcel];
}

table BulletArmorDamageFactorExcel{
    DamageFactorGroupId: string;
    BulletType: BulletType;
    ArmorType: ArmorType;
    DamageRate: long;
    DamageAttribute: DamageAttribute;
    MinDamageRate: long;
    MaxDamageRate: long;
    ShowHighlightFloater: bool;
}

table CafeInfoExcelTable{
    DataList: [CafeInfoExcel];
}

table CafeInfoExcel{
    CafeId: long;
    IsDefault: bool;
    OpenConditionCafeId: OpenConditionContent;
    OpenConditionCafeInvite: OpenConditionContent;
}

table CafeInteractionExcelTable{
    DataList: [CafeInteractionExcel];
}

table CafeInteractionExcel{
    CharacterId: long;
    IgnoreIfUnobtained: bool;
    IgnoreIfUnobtainedStartDate: string;
    IgnoreIfUnobtainedEndDate: string;
    BubbleType_: [BubbleType];
    BubbleDuration: [long];
    FavorEmoticonRewardParcelType: ParcelType;
    FavorEmoticonRewardId: long;
    FavorEmoticonRewardAmount: long;
    CafeCharacterState: [string];
}

table CafeProductionExcelTable{
    DataList: [CafeProductionExcel];
}

table CafeProductionExcel{
    CafeId: long;
    Rank: long;
    CafeProductionParcelType: ParcelType;
    CafeProductionParcelId: long;
    ParcelProductionCoefficient: long;
    ParcelProductionCorrectionValue: long;
    ParcelStorageMax: long;
}

table CafeRankExcelTable{
    DataList: [CafeRankExcel];
}

table CafeRankExcel{
    CafeId: long;
    Rank: long;
    RecipeId: long;
    ComfortMax: long;
    ActionPointProductionCoefficient: long;
    ActionPointProductionCorrectionValue: long;
    ActionPointStorageMax: long;
    GoldProductionCoefficient: long;
    GoldProductionCorrectionValue: long;
    GoldStorageMax: long;
    TagCountMax: long;
    CharacterVisitMin: int;
    CharacterVisitMax: int;
}

table CameraExcelTable{
    DataList: [CameraExcel];
}

table CameraExcel{
    UniqueId: long;
    MinDistance: float;
    MaxDistance: float;
    RotationX: float;
    RotationY: float;
    MoveInstantly: bool;
    MoveInstantlyRotationSave: bool;
    LeftMargin: float;
    BottomMargin: float;
    IgnoreEnemies: bool;
    UseRailPointCompensation: bool;
}

table CampaignChapterExcelTable{
    DataList: [CampaignChapterExcel];
}

table CampaignChapterExcel{
    Id: long;
    Name: string;
    NormalImagePath: string;
    HardImagePath: string;
    Order: long;
    PreChapterId: [long];
    ChapterRewardId: long;
    ChapterHardRewardId: long;
    ChapterVeryHardRewardId: long;
    NormalCampaignStageId: [long];
    NormalExtraStageId: [long];
    HardCampaignStageId: [long];
    VeryHardCampaignStageId: [long];
    IsTacticSkip: bool;
}

table CampaignChapterRewardExcelTable{
    DataList: [CampaignChapterRewardExcel];
}

table CampaignChapterRewardExcel{
    Id: long;
    CampaignChapterStar: long;
    ChapterRewardParcelType: [ParcelType];
    ChapterRewardId: [long];
    ChapterRewardAmount: [int];
}

table CampaignStageExcelTable{
    DataList: [CampaignStageExcel];
}

table CampaignStageExcel{
    Id: long;
    Deprecated: bool;
    Name: string;
    StageNumber: string;
    CleardScenarioId: long;
    BattleDuration: long;
    StageEnterCostType: ParcelType;
    StageEnterCostId: long;
    StageEnterCostAmount: int;
    StageEnterEchelonCount: int;
    StarConditionTacticRankSCount: long;
    StarConditionTurnCount: long;
    EnterScenarioGroupId: [long];
    ClearScenarioGroupId: [long];
    StrategyMap: string;
    StrategyMapBG: string;
    CampaignStageRewardId: long;
    MaxTurn: int;
    StageTopography: StageTopography;
    RecommandLevel: int;
    BgmId: string;
    StrategyEnvironment: StrategyEnvironment;
    GroundId: long;
    ContentType: ContentType;
    BGMId: long;
    FirstClearReportEventName: string;
    FirstClearFunnelMessage: string;
    FirstClearEventMessage: string;
    TacticRewardExp: long;
    FixedEchelonId: long;
}

table CampaignStageRewardExcelTable{
    DataList: [CampaignStageRewardExcel];
}

table CampaignStageRewardExcel{
    GroupId: long;
    RewardTag: RewardTag;
    StageRewardProb: int;
    StageRewardParcelType: ParcelType;
    StageRewardId: long;
    StageRewardAmount: int;
    IsDisplayed: bool;
}

table CampaignStrategyObjectExcelTable{
    DataList: [CampaignStrategyObjectExcel];
}

table CampaignStrategyObjectExcel{
    Id: long;
    Key: uint;
    Name: string;
    PrefabName: string;
    StrategyObjectType: StrategyObjectType;
    StrategyRewardParcelType: ParcelType;
    StrategyRewardID: long;
    StrategyRewardName: string;
    StrategyRewardAmount: int;
    StrategySightRange: long;
    PortalId: int;
    HealValue: int;
    SwithId: int;
    BuffId: int;
    Disposable: bool;
}

table CampaignUnitExcelTable{
    DataList: [CampaignUnitExcel];
}

table CampaignUnitExcel{
    Id: long;
    Key: uint;
    Name: string;
    PrefabName: string;
    StrategyPrefabName: string;
    EnterScenarioGroupId: [long];
    ClearScenarioGroupId: [long];
    GroundId: long;
    IsBoss: bool;
    MoveRange: int;
    AIMoveType: StrategyAIType;
    Grade: HexaUnitGrade;
    EnvironmentType: TacticEnvironment;
    Scale: float;
    IsTacticSkip: bool;
}

table CharacterAcademyTagsExcelTable{
    DataList: [CharacterAcademyTagsExcel];
}

table CharacterAcademyTagsExcel{
    Id: long;
    FavorTags: [Tag];
    FavorItemTags: [Tag];
    FavorItemUniqueTags: [Tag];
    ForbiddenTags: [Tag];
    ZoneWhiteListTags: [Tag];
}

table CharacterAIExcelTable{
    DataList: [CharacterAIExcel];
}

table CharacterAIExcel{
    Id: long;
    EngageType: EngageType;
    Positioning: PositioningType;
    DistanceReduceRatioObstaclePath: long;
    DistanceReduceObstaclePath: long;
    DistanceReduceRatioFormationPath: long;
    DistanceReduceFormationPath: long;
    MinimumPositionGap: long;
    CanUseObstacleOfKneelMotion: bool;
    CanUseObstacleOfStandMotion: bool;
    HasTargetSwitchingMotion: bool;
}

table CharacterCalculationLimitExcelTable{
    DataList: [CharacterCalculationLimitExcel];
}

table CharacterCalculationLimitExcel{
    Id: long;
    TacticEntityType: TacticEntityType;
    CalculationValue: BattleCalculationStat;
    MinValue: long;
    MaxValue: long;
}

table CharacterCombatSkinExcelTable{
    DataList: [CharacterCombatSkinExcel];
}

table CharacterCombatSkinExcel{
    GroupId: string;
    UniqueId: long;
    ResourcePath: string;
}

table CharacterDialogEventExcelTable{
    DataList: [CharacterDialogEventExcel];
}

table CharacterDialogEventExcel{
    CostumeUniqueId: long;
    OriginalCharacterId: long;
    DisplayOrder: long;
    EventID: long;
    ProductionStep: ProductionStep;
    DialogCategory: DialogCategory;
    DialogCondition: DialogCondition;
    DialogConditionDetail: DialogConditionDetail;
    DialogConditionDetailValue: long;
    GroupId: long;
    DialogType: DialogType;
    ActionName: string;
    Duration: long;
    AnimationName: string;
    LocalizeKR: string;
    LocalizeJP: string;
    LocalizeTH: string;
    LocalizeTW: string;
    LocalizeEN: string;
    VoiceClipsKr: [string];
    VoiceClipsJp: [string];
    VoiceClipsTh: [string];
    VoiceClipsTw: [string];
    VoiceClipsEn: [string];
    CollectionVisible: bool;
    CVCollectionType: CVCollectionType;
    UnlockEventSeason: long;
    ScenarioGroupId: long;
    LocalizeCVGroup: string;
}

table CharacterDialogExcelTable{
    DataList: [CharacterDialogExcel];
}

table CharacterDialogExcel{
    CharacterId: long;
    CostumeUniqueId: long;
    DisplayOrder: long;
    ProductionStep: ProductionStep;
    DialogCategory: DialogCategory;
    DialogCondition: DialogCondition;
    Anniversary: Anniversary;
    StartDate: string;
    EndDate: string;
    GroupId: long;
    DialogType: DialogType;
    ActionName: string;
    Duration: long;
    AnimationName: string;
    LocalizeKR: string;
    LocalizeJP: string;
    LocalizeTH: string;
    LocalizeTW: string;
    LocalizeEN: string;
    VoiceClipsKr: [string];
    VoiceClipsJp: [string];
    VoiceClipsTh: [string];
    VoiceClipsTw: [string];
    VoiceClipsEn: [string];
    ApplyPosition: bool;
    PosX: float;
    PosY: float;
    CollectionVisible: bool;
    CVCollectionType: CVCollectionType;
    UnlockFavorRank: long;
    LocalizeCVGroup: string;
    TeenMode: bool;
}

table CharacterExcelTable{
    DataList: [CharacterExcel];
}

table CharacterExcel{
    Id: long;
    DevName: string;
    CostumeGroupId: long;
    IsPlayable: bool;
    ProductionStep: ProductionStep;
    CollectionVisible: bool;
    ReleaseDate: string;
    CollectionVisibleStartDate: string;
    CollectionVisibleEndDate: string;
    IsPlayableCharacter: bool;
    LocalizeEtcId: uint;
    Rarity: Rarity;
    IsNPC: bool;
    TacticEntityType: TacticEntityType;
    CanSurvive: bool;
    IsDummy: bool;
    SubPartsCount: int;
    TacticRole: TacticRole;
    WeaponType: WeaponType;
    TacticRange: TacticRange;
    BulletType: BulletType;
    ArmorType: ArmorType;
    AimIKType: AimIKType;
    School: School;
    Club: Club;
    DefaultStarGrade: int;
    MaxStarGrade: int;
    StatLevelUpType: StatLevelUpType;
    SquadType: SquadType;
    Jumpable: bool;
    PersonalityId: long;
    CharacterAIId: long;
    ExternalBTId: long;
    ScenarioCharacter: string;
    SpawnTemplateId: uint;
    FavorLevelupType: int;
    EquipmentSlot: [EquipmentCategory];
    WeaponImagePath: string;
    WeaponLocalizeId: uint;
    BodyRadius: long;
    RandomEffectRadius: long;
    HPBarHide: bool;
    HpBarHeight: float;
    HighlightFloaterHeight: float;
    EmojiOffsetX: float;
    EmojiOffsetY: float;
    MoveStartFrame: int;
    MoveEndFrame: int;
    JumpMotionFrame: int;
    AppearFrame: int;
    CanMove: bool;
    CanFix: bool;
    CanCrowdControl: bool;
    CanBattleItemMove: bool;
    IsAirUnit: bool;
    AirUnitHeight: long;
    Tags: [Tag];
    SecretStoneItemId: long;
    SecretStoneItemAmount: int;
    CharacterPieceItemId: long;
    CharacterPieceItemAmount: int;
    CombineRecipeId: long;
}

table CharacterGearExcelTable{
    DataList: [CharacterGearExcel];
}

table CharacterGearExcel{
    Id: long;
    CharacterId: long;
    StatLevelUpType: StatLevelUpType;
    Tier: long;
    NextTierEquipment: long;
    RecipeId: long;
    OpenFavorLevel: long;
    MaxLevel: long;
    LearnSkillSlot: string;
    StatType: [EquipmentOptionType];
    MinStatValue: [long];
    MaxStatValue: [long];
    Icon: string;
    LocalizeEtcId: uint;
    Tags: [Tag];
}

table CharacterGearLevelExcelTable{
    DataList: [CharacterGearLevelExcel];
}

table CharacterGearLevelExcel{
    Level: int;
    TierLevelExp: [long];
    TotalExp: [long];
}

table CharacterIllustCoordinateExcelTable{
    DataList: [CharacterIllustCoordinateExcel];
}

table CharacterIllustCoordinateExcel{
    Id: long;
    CharacterBodyCenterX: float;
    CharacterBodyCenterY: float;
    DefaultScale: float;
    MinScale: float;
    MaxScale: float;
}

table CharacterLevelExcelTable{
    DataList: [CharacterLevelExcel];
}

table CharacterLevelExcel{
    Level: int;
    Exp: long;
    TotalExp: long;
}

table CharacterLevelStatFactorExcelTable{
    DataList: [CharacterLevelStatFactorExcel];
}

table CharacterLevelStatFactorExcel{
    Level: long;
    CriticalFactor: long;
    StabilityFactor: long;
    DefenceFactor: long;
    AccuracyFactor: long;
}

table CharacterSkillListExcelTable{
    DataList: [CharacterSkillListExcel];
}

table CharacterSkillListExcel{
    CharacterSkillListGroupId: long;
    MinimumGradeCharacterWeapon: int;
    MinimumTierCharacterGear: int;
    IsFormConversion: bool;
    IsRootMotion: bool;
    IsMoveLeftRight: bool;
    UseRandomAnimation: bool;
    NormalSkillGroupId: [string];
    NormalSkillTimeLineIndex: [int];
    ExSkillGroupId: [string];
    ExSkillTimeLineIndex: [int];
    PublicSkillGroupId: [string];
    PublicSkillTimeLineIndex: [int];
    PassiveSkillGroupId: [string];
    LeaderSkillGroupId: [string];
    ExtraPassiveSkillGroupId: [string];
    HiddenPassiveSkillGroupId: [string];
}

table CharacterStatExcelTable{
    DataList: [CharacterStatExcel];
}

table CharacterStatExcel{
    CharacterId: long;
    StabilityRate: long;
    StabilityPoint: long;
    AttackPower1: long;
    AttackPower100: long;
    MaxHP1: long;
    MaxHP100: long;
    DefensePower1: long;
    DefensePower100: long;
    HealPower1: long;
    HealPower100: long;
    DodgePoint: long;
    AccuracyPoint: long;
    CriticalPoint: long;
    CriticalResistPoint: long;
    CriticalDamageRate: long;
    CriticalDamageResistRate: long;
    BlockRate: long;
    HealEffectivenessRate: long;
    OppressionPower: long;
    OppressionResist: long;
    DefensePenetration1: long;
    DefensePenetration100: long;
    DefensePenetrationResist1: long;
    DefensePenetrationResist100: long;
    EnhanceExplosionRate: long;
    EnhancePierceRate: long;
    EnhanceMysticRate: long;
    EnhanceSonicRate: long;
    EnhanceSiegeRate: long;
    EnhanceNormalRate: long;
    EnhanceLightArmorRate: long;
    EnhanceHeavyArmorRate: long;
    EnhanceUnarmedRate: long;
    EnhanceElasticArmorRate: long;
    EnhanceStructureRate: long;
    EnhanceNormalArmorRate: long;
    ExtendBuffDuration: long;
    ExtendDebuffDuration: long;
    ExtendCrowdControlDuration: long;
    AmmoCount: long;
    AmmoCost: long;
    IgnoreDelayCount: long;
    NormalAttackSpeed: long;
    Range: long;
    InitialRangeRate: long;
    MoveSpeed: long;
    SightPoint: long;
    ActiveGauge: long;
    GroggyGauge: int;
    GroggyTime: int;
    StrategyMobility: long;
    ActionCount: long;
    StrategySightRange: long;
    DamageRatio: long;
    DamagedRatio: long;
    DamageRatio2Increase: long;
    DamageRatio2Decrease: long;
    DamagedRatio2Increase: long;
    DamagedRatio2Decrease: long;
    StreetBattleAdaptation: TerrainAdaptationStat;
    OutdoorBattleAdaptation: TerrainAdaptationStat;
    IndoorBattleAdaptation: TerrainAdaptationStat;
    RegenCost: long;
}

table CharacterStatLimitExcelTable{
    DataList: [CharacterStatLimitExcel];
}

table CharacterStatLimitExcel{
    Id: long;
    TacticEntityType: TacticEntityType;
    StatType: StatType;
    StatMinValue: long;
    StatMaxValue: long;
    StatRatioMinValue: long;
    StatRatioMaxValue: long;
}

table CharacterStatsDetailExcelTable{
    DataList: [CharacterStatsDetailExcel];
}

table CharacterStatsDetailExcel{
    Id: long;
    DetailShowStats: [StatType];
    IsStatsPercent: [bool];
}

table CharacterStatsTransExcelTable{
    DataList: [CharacterStatsTransExcel];
}

table CharacterStatsTransExcel{
    TransSupportStats: StatType;
    TransSupportStatsFactor: int;
}

table CharacterTranscendenceExcelTable{
    DataList: [CharacterTranscendenceExcel];
}

table CharacterTranscendenceExcel{
    CharacterId: long;
    MaxFavorLevel: [int];
    StatBonusRateAttack: [long];
    StatBonusRateHP: [long];
    StatBonusRateHeal: [long];
    RecipeId: [long];
    SkillSlotA: [string];
    SkillSlotB: [string];
    MaxlevelStar: [int];
}

table CharacterWeaponExcelTable{
    DataList: [CharacterWeaponExcel];
}

table CharacterWeaponExcel{
    Id: long;
    ImagePath: string;
    SetRecipe: long;
    StatLevelUpType: StatLevelUpType;
    AttackPower: long;
    AttackPower100: long;
    MaxHP: long;
    MaxHP100: long;
    HealPower: long;
    HealPower100: long;
    Tags: [Tag];
    Unlock: [bool];
    RecipeId: [long];
    MaxLevel: [int];
    LearnSkillSlot: [string];
    StatType: [EquipmentOptionType];
    StatValue: [long];
}

table CharacterWeaponExpBonusExcelTable{
    DataList: [CharacterWeaponExpBonusExcel];
}

table CharacterWeaponExpBonusExcel{
    WeaponType: WeaponType;
    WeaponExpGrowthA: int;
    WeaponExpGrowthB: int;
    WeaponExpGrowthC: int;
    WeaponExpGrowthZ: int;
}

table CharacterWeaponLevelExcelTable{
    DataList: [CharacterWeaponLevelExcel];
}

table CharacterWeaponLevelExcel{
    Level: int;
    Exp: long;
    TotalExp: long;
}

table CheatCodeListExcelTable{
    DataList: [CheatCodeListExcel];
}

table CheatCodeListExcel{
    CheatCode: [string];
    InputTitle: [string];
    Desc: string;
}

table ClanAssistSlotExcelTable{
    DataList: [ClanAssistSlotExcel];
}

table ClanAssistSlotExcel{
    SlotId: long;
    EchelonType: EchelonType;
    SlotNumber: long;
    AssistTermRewardPeriodFromSec: long;
    AssistRewardLimit: long;
    AssistRentRewardDailyMaxCount: long;
    AssistRentalFeeAmount: long;
}

table ClanChattingEmojiExcelTable{
    DataList: [ClanChattingEmojiExcel];
}

table ClanChattingEmojiExcel{
    Id: long;
    TabGroupId: int;
    DisplayOrder: int;
    ImagePathKr: string;
    ImagePathJp: string;
    ImagePathTh: string;
    ImagePathTw: string;
    ImagePathEn: string;
}

table ClanRewardExcelTable{
    DataList: [ClanRewardExcel];
}

table ClanRewardExcel{
    ClanRewardType: ClanRewardType;
    EchelonType: EchelonType;
    RewardParcelType: ParcelType;
    RewardParcelId: long;
    RewardParcelAmount: long;
}

table CombatEmojiExcelTable{
    DataList: [CombatEmojiExcel];
}

table CombatEmojiExcel{
    UniqueId: long;
    EmojiEvent: EmojiEvent;
    OrderOfPriority: int;
    EmojiDuration: bool;
    EmojiReversal: bool;
    EmojiTurnOn: bool;
    ShowEmojiDelay: int;
}

table ConquestCalculateExcelTable{
    DataList: [ConquestCalculateExcel];
}

table ConquestCalculateExcel{
    EventContentId: long;
    CalculateConditionParcelType: ParcelType;
    CalculateConditionParcelUniqueId: long;
    CalculateConditionParcelAmount: long;
}

table ConquestCameraSettingExcelTable{
    DataList: [ConquestCameraSettingExcel];
}

table ConquestCameraSettingExcel{
    Id: long;
    ConquestMapBoundaryOffsetLeft: float;
    ConquestMapBoundaryOffsetRight: float;
    ConquestMapBoundaryOffsetTop: float;
    ConquestMapBoundaryOffsetBottom: float;
    ConquestMapCenterOffsetX: float;
    ConquestMapCenterOffsetY: float;
    CameraAngle: float;
    CameraZoomMax: float;
    CameraZoomMin: float;
    CameraZoomDefault: float;
}

table ConquestErosionExcelTable{
    DataList: [ConquestErosionExcel];
}

table ConquestErosionExcel{
    EventContentId: long;
    Id: long;
    ErosionType: ConquestErosionType;
    Phase: int;
    PhaseAlarm: bool;
    StepIndex: int;
    PhaseStartConditionType: [ConquestConditionType];
    PhaseStartConditionParameter: [string];
    PhaseBeforeExposeConditionType: [ConquestConditionType];
    PhaseBeforeExposeConditionParameter: [string];
    ErosionBattleConditionParcelType: ParcelType;
    ErosionBattleConditionParcelUniqueId: long;
    ErosionBattleConditionParcelAmount: long;
    ConquestRewardId: long;
}

table ConquestErosionUnitExcelTable{
    DataList: [ConquestErosionUnitExcel];
}

table ConquestErosionUnitExcel{
    TilePrefabId: long;
    MassErosionUnitId: long;
    MassErosionUnitRotationY: float;
    IndividualErosionUnitId: long;
    IndividualErosionUnitRotationY: float;
}

table ConquestEventExcelTable{
    DataList: [ConquestEventExcel];
}

table ConquestEventExcel{
    EventContentId: long;
    MainStoryEventContentId: long;
    ConquestEventType: ConquestEventType;
    UseErosion: bool;
    UseUnexpectedEvent: bool;
    UseCalculate: bool;
    UseConquestObject: bool;
    EvnetMapGoalLocalize: string;
    EvnetMapNameLocalize: string;
    MapEnterScenarioGroupId: long;
    EvnetScenarioBG: string;
    ManageUnitChange: int;
    AssistCount: int;
    PlayTimeLimitInSeconds: int;
    AnimationUnitAmountMin: int;
    AnimationUnitAmountMax: int;
    AnimationUnitDelay: float;
    LocalizeUnexpected: string;
    LocalizeErosions: string;
    LocalizeStep: string;
    LocalizeTile: string;
    LocalizeMapInfo: string;
    LocalizeManage: string;
    LocalizeUpgrade: string;
    LocalizeTreasureBox: string;
    IndividualErosionDailyCount: long;
}

table ConquestGroupBonusExcelTable{
    DataList: [ConquestGroupBonusExcel];
}

table ConquestGroupBonusExcel{
    ConquestBonusId: long;
    School_: [School];
    RecommandLocalizeEtcId: uint;
    BonusParcelType: [ParcelType];
    BonusId: [long];
    BonusCharacterCount1: [int];
    BonusPercentage1: [long];
    BonusCharacterCount2: [int];
    BonusPercentage2: [long];
    BonusCharacterCount3: [int];
    BonusPercentage3: [long];
}

table ConquestGroupBuffExcelTable{
    DataList: [ConquestGroupBuffExcel];
}

table ConquestGroupBuffExcel{
    ConquestBuffId: long;
    School_: [School];
    RecommandLocalizeEtcId: uint;
    SkillGroupId: string;
}

table ConquestMapExcelTable{
    DataList: [ConquestMapExcel];
}

table ConquestMapExcel{
    EventContentId: long;
    DevName: string;
    MapDifficulty: StageDifficulty;
    StepIndex: int;
    ConquestMap: string;
    StepEnterScenarioGroupId: long;
    StepOpenConditionType: [ConquestConditionType];
    StepOpenConditionParameter: [string];
    MapGoalLocalize: string;
    StepGoalLocalize: string;
    StepNameLocalize: string;
    ConquestMapBG: string;
    CameraSettingId: long;
}

table ConquestObjectExcelTable{
    DataList: [ConquestObjectExcel];
}

table ConquestObjectExcel{
    Id: long;
    EventContentId: long;
    ConquestObjectType: ConquestObjectType;
    Key: uint;
    Name: string;
    PrefabName: string;
    ConquestRewardParcelType: ParcelType;
    ConquestRewardID: long;
    ConquestRewardAmount: int;
    Disposable: bool;
    StepIndex: int;
    StepObjectCount: int;
}

table ConquestPlayGuideExcelTable{
    DataList: [ConquestPlayGuideExcel];
}

table ConquestPlayGuideExcel{
    Id: long;
    EventContentId: long;
    DisplayOrder: int;
    GuideTitle: string;
    GuideImagePath: string;
    GuideText: string;
}

table ConquestProgressResourceExcelTable{
    DataList: [ConquestProgressResourceExcel];
}

table ConquestProgressResourceExcel{
    Id: long;
    EventContentId: long;
    Group: ConquestProgressType;
    ProgressResource: string;
    VoiceKr: [string];
    VoiceJp: [string];
    VoiceEn: [string];
    VoiceTw: [string];
    VoiceTh: [string];
    ProgressLocalizeCode: string;
}

table ConquestRewardExcelTable{
    DataList: [ConquestRewardExcel];
}

table ConquestRewardExcel{
    GroupId: long;
    RewardTag: RewardTag;
    RewardProb: int;
    RewardParcelType: ParcelType;
    RewardId: long;
    RewardAmount: int;
    IsDisplayed: bool;
}

table ConquestStepExcelTable{
    DataList: [ConquestStepExcel];
}

table ConquestStepExcel{
    EventContentId: long;
    MapDifficulty: StageDifficulty;
    Step: int;
    StepGoalLocalize: string;
    StepEnterScenarioGroupId: long;
    StepEnterItemType: ParcelType;
    StepEnterItemUniqueId: long;
    StepEnterItemAmount: long;
    UnexpectedEventUnitId: [long];
    UnexpectedEventPrefab: string;
    TreasureBoxObjectId: long;
    TreasureBoxCountPerStepOpen: int;
}

table ConquestTileExcelTable{
    DataList: [ConquestTileExcel];
}

table ConquestTileExcel{
    Id: long;
    Name: string;
    EventId: long;
    Step: int;
    PrefabName: string;
    TileNameLocalize: string;
    TileImageName: string;
    Playable: bool;
    TileType: ConquestTileType;
    NotMapFog: bool;
    GroupBonusId: long;
    ConquestCostType: ParcelType;
    ConquestCostId: long;
    ConquestCostAmount: int;
    ManageCostType: ParcelType;
    ManageCostId: long;
    ManageCostAmount: int;
    ConquestRewardId: long;
    MassErosionId: long;
    Upgrade2CostType: ParcelType;
    Upgrade2CostId: long;
    Upgrade2CostAmount: int;
    Upgrade3CostType: ParcelType;
    Upgrade3CostId: long;
    Upgrade3CostAmount: int;
}

table ConquestUnexpectedEventExcelTable{
    DataList: [ConquestUnexpectedEventExcel];
}

table ConquestUnexpectedEventExcel{
    EventContentId: long;
    UnexpectedEventConditionType: ParcelType;
    UnexpectedEventConditionUniqueId: long;
    UnexpectedEventConditionAmount: long;
    UnexpectedEventOccurDailyLimitCount: int;
    UnitCountPerStep: int;
    UnexpectedEventPrefab: [string];
    UnexpectedEventUnitId: [long];
}

table ConquestUnitExcelTable{
    DataList: [ConquestUnitExcel];
}

table ConquestUnitExcel{
    Id: long;
    Key: uint;
    Name: string;
    PrefabName: string;
    StrategyPrefabName: string;
    Scale: float;
    ShieldEffectScale: float;
    UnitFxPrefabName: string;
    PointAnimation: string;
    EnemyType: ConquestEnemyType;
    Team: ConquestTeamType;
    UnitGroup: long;
    PrevUnitGroup: long;
    BattleDuration: long;
    GroundId: long;
    StarGoal: [StarGoalType];
    StarGoalAmount: [int];
    GroupBuffId: long;
    StageEnterCostType: ParcelType;
    StageEnterCostId: long;
    StageEnterCostAmount: int;
    ManageEchelonStageEnterCostType: ParcelType;
    ManageEchelonStageEnterCostId: long;
    ManageEchelonStageEnterCostAmount: int;
    EnterScenarioGroupId: long;
    ClearScenarioGroupId: long;
    ConquestRewardId: long;
    StageTopography: StageTopography;
    RecommandLevel: int;
    TacticRewardExp: long;
    FixedEchelonId: long;
}

table ConstArenaExcelTable{
    DataList: [ConstArenaExcel];
}

table ConstArenaExcel{
    AttackCoolTime: long;
    BattleDuration: long;
    DefenseCoolTime: long;
    TSSStartCoolTime: long;
    EndAlarm: long;
    TimeRewardMaxAmount: long;
    EnterCostType: ParcelType;
    EnterCostId: long;
    TicketCost: long;
    DailyRewardResetTime: string;
    OpenScenarioId: string;
    CharacterSlotHideRank: [long];
    MapSlotHideRank: long;
    RelativeOpponentRankStart: [long];
    RelativeOpponentRankEnd: [long];
    ModifiedStatType: [StatType];
    StatMulFactor: [long];
    StatSumFactor: [long];
    NPCName: [string];
    NPCMainCharacterCount: long;
    NPCSupportCharacterCount: long;
    NPCCharacterSkillLevel: long;
    TimeSpanInDaysForBattleHistory: long;
    HiddenCharacterImagePath: string;
    DefenseVictoryRewardMaxCount: long;
    TopRankerCountLimit: long;
    AutoRefreshIntervalMilliSeconds: long;
    EchelonSettingIntervalMilliSeconds: long;
    SkipAllowedTimeMilliSeconds: long;
    ShowSeasonChangeInfoStartTime: string;
    ShowSeasonChangeInfoEndTime: string;
    ShowSeasonId: long;
}

table ConstAudioExcelTable{
    DataList: [ConstAudioExcel];
}

table ConstAudioExcel{
    DefaultSnapShotName: string;
    BattleSnapShotName: string;
    RaidSnapShotName: string;
    ExSkillCutInSnapShotName: string;
}

table ConstCombatExcelTable{
    DataList: [ConstCombatExcel];
}

table ConstCombatExcel{
    SkillHandCount: int;
    DyingTime: int;
    BuffIconBlinkTime: int;
    ShowBufficonEXSkill: bool;
    ShowBufficonPassiveSkill: bool;
    ShowBufficonExtraPassiveSkill: bool;
    ShowBufficonLeaderSkill: bool;
    ShowBufficonGroundPassiveSkill: bool;
    SuppliesConditionStringId: string;
    PublicSpeechBubbleOffsetX: float;
    PublicSpeechBubbleOffsetY: float;
    PublicSpeechBubbleOffsetZ: float;
    PublicSpeechDuration: float;
    ShowRaidListCount: int;
    MaxRaidTicketCount: long;
    MaxRaidBossSkillSlot: long;
    EngageTimelinePath: string;
    EngageWithSupporterTimelinePath: string;
    VictoryTimelinePath: string;
    TimeLimitAlarm: long;
    EchelonMaxCommonCost: int;
    EchelonInitCommonCost: int;
    SkillSlotCoolTime: long;
    EnemyRegenCost: long;
    ChampionRegenCost: long;
    PlayerRegenCostDelay: long;
    CrowdControlFactor: long;
    RaidOpenScenarioId: string;
    EliminateRaidOpenScenarioId: string;
    DefenceConstA: long;
    DefenceConstB: long;
    DefenceConstC: long;
    DefenceConstD: long;
    AccuracyConstA: long;
    AccuracyConstB: long;
    AccuracyConstC: long;
    AccuracyConstD: long;
    CriticalConstA: long;
    CriticalConstB: long;
    CriticalConstC: long;
    CriticalConstD: long;
    MaxGroupBuffLevel: int;
    EmojiDefaultTime: int;
    TimeLineActionRotateSpeed: long;
    BodyRotateSpeed: long;
    NormalTimeScale: long;
    FastTimeScale: long;
    BulletTimeScale: long;
    UIDisplayDelayAfterSkillCutIn: long;
    UseInitialRangeForCoverMove: bool;
    SlowTimeScale: long;
    AimIKMinDegree: float;
    AimIKMaxDegree: float;
    MinimumClearTime: int;
    MinimumClearLevelGap: int;
    CheckCheaterMaxUseCostNonArena: int;
    CheckCheaterMaxUseCostArena: int;
    AllowedMaxTimeScale: long;
    RandomAnimationOutput: long;
    SummonedTeleportDistance: long;
    ArenaMinimumClearTime: int;
    WORLDBOSSBATTLELITTLE: long;
    WORLDBOSSBATTLELITTLETw: long;
    WORLDBOSSBATTLELITTLEAsia: long;
    WORLDBOSSBATTLELITTLENa: long;
    WORLDBOSSBATTLELITTLEGlobal: long;
    WORLDBOSSBATTLEMIDDLE: long;
    WORLDBOSSBATTLEMIDDLETw: long;
    WORLDBOSSBATTLEMIDDLEAsia: long;
    WORLDBOSSBATTLEMIDDLENa: long;
    WORLDBOSSBATTLEMIDDLEGlobal: long;
    WORLDBOSSBATTLEHIGH: long;
    WORLDBOSSBATTLEHIGHTw: long;
    WORLDBOSSBATTLEHIGHAsia: long;
    WORLDBOSSBATTLEHIGHNa: long;
    WORLDBOSSBATTLEHIGHGlobal: long;
    WORLDBOSSBATTLEVERYHIGH: long;
    WORLDBOSSBATTLEVERYHIGHTw: long;
    WORLDBOSSBATTLEVERYHIGHAsia: long;
    WORLDBOSSBATTLEVERYHIGHNa: long;
    WORLDBOSSBATTLEVERYHIGHGlobal: long;
    WorldRaidAutoSyncTermSecond: long;
    WorldRaidBossHpDecreaseTerm: long;
    WorldRaidBossParcelReactionDelay: long;
    RaidRankingJumpMinimumWaitingTime: long;
    EffectTeleportDistance: float;
    AuraExitThresholdMargin: long;
}

table ConstCommonExcelTable{
    DataList: [ConstCommonExcel];
}

table ConstCommonExcel{
    CampaignMainStageMaxRank: int;
    CampaignMainStageBestRecord: int;
    HardAdventurePlayCountRecoverDailyNumber: int;
    HardStageCount: int;
    TacticRankClearTime: int;
    BaseTimeScale: long;
    GachaPercentage: int;
    AcademyFavorZoneId: long;
    CafePresetSlotCount: int;
    CafeMonologueIntervalMillisec: long;
    CafeMonologueDefaultDuration: long;
    CafeBubbleIdleDurationMilliSec: long;
    FindGiftTimeLimit: int;
    CafeVisitProbabilityBase: int;
    CafeVisitProbabilityTagBonus: int;
    CafeAutoChargePeriodInMsc: int;
    CafeProductionDecimalPosition: int;
    CafeSetGroupApplyCount: int;
    WeekDungeonFindGiftRewardLimitCount: int;
    StageFailedCurrencyRefundRate: int;
    EnterDeposit: int;
    AccountMaxLevel: int;
    MainSquadExpBonus: int;
    SupportSquadExpBonus: int;
    AccountExpRatio: int;
    MissionToastLifeTime: int;
    ExpItemInsertLimit: int;
    ExpItemInsertAccelTime: int;
    CharacterLvUpCoefficient: int;
    EquipmentLvUpCoefficient: int;
    ExpEquipInsertLimit: int;
    EquipLvUpCoefficient: int;
    NicknameLength: int;
    CraftDuration: [int];
    CraftLimitTime: int;
    ShiftingCraftDuration: [int];
    ShiftingCraftTicketConsumeAmount: int;
    ShiftingCraftSlotMaxCapacity: int;
    CraftTicketItemUniqueId: int;
    CraftTicketConsumeAmount: int;
    AcademyEnterCostType: ParcelType;
    AcademyEnterCostId: long;
    AcademyTicketCost: int;
    MassangerMessageExpireDay: int;
    CraftLeafNodeGenerateLv1Count: int;
    CraftLeafNodeGenerateLv2Count: int;
    TutorialGachaShopId: int;
    BeforehandGachaShopId: int;
    TutorialGachaGoodsId: int;
    EquipmentSlotOpenLevel: [int];
    ScenarioAutoDelayMillisec: float;
    JoinOrCreateClanCoolTimeFromHour: long;
    ClanMaxMember: long;
    ClanSearchResultCount: long;
    ClanMaxApplicant: long;
    ClanRejoinCoolTimeFromSecond: long;
    ClanWordBalloonMaxCharacter: int;
    CallNameRenameCoolTimeFromHour: long;
    CallNameMinimumLength: long;
    CallNameMaximumLength: long;
    LobbyToScreenModeWaitTime: long;
    ScreenshotToLobbyButtonHideDelay: long;
    PrologueScenarioID01: long;
    PrologueScenarioID02: long;
    TutorialHardStage11: long;
    TutorialSpeedButtonStage: long;
    TutorialCharacterDefaultCount: long;
    TutorialShopCategoryType: ShopCategoryType;
    AdventureStrategyPlayTimeLimitInSeconds: long;
    WeekDungoenTacticPlayTimeLimitInSeconds: long;
    RaidTacticPlayTimeLimitInSeconds: long;
    RaidOpponentListAmount: long;
    CraftBaseGoldRequired: [long];
    PostExpiredDayAttendance: int;
    PostExpiredDayInventoryOverflow: int;
    PostExpiredDayGameManager: int;
    UILabelCharacterWrap: string;
    RequestTimeOut: float;
    MailStorageSoftCap: int;
    MailStorageHardCap: int;
    ClearDeckStorageSize: int;
    ClearDeckNoStarViewCount: int;
    ClearDeck1StarViewCount: int;
    ClearDeck2StarViewCount: int;
    ClearDeck3StarViewCount: int;
    ExSkillLevelMax: int;
    PublicSkillLevelMax: int;
    PassiveSkillLevelMax: int;
    ExtraPassiveSkillLevelMax: int;
    AccountCommentMaxLength: int;
    FormationCollider01OffsetX: long;
    FormationCollider01OffsetY: long;
    FormationCollider01OffsetZ: long;
    FormationCollider01SizeX: long;
    FormationCollider01SizeY: long;
    FormationCollider01SizeZ: long;
    FormationCollider02OffsetX: long;
    FormationCollider02OffsetY: long;
    FormationCollider02OffsetZ: long;
    FormationCollider02SizeX: long;
    FormationCollider02SizeY: long;
    FormationCollider02SizeZ: long;
    FormationCollider03OffsetX: long;
    FormationCollider03OffsetY: long;
    FormationCollider03OffsetZ: long;
    FormationCollider03SizeX: long;
    FormationCollider03SizeY: long;
    FormationCollider03SizeZ: long;
    ShowFurnitureTag: bool;
    CafeSummonCoolTimeFromHour: int;
    LimitedStageDailyClearCount: long;
    LimitedStageEntryTimeLimit: long;
    LimitedStageEntryTimeBuffer: long;
    LimitedStagePointAmount: long;
    LimitedStagePointPerApMin: long;
    LimitedStagePointPerApMax: long;
    AccountLinkReward: int;
    MonthlyProductCheckDays: int;
    WeaponLvUpCoefficient: int;
    ShowRaidMyListCount: int;
    MaxLevelExpMasterCoinRatio: int;
    RaidEnterCostType: ParcelType;
    RaidEnterCostId: long;
    RaidTicketCost: long;
    TimeAttackDungeonScenarioId: string;
    TimeAttackDungoenPlayCountPerTicket: int;
    TimeAttackDungeonEnterCostType: ParcelType;
    TimeAttackDungeonEnterCostId: long;
    TimeAttackDungeonEnterCost: long;
    ClanLeaderTransferLastLoginLimit: long;
    MonthlyProductRepurchasePopupLimit: int;
    CommonFavorItemTags: [Tag];
    MaxApMasterCoinPerWeek: long;
    CraftOpenExpTier1: long;
    CraftOpenExpTier2: long;
    CraftOpenExpTier3: long;
    CharacterEquipmentGearSlot: long;
    BirthDayDDay: int;
    RecommendedFriendsLvDifferenceLimit: int;
    DDosDetectCount: int;
    DDosCheckIntervalInSeconds: int;
    MaxFriendsCount: int;
    MaxFriendsRequest: int;
    FriendsSearchRequestCount: int;
    FriendsMaxApplicant: int;
    IdCardDefaultCharacterId: long;
    IdCardDefaultBgId: long;
    WorldRaidGemEnterCost: long;
    WorldRaidGemEnterAmout: long;
    FriendIdCardCommentMaxLength: long;
    FormationPresetNumberOfEchelonTab: int;
    FormationPresetNumberOfEchelon: int;
    FormationPresetRecentNumberOfEchelon: int;
    FormationPresetEchelonTabTextLength: int;
    FormationPresetEchelonSlotTextLength: int;
    CallnameLengthEn: int;
    CallnameLengthKr: int;
    NicknameLengthKr: int;
    ClanNameLength: int;
    CafePresetEditNameLength: int;
    FormationPresetEchelonTabTextLengthKr: int;
    FormationPresetEchelonSlotTextLengthKr: int;
    CharProfileRowIntervalKr: int;
    CharProfileRowIntervalJp: int;
    CharProfilePopupRowIntervalKr: int;
    CharProfilePopupRowIntervalJp: int;
    LowMemorySizeGL: long;
    BeforehandGachaCount: int;
    BeforehandGachaGroupId: int;
    RenewalDisplayOrderDay: int;
    EmblemDefaultId: long;
}

table ConstConquestExcelTable{
    DataList: [ConstConquestExcel];
}

table ConstConquestExcel{
    ManageUnitChange: int;
    AssistCount: int;
    PlayTimeLimitInSeconds: int;
    AnimationUnitAmountMin: int;
    AnimationUnitAmountMax: int;
    AnimationUnitDelay: float;
}

table ConstEventCommonExcelTable{
    DataList: [ConstEventCommonExcel];
}

table ConstEventCommonExcel{
    EventContentHardStageCount: int;
    EventStrategyPlayTimeLimitInSeconds: long;
    SubEventChangeLimitSeconds: long;
    SubEventInstantClear: bool;
    CardShopProbWeightCount: long;
    CardShopProbWeightRarity: Rarity;
}

table ConstMiniGameShootingExcelTable{
    DataList: [ConstMiniGameShootingExcel];
}

table ConstMiniGameShootingExcel{
    NormalStageId: long;
    NormalSectionCount: int;
    HardStageId: long;
    HardSectionCount: int;
    LeftPlayerCharacterId: long;
    RightPlayerCharacterId: long;
    HiddenPlayerCharacterId: long;
    CameraSmoothTime: float;
    SpawnEffectPath: string;
    WaitTimeAfterSpawn: float;
}

table ConstMinigameTBGExcelTable{
    DataList: [ConstMinigameTBGExcel];
}

table ConstMinigameTBGExcel{
    ConquestMapBoundaryOffsetLeft: float;
    ConquestMapBoundaryOffsetRight: float;
    ConquestMapBoundaryOffsetTop: float;
    ConquestMapBoundaryOffsetBottom: float;
    ConquestMapCenterOffsetX: float;
    ConquestMapCenterOffsetY: float;
    CameraAngle: float;
    CameraZoomMax: float;
    CameraZoomMin: float;
    CameraZoomDefault: float;
    ThemaLoadingProgressTime: float;
    MapAllyRotation: float;
    AniAllyBattleAttack: string;
    EffectAllyBattleAttack: string;
    EffectAllyBattleDamage: string;
    AniEnemyBattleAttack: string;
    EffectEnemyBattleAttack: string;
    EffectEnemyBattleDamage: string;
    EncounterAllyRotation: float;
    EncounterEnemyRotation: float;
    EncounterRewardReceiveIndex: int;
}

table ConstNewbieContentExcelTable{
    DataList: [ConstNewbieContentExcel];
}

table ConstNewbieContentExcel{
    NewbieGachaReleaseDate: string;
    NewbieGachaCheckDays: int;
    NewbieGachaTokenGraceTime: int;
    NewbieAttendanceReleaseDate: string;
    NewbieAttendanceStartableEndDay: int;
    NewbieAttendanceEndDay: int;
}

table ConstStrategyExcelTable{
    DataList: [ConstStrategyExcel];
}

table ConstStrategyExcel{
    HexaMapBoundaryOffset: float;
    HexaMapStartCameraOffset: float;
    CameraZoomMax: float;
    CameraZoomMin: float;
    CameraZoomDefault: float;
    HealCostType: CurrencyTypes;
    HealCostAmount: [long];
    CanHealHpRate: int;
    PlayTimeLimitInSeconds: long;
    AdventureEchelonCount: int;
    RaidEchelonCount: int;
    DefaultEchelonCount: int;
    EventContentEchelonCount: int;
    TimeAttackDungeonEchelonCount: int;
    WorldRaidEchelonCount: int;
    TacticSkipClearTimeSeconds: int;
    TacticSkipFramePerSecond: int;
    ConquestEchelonCount: int;
    StoryEchelonCount: int;
    MultiSweepPresetCount: int;
    MultiSweepPresetNameMaxLength: int;
}

table ContentEnterCostReduceExcelTable{
    DataList: [ContentEnterCostReduceExcel];
}

table ContentEnterCostReduceExcel{
    EnterCostReduceGroupId: long;
    ContentType: ContentType;
    StageId: long;
    ReduceEnterCostType: ParcelType;
    ReduceEnterCostId: long;
    ReduceAmount: long;
}

table ContentsFeverExcelTable{
    DataList: [ContentsFeverExcel];
}

table ContentsFeverExcel{
    ConditionContent: FeverBattleType;
    SkillFeverCheckCondition: SkillPriorityCheckTarget;
    SkillCostFever: long;
    FeverStartTime: long;
    FeverDurationTime: long;
}

table ContentsScenarioExcelTable{
    DataList: [ContentsScenarioExcel];
}

table ContentsScenarioExcel{
    Id: uint;
    LocalizeId: uint;
    ScenarioContentType: ScenarioContentType;
    ScenarioGroupId: [long];
}

table ContentsShortcutExcelTable{
    DataList: [ContentsShortcutExcel];
}

table ContentsShortcutExcel{
    UniqueId: long;
    ContentType: ContentType;
    EventContentId: long;
    ScenarioModeVolume: long;
    ScenarioModeChapter: long;
    ShortcutOpenTime: string;
    ShortcutCloseTime: string;
    ConditionContentId: long;
    ConquestMapDifficulty: StageDifficulty;
    ConquestStepIndex: int;
    ShortcutContentId: long;
    ShortcutUIName: [string];
    Localize: string;
}

table CostumeExcelTable{
    DataList: [CostumeExcel];
}

table CostumeExcel{
    CostumeGroupId: long;
    CostumeUniqueId: long;
    DevName: string;
    ProductionStep: ProductionStep;
    IsDefault: bool;
    CollectionVisible: bool;
    ReleaseDate: string;
    CollectionVisibleStartDate: string;
    CollectionVisibleEndDate: string;
    Rarity: Rarity;
    CharacterSkillListGroupId: long;
    SpineResourceName: string;
    SpineResourceNameDiorama: string;
    SpineResourceNameDioramaForFormConversion: string;
    EntityMaterialType: EntityMaterialType;
    ModelPrefabName: string;
    CafeModelPrefabName: string;
    EchelonModelPrefabName: string;
    StrategyModelPrefabName: string;
    TextureDir: string;
    TextureEchelon: string;
    CollectionTexturePath: string;
    CollectionBGTexturePath: string;
    UseObjectHPBAR: bool;
    TextureBoss: string;
    TextureSkillCard: [string];
    TextureSkillCardForFormConversion: string;
    DisplayEnemyInfo: bool;
    InformationPacel: string;
    AnimationSSR: string;
    EnterStrategyAnimationName: string;
    AnimationValidator: bool;
}

table CouponStuffExcelTable{
    DataList: [CouponStuffExcel];
}

table CouponStuffExcel{
    StuffId: long;
    ParcelType: ParcelType;
    ParcelId: long;
    LimitAmount: int;
    CouponStuffNameLocalizeKey: string;
}

table CumulativeTimeRewardExcelTable{
    DataList: [CumulativeTimeRewardExcel];
}

table CumulativeTimeRewardExcel{
    Id: long;
    Description: string;
    StartDate: string;
    EndDate: string;
    TimeCondition: [long];
    RewardParcelType: [ParcelType];
    RewardId: [long];
    RewardAmount: [int];
}

table CurrencyExcelTable{
    DataList: [CurrencyExcel];
}

table CurrencyExcel{
    ID: long;
    LocalizeEtcId: uint;
    CurrencyType: CurrencyTypes;
    CurrencyName: string;
    Icon: string;
    Rarity: Rarity;
    AutoChargeMsc: int;
    AutoChargeAmount: int;
    CurrencyOverChargeType: CurrencyOverChargeType;
    CurrencyAdditionalChargeType: CurrencyAdditionalChargeType;
    ChargeLimit: long;
    OverChargeLimit: long;
    SpriteName: string;
    DailyRefillType: DailyRefillType;
    DailyRefillAmount: long;
    DailyRefillTime: [long];
}

table DefaultCharacterExcelTable{
    DataList: [DefaultCharacterExcel];
}

table DefaultCharacterExcel{
    CharacterId: long;
    FavoriteCharacter: bool;
    Level: int;
    Exp: int;
    FavorExp: int;
    FavorRank: int;
    StarGrade: int;
    ExSkillLevel: int;
    PassiveSkillLevel: int;
    ExtraPassiveSkillLevel: int;
    CommonSkillLevel: int;
    LeaderSkillLevel: int;
}

table DefaultEchelonExcelTable{
    DataList: [DefaultEchelonExcel];
}

table DefaultEchelonExcel{
    EchlonId: int;
    LeaderId: long;
    MainId: [long];
    SupportId: [long];
    TssId: long;
}

table DefaultFurnitureExcelTable{
    DataList: [DefaultFurnitureExcel];
}

table DefaultFurnitureExcel{
    Id: long;
    Location: FurnitureLocation;
    PositionX: float;
    PositionY: float;
    Rotation: float;
}

table DefaultMailExcelTable{
    DataList: [DefaultMailExcel];
}

table DefaultMailExcel{
    Id: long;
    LocalizeCodeId: uint;
    MailType: MailType;
    MailSendPeriodFrom: string;
    MailSendPeriodTo: string;
    RewardParcelType: [ParcelType];
    RewardParcelId: [long];
    RewardParcelAmount: [long];
}

table DefaultParcelExcelTable{
    DataList: [DefaultParcelExcel];
}

table DefaultParcelExcel{
    ParcelType: ParcelType;
    ParcelId: long;
    ParcelAmount: long;
}

table EchelonConstraintExcelTable{
    DataList: [EchelonConstraintExcel];
}

table EchelonConstraintExcel{
    GroupId: long;
    IsWhiteList: bool;
    CharacterId: [long];
    PersonalityId: [long];
    WeaponType: WeaponType;
    School: School;
    Club: Club;
    Role: TacticRole;
}

table EliminateRaidRankingRewardExcelTable{
    DataList: [EliminateRaidRankingRewardExcel];
}

table EliminateRaidRankingRewardExcel{
    RankingRewardGroupId: long;
    Id: long;
    RankStart: long;
    RankEnd: long;
    RankStartTw: long;
    RankEndTw: long;
    RankStartAsia: long;
    RankEndAsia: long;
    RankStartNa: long;
    RankEndNa: long;
    RankStartGlobal: long;
    RankEndGlobal: long;
    PercentRankStart: long;
    PercentRankEnd: long;
    Tier: int;
    RewardParcelType: [ParcelType];
    RewardParcelUniqueId: [long];
    RewardParcelUniqueName: [string];
    RewardParcelAmount: [long];
}

table EliminateRaidSeasonManageExcelTable{
    DataList: [EliminateRaidSeasonManageExcel];
}

table EliminateRaidSeasonManageExcel{
    SeasonId: long;
    SeasonDisplay: long;
    SeasonStartData: string;
    SeasonEndData: string;
    SettlementEndDate: string;
    LobbyTableBGPath: string;
    LobbyScreenBGPath: string;
    OpenRaidBossGroup01: string;
    OpenRaidBossGroup02: string;
    OpenRaidBossGroup03: string;
    RankingRewardGroupId: long;
    MaxSeasonRewardGauage: int;
    StackedSeasonRewardGauge: [long];
    SeasonRewardId: [long];
    LimitedRewardIdNormal: long;
    LimitedRewardIdHard: long;
    LimitedRewardIdVeryhard: long;
    LimitedRewardIdHardcore: long;
    LimitedRewardIdExtreme: long;
    LimitedRewardIdInsane: long;
    LimitedRewardIdTorment: long;
}

table EliminateRaidStageExcelTable{
    DataList: [EliminateRaidStageExcel];
}

table EliminateRaidStageExcel{
    Id: long;
    UseBossIndex: bool;
    UseBossAIPhaseSync: bool;
    RaidBossGroup: string;
    RaidEnterCostType: ParcelType;
    RaidEnterCostId: long;
    RaidEnterCostAmount: int;
    BossSpinePath: string;
    PortraitPath: string;
    BGPath: string;
    RaidCharacterId: long;
    BossCharacterId: [long];
    Difficulty: Difficulty;
    DifficultyOpenCondition: bool;
    IsOpen: bool;
    MaxPlayerCount: long;
    RaidRoomLifeTime: int;
    BattleDuration: long;
    GroundId: long;
    GroundDevName: string;
    EnterTimeLine: string;
    TacticEnvironment: TacticEnvironment;
    SeasonDamageRatio: int;
    DefaultClearScore: long;
    MaximumScore: long;
    PerSecondMinusScore: long;
    HPPercentScore: long;
    MinimumAcquisitionScore: long;
    MaximumAcquisitionScore: long;
    RaidRewardGroupId: long;
    RaidRewardDevName: string;
    BattleReadyTimelinePath: [string];
    BattleReadyTimelinePhaseStart: [int];
    BattleReadyTimelinePhaseEnd: [int];
    VictoryTimelinePath: string;
    PhaseChangeTimelinePath: string;
    TimeLinePhase: long;
    EnterScenarioKey: uint;
    ClearScenarioKey: uint;
    InitSupplyCount: int;
    ShowSkillCard: bool;
    BossBGInfoKey: uint;
}

table EliminateRaidStageLimitedRewardExcelTable{
    DataList: [EliminateRaidStageLimitedRewardExcel];
}

table EliminateRaidStageLimitedRewardExcel{
    LimitedRewardId: long;
    LimitedRewardParcelType: [ParcelType];
    LimitedRewardParcelUniqueId: [long];
    LimitedRewardAmount: [long];
}

table EliminateRaidStageRewardExcelTable{
    DataList: [EliminateRaidStageRewardExcel];
}

table EliminateRaidStageRewardExcel{
    GroupId: long;
    IsClearStageRewardHideInfo: bool;
    ClearStageRewardProb: long;
    ClearStageRewardParcelType: ParcelType;
    ClearStageRewardParcelUniqueID: long;
    ClearStageRewardParcelUniqueName: string;
    ClearStageRewardAmount: long;
}

table EliminateRaidStageSeasonRewardExcelTable{
    DataList: [EliminateRaidStageSeasonRewardExcel];
}

table EliminateRaidStageSeasonRewardExcel{
    SeasonRewardId: long;
    SeasonRewardParcelType: [ParcelType];
    SeasonRewardParcelUniqueId: [long];
    SeasonRewardParcelUniqueName: [string];
    SeasonRewardAmount: [long];
}

table EmblemExcelTable{
    DataList: [EmblemExcel];
}

table EmblemExcel{
    Id: long;
    Category: EmblemCategory;
    Rarity: Rarity;
    DisplayOrder: long;
    LocalizeEtcId: uint;
    LocalizeCodeId: uint;
    UseAtLocalizeId: long;
    EmblemTextVisible: bool;
    IconPath: string;
    EmblemIconPath: string;
    EmblemIconBGPath: string;
    EmblemBGPathJp: string;
    EmblemBGPathKr: string;
    EmblemBGPathTh: string;
    EmblemBGPathTw: string;
    EmblemBGPathEn: string;
    DisplayType: EmblemDisplayType;
    DisplayStartDate: string;
    DisplayEndDate: string;
    DislpayFavorLevel: int;
    CheckPassType: EmblemCheckPassType;
    EmblemParameter: long;
    CheckPassCount: long;
}

table EmoticonSpecialExcelTable{
    DataList: [EmoticonSpecialExcel];
}

table EmoticonSpecialExcel{
    UniqueId: long;
    CharacterUniqueId: long;
    Random: string;
}

table EquipmentExcelTable{
    DataList: [EquipmentExcel];
}

table EquipmentExcel{
    Id: long;
    EquipmentCategory: EquipmentCategory;
    Rarity: Rarity;
    LocalizeEtcId: uint;
    Wear: bool;
    MaxLevel: int;
    RecipeId: int;
    TierInit: long;
    NextTierEquipment: long;
    StackableMax: int;
    Icon: string;
    ImageName: string;
    Tags: [Tag];
    CraftQualityTier0: long;
    CraftQualityTier1: long;
    CraftQualityTier2: long;
    ShiftingCraftQuality: long;
    ShopCategory: [ShopCategoryType];
    ShortcutTypeId: long;
}

table EquipmentLevelExcelTable{
    DataList: [EquipmentLevelExcel];
}

table EquipmentLevelExcel{
    Level: int;
    TierLevelExp: [long];
    TotalExp: [long];
}

table EquipmentStatExcelTable{
    DataList: [EquipmentStatExcel];
}

table EquipmentStatExcel{
    EquipmentId: long;
    StatLevelUpType: StatLevelUpType;
    StatType: [EquipmentOptionType];
    MinStat: [long];
    MaxStat: [long];
    LevelUpInsertLimit: int;
    LevelUpFeedExp: long;
    LevelUpFeedCostCurrency: CurrencyTypes;
    LevelUpFeedCostAmount: long;
    EquipmentCategory: EquipmentCategory;
    LevelUpFeedAddExp: long;
    DefaultMaxLevel: int;
    TranscendenceMax: int;
    DamageFactorGroupId: string;
}

table EventContentArchiveBannerOffsetExcelTable{
    DataList: [EventContentArchiveBannerOffsetExcel];
}

table EventContentArchiveBannerOffsetExcel{
    EventContentId: long;
    OffsetX: float;
    OffsetY: float;
    ScaleX: float;
    ScaleY: float;
}

table EventContentBoxGachaElementExcelTable{
    DataList: [EventContentBoxGachaElementExcel];
}

table EventContentBoxGachaElementExcel{
    EventContentId: long;
    Id: long;
    Round: long;
    GroupId: long;
}

table EventContentBoxGachaManageExcelTable{
    DataList: [EventContentBoxGachaManageExcel];
}

table EventContentBoxGachaManageExcel{
    EventContentId: long;
    Round: long;
    GoodsId: long;
    IsLoop: bool;
}

table EventContentBoxGachaShopExcelTable{
    DataList: [EventContentBoxGachaShopExcel];
}

table EventContentBoxGachaShopExcel{
    EventContentId: long;
    GroupId: long;
    GroupElementAmount: long;
    Round: long;
    IsLegacy: bool;
    IsPrize: bool;
    GoodsId: [long];
    DisplayOrder: long;
}

table EventContentBuffExcelTable{
    DataList: [EventContentBuffExcel];
}

table EventContentBuffExcel{
    EventContentBuffId: long;
    IsBuff: bool;
    CharacterTag: Tag;
    EnumType: EventContentBuffFindRule;
    EnumTypeValue: [string];
    SkillGroupId: string;
    IconPath: string;
    SpriteName: string;
    BuffDescriptionLocalizeCodeId: string;
}

table EventContentBuffGroupExcelTable{
    DataList: [EventContentBuffGroupExcel];
}

table EventContentBuffGroupExcel{
    EventContentId: long;
    BuffContentId: long;
    BuffGroupId: long;
    BuffGroupNameLocalizeCodeId: string;
    EventContentBuffId1: long;
    BuffNameLocalizeCodeId1: string;
    BuffDescriptionIconPath1: string;
    EventContentBuffId2: long;
    BuffNameLocalizeCodeId2: string;
    BuffDescriptionIconPath2: string;
    EventContentDebuffId: long;
    DebuffNameLocalizeCodeId: string;
    DeBuffDescriptionIconPath: string;
    BuffGroupProb: long;
}

table EventContentCardExcelTable{
    DataList: [EventContentCardExcel];
}

table EventContentCardExcel{
    CardGroupId: int;
    EventContentId: long;
    LocalizeEtcId: uint;
    IconPath: string;
    BackIconPath: string;
    RewardParcelType: [ParcelType];
    RewardParcelId: [long];
}

table EventContentCardShopExcelTable{
    DataList: [EventContentCardShopExcel];
}

table EventContentCardShopExcel{
    EventContentId: long;
    Id: long;
    Rarity: Rarity;
    CostGoodsId: long;
    CardGroupId: int;
    IsLegacy: bool;
    RefreshGroup: int;
    Prob: int;
    ProbWeight1: int;
    RewardParcelType: [ParcelType];
    RewardParcelId: [long];
    RewardParcelAmount: [long];
}

table EventContentChangeExcelTable{
    DataList: [EventContentChangeExcel];
}

table EventContentChangeExcel{
    EventContentId: long;
    ChangeCount: long;
    IsLast: bool;
    RewardParcelType: ParcelType;
    RewardId: long;
    RewardAmount: int;
    ChangeCostType: ParcelType;
    ChangeCostId: long;
    ChangeCostAmount: int;
}

table EventContentChangeScenarioExcelTable{
    DataList: [EventContentChangeScenarioExcel];
}

table EventContentChangeScenarioExcel{
    EventContentId: long;
    ChangeType: EventChangeType;
    ChangeCount: long;
    ScenarioGroupId: long;
}

table EventContentCharacterBonusExcelTable{
    DataList: [EventContentCharacterBonusExcel];
}

table EventContentCharacterBonusExcel{
    EventContentId: long;
    CharacterId: long;
    EventContentItemType_: [EventContentItemType];
    BonusPercentage: [long];
}

table EventContentCollectionExcelTable{
    DataList: [EventContentCollectionExcel];
}

table EventContentCollectionExcel{
    Id: long;
    EventContentId: long;
    GroupId: long;
    UnlockConditionType: EventCollectionUnlockType;
    UnlockConditionParameter: long;
    UnlockConditionCount: long;
    IsObject: bool;
    IsHorizon: bool;
    EmblemResource: string;
    ThumbResource: string;
    FullResource: string;
    LocalizeEtcId: uint;
    SubNameLocalizeCodeId: string;
}

table EventContentCurrencyItemExcelTable{
    DataList: [EventContentCurrencyItemExcel];
}

table EventContentCurrencyItemExcel{
    EventContentId: long;
    EventContentItemType: EventContentItemType;
    ItemUniqueId: long;
}

table EventContentDebuffRewardExcelTable{
    DataList: [EventContentDebuffRewardExcel];
}

table EventContentDebuffRewardExcel{
    EventContentId: long;
    EventStageId: long;
    EventContentItemType: EventContentItemType;
    RewardPercentage: long;
}

table EventContentDiceRaceEffectExcelTable{
    DataList: [EventContentDiceRaceEffectExcel];
}

table EventContentDiceRaceEffectExcel{
    EventContentId: long;
    EventContentDiceRaceResultType: EventContentDiceRaceResultType;
    IsDiceResult: bool;
    AniClip: string;
    VoiceClips: [string];
}

table EventContentDiceRaceExcelTable{
    DataList: [EventContentDiceRaceExcel];
}

table EventContentDiceRaceExcel{
    EventContentId: long;
    DiceCostGoodsId: long;
    SkipableLap: int;
    DiceRacePawnPrefab: string;
    IsUsingFixedDice: bool;
    DiceRaceEventType: [string];
}

table EventContentDiceRaceNodeExcelTable{
    DataList: [EventContentDiceRaceNodeExcel];
}

table EventContentDiceRaceNodeExcel{
    EventContentId: long;
    NodeId: long;
    EventContentDiceRaceNodeType: EventContentDiceRaceNodeType;
    MoveForwardTypeArg: int;
    RewardParcelType: [ParcelType];
    RewardParcelId: [long];
    RewardAmount: [long];
}

table EventContentDiceRaceProbExcelTable{
    DataList: [EventContentDiceRaceProbExcel];
}

table EventContentDiceRaceProbExcel{
    EventContentId: long;
    EventContentDiceRaceResultType: EventContentDiceRaceResultType;
    CostItemId: long;
    CostItemAmount: int;
    DiceResult: int;
    Prob: int;
}

table EventContentDiceRaceTotalRewardExcelTable{
    DataList: [EventContentDiceRaceTotalRewardExcel];
}

table EventContentDiceRaceTotalRewardExcel{
    EventContentId: long;
    RewardID: long;
    RequiredLapFinishCount: int;
    DisplayLapFinishCount: int;
    RewardParcelType: [ParcelType];
    RewardParcelId: [long];
    RewardParcelAmount: [long];
}

table EventContentExcelTable{
    DataList: [EventContentExcel];
}

table EventContentExcel{
    Id: long;
    DevName: string;
    EventContentId: long;
    BgImagePath: string;
}

table EventContentFortuneGachaExcelTable{
    DataList: [EventContentFortuneGachaExcel];
}

table EventContentFortuneGachaExcel{
    FortuneGachaGroupId: int;
    LocalizeEtcId: uint;
    IconPath: string;
}

table EventContentFortuneGachaModifyExcelTable{
    DataList: [EventContentFortuneGachaModifyExcel];
}

table EventContentFortuneGachaModifyExcel{
    EventContentId: int;
    TargetGrade: int;
    ProbModifyStartCount: int;
    UsePrefabName: string;
    BucketImagePath: string;
    ShopBgImagePath: string;
}

table EventContentFortuneGachaShopExcelTable{
    DataList: [EventContentFortuneGachaShopExcel];
}

table EventContentFortuneGachaShopExcel{
    EventContentId: long;
    Id: long;
    Grade: int;
    CostGoodsId: long;
    IsLegacy: bool;
    FortuneGachaGroupId: int;
    Prob: int;
    ProbModifyValue: int;
    ProbModifyLimit: int;
    RewardParcelType: [ParcelType];
    RewardParcelId: [long];
    RewardParcelAmount: [long];
}

table EventContentLobbyMenuExcelTable{
    DataList: [EventContentLobbyMenuExcel];
}

table EventContentLobbyMenuExcel{
    EventContentId: long;
    EventContentType: EventContentType;
    IconSpriteName: string;
    ButtonText: string;
    DisplayOrder: int;
    IconOffsetX: float;
    IconOffsetY: float;
    ReddotSpriteName: string;
}

table EventContentLocationExcelTable{
    DataList: [EventContentLocationExcel];
}

table EventContentLocationExcel{
    EventContentId: long;
    Id: long;
    LocalizeEtcId: uint;
    PrefabPath: string;
    LocationResetScheduleCount: int;
    ScheduleEventPointCostParcelType: ParcelType;
    ScheduleEventPointCostParcelId: long;
    ScheduleEventPointCostParcelAmount: long;
    RewardParcelType: ParcelType;
    RewardParcelId: long;
    InformationGroupId: long;
}

table EventContentLocationRewardExcelTable{
    DataList: [EventContentLocationRewardExcel];
}

table EventContentLocationRewardExcel{
    Location: string;
    ScheduleGroupId: long;
    OrderInGroup: long;
    Id: long;
    ProgressTexture: string;
    VoiceClipsKr: [string];
    VoiceClipsJp: [string];
    VoiceClipsEn: [string];
    VoiceClipsTw: [string];
    VoiceClipsTh: [string];
    LocalizeEtcId: uint;
    LocationRank: long;
    FavorExp: long;
    SecretStoneAmount: long;
    SecretStoneProb: long;
    ExtraFavorExp: long;
    ExtraFavorExpProb: long;
    ExtraRewardParcelType: [ParcelType];
    ExtraRewardParcelId: [long];
    ExtraRewardAmount: [long];
    ExtraRewardProb: [long];
    IsExtraRewardDisplayed: [bool];
    RewardParcelType: [ParcelType];
    RewardParcelId: [long];
    RewardAmount: [long];
}

table EventContentMeetupExcelTable{
    DataList: [EventContentMeetupExcel];
}

table EventContentMeetupExcel{
    Id: long;
    EventContentId: long;
    CharacterId: long;
    ConditionScenarioGroupId: long;
    ActiveConditionEventContentStageId: [long];
}

table EventContentMiniEventShortCutExcelTable{
    DataList: [EventContentMiniEventShortCutExcel];
}

table EventContentMiniEventShortCutExcel{
    Id: int;
    LocalizeEtcId: uint;
    ShorcutContentType: EventTargetType;
}

table EventContentMiniEventTokenExcelTable{
    DataList: [EventContentMiniEventTokenExcel];
}

table EventContentMiniEventTokenExcel{
    EventContentId: long;
    ItemUniqueId: long;
    MaximumAmount: long;
}

table EventContentMissionExcelTable{
    DataList: [EventContentMissionExcel];
}

table EventContentMissionExcel{
    Id: long;
    EventContentId: long;
    GroupId: long;
    GroupName: string;
    Category: MissionCategory;
    Description: string;
    ResetType: MissionResetType;
    ToastDisplayType: MissionToastDisplayConditionType;
    ToastImagePath: string;
    ViewFlag: bool;
    DisplayOrder: long;
    PreMissionId: [long];
    AccountType: AccountState;
    AccountLevel: long;
    ShortcutUI: [string];
    ChallengeStageShortcut: long;
    CompleteConditionType: MissionCompleteConditionType;
    IsCompleteExtensionTime: bool;
    CompleteConditionCount: long;
    CompleteConditionParameter: [long];
    CompleteConditionParameterName: [string];
    RewardIcon: string;
    CompleteConditionMissionId: [long];
    CompleteConditionMissionCount: long;
    MissionRewardParcelType: [ParcelType];
    MissionRewardParcelId: [long];
    MissionRewardAmount: [int];
    ConditionRewardParcelType: [ParcelType];
    ConditionRewardParcelId: [long];
    ConditionRewardAmount: [int];
}

table EventContentNotifyExcelTable{
    DataList: [EventContentNotifyExcel];
}

table EventContentNotifyExcel{
    Id: int;
    LocalizeEtcId: uint;
    IconPath: string;
    EventNotifyType: EventNotifyType;
    EventTargetType: EventTargetType;
    ShortcutEventTargetType: EventTargetType;
    IsShortcutEnable: bool;
}

table EventContentPlayGuideExcelTable{
    DataList: [EventContentPlayGuideExcel];
}

table EventContentPlayGuideExcel{
    Id: long;
    EventContentId: long;
    DisplayOrder: int;
    GuideTitle: string;
    GuideImagePath: string;
    GuideText: string;
}

table EventContentScenarioExcelTable{
    DataList: [EventContentScenarioExcel];
}

table EventContentScenarioExcel{
    Id: long;
    EventContentId: long;
    ReplayDisplayGroup: int;
    Order: long;
    RecollectionNumber: long;
    IsRecollection: bool;
    IsMeetup: bool;
    IsOmnibus: bool;
    ScenarioGroupId: [long];
    ScenarioConditionType: EventContentScenarioConditionType;
    ConditionAmount: long;
    ConditionEventContentId: long;
    ClearedScenarioGroupId: long;
    RecollectionSummaryLocalizeScenarioId: uint;
    RecollectionResource: string;
    IsRecollectionHorizon: bool;
    CostParcelType: ParcelType;
    CostId: long;
    CostAmount: int;
    RewardParcelType: [ParcelType];
    RewardId: [long];
    RewardAmount: [int];
}

table EventContentSeasonExcelTable{
    DataList: [EventContentSeasonExcel];
}

table EventContentSeasonExcel{
    EventContentId: long;
    OriginalEventContentId: long;
    IsReturn: bool;
    Name: string;
    EventContentType: EventContentType;
    OpenConditionContent: OpenConditionContent;
    ContentLockType: ContentLockType;
    EventDisplay: bool;
    IconOrder: int;
    SubEvent: bool;
    EventItemId: long;
    MainEventId: long;
    EventChangeOpenCondition: long;
    BeforehandExposedTime: string;
    EventContentOpenTime: string;
    EventContentCloseTime: string;
    ExtensionTime: string;
    MainIconParcelPath: string;
    SubIconParcelPath: string;
    BeforehandBgImagePath: string;
    MinigamePrologScenarioGroupId: long;
    BeforehandScenarioGroupId: [long];
    MainBannerImagePath: string;
    MainBgImagePath: string;
    ShiftTriggerStageId: long;
    ShiftMainBgImagePath: string;
    MinigameLobbyPrefabName: string;
    MinigameVictoryPrefabName: string;
    MinigameMissionBgPrefabName: string;
    CardBgImagePath: string;
    EventAssist: bool;
    EventContentReleaseType: EventContentReleaseType;
    EventContentStageRewardIdPermanent: long;
    RewardTagPermanent: RewardTag;
    MiniEventShortCutScenarioModeId: long;
}

table EventContentShopExcelTable{
    DataList: [EventContentShopExcel];
}

table EventContentShopExcel{
    EventContentId: long;
    Id: long;
    LocalizeEtcId: uint;
    CategoryType: ShopCategoryType;
    IsLegacy: bool;
    GoodsId: [long];
    DisplayOrder: long;
    SalePeriodFrom: string;
    SalePeriodTo: string;
    PurchaseCooltimeMin: long;
    PurchaseCountLimit: long;
    PurchaseCountResetType: PurchaseCountResetType;
    BuyReportEventName: string;
    RestrictBuyWhenInventoryFull: bool;
}

table EventContentShopInfoExcelTable{
    DataList: [EventContentShopInfoExcel];
}

table EventContentShopInfoExcel{
    EventContentId: long;
    CategoryType: ShopCategoryType;
    LocalizeCode: uint;
    CostParcelType: [ParcelType];
    CostParcelId: [long];
    IsRefresh: bool;
    IsSoldOutDimmed: bool;
    AutoRefreshCoolTime: long;
    RefreshAbleCount: long;
    GoodsId: [long];
    OpenPeriodFrom: string;
    OpenPeriodTo: string;
    ShopProductUpdateDate: string;
}

table EventContentShopRefreshExcelTable{
    DataList: [EventContentShopRefreshExcel];
}

table EventContentShopRefreshExcel{
    EventContentId: long;
    Id: long;
    LocalizeEtcId: uint;
    IsLegacy: bool;
    GoodsId: long;
    DisplayOrder: long;
    CategoryType: ShopCategoryType;
    RefreshGroup: int;
    Prob: int;
    BuyReportEventName: string;
}

table EventContentSpecialOperationsExcelTable{
    DataList: [EventContentSpecialOperationsExcel];
}

table EventContentSpecialOperationsExcel{
    EventContentId: long;
    PointItemId: long;
}

table EventContentSpineDialogOffsetExcelTable{
    DataList: [EventContentSpineDialogOffsetExcel];
}

table EventContentSpineDialogOffsetExcel{
    EventContentId: long;
    EventContentType: EventContentType;
    CostumeUniqueId: long;
    SpineOffsetX: float;
    SpineOffsetY: float;
    DialogOffsetX: float;
    DialogOffsetY: float;
}

table EventContentSpoilerPopupExcelTable{
    DataList: [EventContentSpoilerPopupExcel];
}

table EventContentSpoilerPopupExcel{
    EventContentId: long;
    SpoilerPopupTitle: string;
    SpoilerPopupDescription: string;
    IsWarningPopUp: bool;
    ConditionScenarioModeId: long;
}

table EventContentStageExcelTable{
    DataList: [EventContentStageExcel];
}

table EventContentStageExcel{
    Id: long;
    Name: string;
    EventContentId: long;
    StageDifficulty: StageDifficulty;
    StageNumber: string;
    StageDisplay: int;
    PrevStageId: long;
    OpenDate: long;
    OpenEventPoint: long;
    OpenConditionScenarioId: long;
    BattleDuration: long;
    StageEnterCostType: ParcelType;
    StageEnterCostId: long;
    StageEnterCostAmount: int;
    StageEnterEchelonCount: int;
    StarConditionTacticRankSCount: long;
    StarConditionTurnCount: long;
    EnterScenarioGroupId: [long];
    ClearScenarioGroupId: [long];
    StrategyMap: string;
    StrategyMapBG: string;
    EventContentStageRewardId: long;
    MaxTurn: int;
    StageTopography: StageTopography;
    RecommandLevel: int;
    BgmId: string;
    StrategyEnvironment: StrategyEnvironment;
    GroundID: long;
    ContentType: ContentType;
    BGMId: long;
    InstantClear: bool;
    BuffContentId: long;
    FixedEchelonId: long;
    ChallengeDisplay: bool;
    StarGoal: [StarGoalType];
    StarGoalAmount: [int];
    IsDefeatBattle: bool;
    StageHint: uint;
}

table EventContentStageRewardExcelTable{
    DataList: [EventContentStageRewardExcel];
}

table EventContentStageRewardExcel{
    GroupId: long;
    RewardTag: RewardTag;
    RewardProb: int;
    RewardParcelType: ParcelType;
    RewardId: long;
    RewardAmount: int;
    IsDisplayed: bool;
}

table EventContentStageTotalRewardExcelTable{
    DataList: [EventContentStageTotalRewardExcel];
}

table EventContentStageTotalRewardExcel{
    Id: long;
    EventContentId: long;
    RequiredEventItemAmount: long;
    RewardParcelType: [ParcelType];
    RewardParcelId: [long];
    RewardParcelAmount: [long];
}

table EventContentZoneExcelTable{
    DataList: [EventContentZoneExcel];
}

table EventContentZoneExcel{
    Id: long;
    OriginalZoneId: long;
    LocationId: long;
    LocationRank: long;
    EventPointForLocationRank: long;
    LocalizeEtcId: uint;
    StudentVisitProb: [long];
    RewardGroupId: long;
    Tags: [Tag];
    WhiteListTags: [Tag];
}

table EventContentZoneVisitRewardExcelTable{
    DataList: [EventContentZoneVisitRewardExcel];
}

table EventContentZoneVisitRewardExcel{
    EventContentId: long;
    EventContentLocationId: long;
    DevName: string;
    CharacterId: long;
    CharacterDevName: string;
    VisitRewardParcelType: [ParcelType];
    VisitRewardParcelId: [long];
    VisitRewardAmount: [long];
    VisitRewardProb: [long];
}

table FarmingDungeonLocationManageExcelTable{
    DataList: [FarmingDungeonLocationManageExcel];
}

table FarmingDungeonLocationManageExcel{
    FarmingDungeonLocationId: long;
    ContentType: ContentType;
    WeekDungeonType: WeekDungeonType;
    SchoolDungeonType: SchoolDungeonType;
    Order: long;
    OpenStartDateTime: string;
    OpenEndDateTime: string;
    LocationButtonImagePath: string;
    LocalizeCodeTitle: uint;
    LocalizeCodeInfo: uint;
}

table FavorLevelExcelTable{
    DataList: [FavorLevelExcel];
}

table FavorLevelExcel{
    Level: long;
    ExpType: [long];
}

table FavorLevelRewardExcelTable{
    DataList: [FavorLevelRewardExcel];
}

table FavorLevelRewardExcel{
    CharacterId: long;
    FavorLevel: long;
    StatType: [EquipmentOptionType];
    StatValue: [long];
    RewardParcelType: [ParcelType];
    RewardParcelId: [long];
    RewardAmount: [long];
}

table FixedEchelonSettingExcelTable{
    DataList: [FixedEchelonSettingExcel];
}

table FixedEchelonSettingExcel{
    FixedEchelonID: long;
    EchelonSceneSkip: bool;
    MainLeaderSlot: int;
    MainCharacterID: [long];
    MainLevel: [int];
    MainGrade: [int];
    MainExSkillLevel: [int];
    MainNoneExSkillLevel: [int];
    MainEquipment1ID: [long];
    MainEquipment1Level: [int];
    MainEquipment2ID: [long];
    MainEquipment2Level: [int];
    MainEquipment3ID: [long];
    MainEquipment3Level: [int];
    SupportCharacterID: [long];
    SupportLevel: [int];
    SupportGrade: [int];
    SupportExSkillLevel: [int];
    SupportNoneExSkillLevel: [int];
    SupportEquipment1ID: [long];
    SupportEquipment1Level: [int];
    SupportEquipment2ID: [long];
    SupportEquipment2Level: [int];
    SupportEquipment3ID: [long];
    SupportEquipment3Level: [int];
}

table FixedStrategyExcelTable{
    DataList: [FixedStrategyExcel];
}

table FixedStrategyExcel{
    Id: long;
    StageEnterEchelon01FixedEchelonId: long;
    StageEnterEchelon01Starttile: long;
    StageEnterEchelon02FixedEchelonId: long;
    StageEnterEchelon02Starttile: long;
    StageEnterEchelon03FixedEchelonId: long;
    StageEnterEchelon03Starttile: long;
    StageEnterEchelon04FixedEchelonId: long;
    StageEnterEchelon04Starttile: long;
}

table FloaterCommonExcelTable{
    DataList: [FloaterCommonExcel];
}

table FloaterCommonExcel{
    Id: long;
    TacticEntityType: TacticEntityType;
    FloaterOffsetPosX: int;
    FloaterOffsetPosY: int;
    FloaterRandomPosRangeX: int;
    FloaterRandomPosRangeY: int;
}

table FormationLocationExcelTable{
    DataList: [FormationLocationExcel];
}

table FormationLocationExcel{
    Id: long;
    GroupID: long;
    SlotZ: [float];
    SlotX: [float];
}

table FurnitureExcelTable{
    DataList: [FurnitureExcel];
}

table FurnitureExcel{
    Id: long;
    ProductionStep: ProductionStep;
    Rarity: Rarity;
    Category: FurnitureCategory;
    SubCategory: FurnitureSubCategory;
    LocalizeEtcId: uint;
    StarGradeInit: int;
    Tier: long;
    Icon: string;
    SizeWidth: int;
    SizeHeight: int;
    OtherSize: int;
    ExpandWidth: int;
    Enable: bool;
    ReverseRotation: bool;
    Prefab: string;
    PrefabExpand: string;
    SubPrefab: string;
    SubExpandPrefab: string;
    CornerPrefab: string;
    StackableMax: long;
    RecipeCraftId: long;
    SetGroudpId: long;
    ComfortBonus: long;
    VisitOperationType: long;
    VisitBonusOperationType: long;
    Tags: [Tag];
    CraftQualityTier0: long;
    CraftQualityTier1: long;
    CraftQualityTier2: long;
    ShiftingCraftQuality: long;
    FurnitureFunctionType: FurnitureFunctionType;
    FunctionParameter: [string];
    EventCollectionId: long;
    FurnitureBubbleOffsetX: long;
    FurnitureBubbleOffsetY: long;
    CafeCharacterStateReq: [string];
    CafeCharacterStateAdd: [string];
    CafeCharacterStateMake: [string];
    CafeCharacterStateOnly: [string];
}

table FurnitureGroupExcelTable{
    DataList: [FurnitureGroupExcel];
}

table FurnitureGroupExcel{
    Id: long;
    GroupNameLocalize: uint;
    LocalizeEtcId: uint;
    RequiredFurnitureCount: [int];
    ComfortBonus: [long];
}

table FurnitureTemplateElementExcelTable{
    DataList: [FurnitureTemplateElementExcel];
}

table FurnitureTemplateElementExcel{
    FurnitureTemplateId: long;
    FurnitureId: long;
    Location: FurnitureLocation;
    PositionX: float;
    PositionY: float;
    Rotation: float;
    Order: long;
}

table FurnitureTemplateExcelTable{
    DataList: [FurnitureTemplateExcel];
}

table FurnitureTemplateExcel{
    FurnitureTemplateId: long;
    FunitureTemplateTitle: uint;
    ThumbnailImagePath: string;
    ImagePath: string;
}

table GachaCraftNodeExcelTable{
    DataList: [GachaCraftNodeExcel];
}

table GachaCraftNodeExcel{
    ID: long;
    Tier: long;
    QuickCraftNodeDisplayOrder: int;
    NodeQuality: long;
    Icon: string;
    LocalizeKey: uint;
    Property: long;
}

table GachaCraftNodeGroupExcelTable{
    DataList: [GachaCraftNodeGroupExcel];
}

table GachaCraftNodeGroupExcel{
    NodeId: long;
    GachaGroupId: long;
    ProbWeight: long;
}

table GachaCraftOpenTagExcelTable{
    DataList: [GachaCraftOpenTagExcel];
}

table GachaCraftOpenTagExcel{
    NodeTier: CraftNodeTier;
    Tag_: [Tag];
}

table GachaElementExcelTable{
    DataList: [GachaElementExcel];
}

table GachaElementExcel{
    ID: long;
    GachaGroupID: long;
    ParcelType: ParcelType;
    ParcelID: long;
    Rarity: Rarity;
    ParcelAmountMin: int;
    ParcelAmountMax: int;
    Prob: int;
    State: int;
}

table GachaElementRecursiveExcelTable{
    DataList: [GachaElementRecursiveExcel];
}

table GachaElementRecursiveExcel{
    ID: long;
    GachaGroupID: long;
    ParcelType: ParcelType;
    ParcelID: long;
    ParcelAmountMin: int;
    ParcelAmountMax: int;
    Prob: int;
    State: int;
}

table GachaGroupExcelTable{
    DataList: [GachaGroupExcel];
}

table GachaGroupExcel{
    ID: long;
    NameKr: string;
    IsRecursive: bool;
    GroupType: GachaGroupType;
}

table GoodsExcelTable{
    DataList: [GoodsExcel];
}

table GoodsExcel{
    Id: long;
    Type: int;
    Rarity: Rarity;
    IconPath: string;
    ConsumeParcelType: [ParcelType];
    ConsumeParcelId: [long];
    ConsumeParcelAmount: [long];
    ConsumeCondition_: [ConsumeCondition];
    ConsumeGachaTicketType: GachaTicketType;
    ConsumeGachaTicketTypeAmount: long;
    ProductIdAOS: long;
    ProductIdiOS: long;
    ProductIdONE: long;
    ProductIdSGS: long;
    ConsumeExtraStep: [long];
    ConsumeExtraAmount: [long];
    State: int;
    ParcelType_: [ParcelType];
    ParcelId: [long];
    ParcelAmount: [long];
}

table GroundExcelTable{
    DataList: [GroundExcel];
}

table GroundExcel{
    Id: long;
    StageFileName: [string];
    GroundSceneName: string;
    FormationGroupId: long;
    StageTopography: StageTopography;
    EnemyBulletType: BulletType;
    EnemyArmorType: ArmorType;
    LevelNPC: long;
    LevelMinion: long;
    LevelElite: long;
    LevelChampion: long;
    LevelBoss: long;
    ObstacleLevel: long;
    GradeNPC: long;
    GradeMinion: long;
    GradeElite: long;
    GradeChampion: long;
    GradeBoss: long;
    PlayerSightPointAdd: long;
    PlayerSightPointRate: long;
    PlayerAttackRangeAdd: long;
    PlayerAttackRangeRate: long;
    EnemySightPointAdd: long;
    EnemySightPointRate: long;
    EnemyAttackRangeAdd: long;
    EnemyAttackRangeRate: long;
    PlayerSkillRangeAdd: long;
    PlayerSkillRangeRate: long;
    EnemySkillRangeAdd: long;
    EnemySkillRangeRate: long;
    PlayerSightRangeMax: bool;
    EnemySightRangeMax: bool;
    TSSAirUnitHeight: long;
    IsPhaseBGM: bool;
    BGMId: long;
    WarningUI: bool;
    TSSHatchOpen: bool;
    ForcedTacticSpeed: TacticSpeed;
    ForcedSkillUse: TacticSkillUse;
    ShowNPCSkillCutIn: ShowSkillCutIn;
    ImmuneHitBeforeTimeOutEnd: bool;
    UIBattleHideFromScratch: bool;
    BattleReadyTimelinePath: string;
    HideNPCWhenBattleEnd: bool;
}

table GroundGridFlat{
    X: int;
    Y: int;
    StartX: float;
    StartY: float;
    Gap: float;
    Nodes: [GroundNodeFlat];
    Version: string;
}

table GroundNodeFlat{
    X: int;
    Y: int;
    IsCanNotUseSkill: bool;
    Position: GroundVector3;
    NodeType: GroundNodeType;
    OriginalNodeType: GroundNodeType;
}

table GroundModuleRewardExcelTable{
    DataList: [GroundModuleRewardExcel];
}

table GroundModuleRewardExcel{
    GroupId: uint;
    RewardParcelType: ParcelType;
    RewardParcelId: long;
    RewardParcelAmount: long;
    RewardParcelProbability: long;
    IsDisplayed: bool;
    DropItemModelPrefabPath: string;
}

table GroundNodeLayerFlat{
}

table GuideMissionExcelTable{
    DataList: [GuideMissionExcel];
}

table GuideMissionExcel{
    SeasonId: long;
    Id: long;
    Category: MissionCategory;
    IsLegacy: bool;
    TabNumber: long;
    PreMissionId: [long];
    Description: string;
    ToastDisplayType: MissionToastDisplayConditionType;
    ToastImagePath: string;
    ShortcutUI: [string];
    CompleteConditionType: MissionCompleteConditionType;
    CompleteConditionCount: long;
    CompleteConditionParameter: [long];
    CompleteConditionParameterName: string;
    IsAutoClearForScenario: bool;
    MissionRewardParcelType: [ParcelType];
    MissionRewardParcelId: [long];
    MissionRewardAmount: [int];
}

table GuideMissionOpenStageConditionExcelTable{
    DataList: [GuideMissionOpenStageConditionExcel];
}

table GuideMissionOpenStageConditionExcel{
    SeasonId: long;
    OrderNumber: long;
    TabLocalizeCode: string;
    ClearScenarioModeId: long;
    LockScenarioTextLocailzeCode: string;
    ShortcutScenarioUI: string;
    ClearStageId: long;
    LockStageTextLocailzeCode: string;
    ShortcutStageUI: string;
}

table GuideMissionSeasonExcelTable{
    DataList: [GuideMissionSeasonExcel];
}

table GuideMissionSeasonExcel{
    Id: long;
    TitleLocalizeCode: string;
    PermanentInfomationLocalizeCode: string;
    InfomationLocalizeCode: string;
    AccountType: AccountState;
    Enabled: bool;
    BannerOpenDate: string;
    StartDate: string;
    StartableEndDate: string;
    EndDate: string;
    CloseBannerAfterCompletion: bool;
    MaximumLoginCount: long;
    ExpiryDate: long;
    SpineCharacterId: long;
    RequirementParcelImage: string;
    RewardImage: string;
    LobbyBannerImage: string;
    BackgroundImage: string;
    TitleImage: string;
    RequirementParcelType: ParcelType;
    RequirementParcelId: long;
    RequirementParcelAmount: int;
    TabType: GuideMissionTabType;
    IsPermanent: bool;
    PreSeasonId: long;
}

table HpBarAbbreviationExcelTable{
    DataList: [HpBarAbbreviationExcel];
}

table HpBarAbbreviationExcel{
    MonsterLv: int;
    StandardHpBar: int;
    RaidBossHpBar: int;
}

table IdCardBackgroundExcelTable{
    DataList: [IdCardBackgroundExcel];
}

table IdCardBackgroundExcel{
    Id: long;
    Rarity: Rarity;
    DisplayOrder: long;
    CollectionVisible: bool;
    IsDefault: bool;
    BgPath: string;
    LocalizeEtcId: uint;
    Icon: string;
}

table InformationExcelTable{
    DataList: [InformationExcel];
}

table InformationExcel{
    GroupID: long;
    PageName: string;
    LocalizeCodeId: string;
    TutorialParentName: [string];
    UIName: [string];
}

table InformationStrategyObjectExcelTable{
    DataList: [InformationStrategyObjectExcel];
}

table InformationStrategyObjectExcel{
    Id: long;
    StageId: long;
    PageName: string;
    LocalizeCodeId: string;
}

table ItemExcelTable{
    DataList: [ItemExcel];
}

table ItemExcel{
    Id: long;
    GroupId: long;
    Rarity: Rarity;
    ProductionStep: ProductionStep;
    LocalizeEtcId: uint;
    ItemCategory: ItemCategory;
    Quality: long;
    Icon: string;
    SpriteName: string;
    StackableMax: int;
    StackableFunction: int;
    ImmediateUse: bool;
    UsingResultParcelType: ParcelType;
    UsingResultId: long;
    UsingResultAmount: long;
    MailType: MailType;
    ExpiryChangeParcelType: ParcelType;
    ExpiryChangeId: long;
    ExpiryChangeAmount: long;
    CanTierUpgrade: bool;
    TierUpgradeRecipeCraftId: long;
    Tags: [Tag];
    CraftQualityTier0: long;
    CraftQualityTier1: long;
    CraftQualityTier2: long;
    ShiftingCraftQuality: long;
    MaxGiftTags: int;
    ShopCategory: [ShopCategoryType];
    ExpirationDateTime: string;
    ExpirationNotifyDateIn: int;
    ShortcutTypeId: long;
    GachaTicket: GachaTicketType;
}

table KatakanaConvertExcelTable{
    DataList: [KatakanaConvertExcel];
}

table KatakanaConvertExcel{
    Kr: string;
    Jp: string;
}

table KnockBackExcelTable{
    DataList: [KnockBackExcel];
}

table KnockBackExcel{
    Index: long;
    Dist: float;
    Speed: float;
}

table LimitedStageExcelTable{
    DataList: [LimitedStageExcel];
}

table LimitedStageExcel{
    Id: long;
    Name: string;
    SeasonId: long;
    StageDifficulty: StageDifficulty;
    StageNumber: string;
    StageDisplay: int;
    PrevStageId: long;
    OpenDate: long;
    OpenEventPoint: long;
    BattleDuration: long;
    StageEnterCostType: ParcelType;
    StageEnterCostId: long;
    StageEnterCostAmount: int;
    StageEnterEchelonCount: int;
    StarConditionTacticRankSCount: long;
    StarConditionTurnCount: long;
    EnterScenarioGroupId: [long];
    ClearScenarioGroupId: [long];
    StrategyMap: string;
    StrategyMapBG: string;
    StageRewardId: long;
    MaxTurn: int;
    StageTopography: StageTopography;
    RecommandLevel: int;
    BgmId: string;
    StrategyEnvironment: StrategyEnvironment;
    GroundID: long;
    ContentType: ContentType;
    BGMId: long;
    InstantClear: bool;
    BuffContentId: long;
    ChallengeDisplay: bool;
}

table LimitedStageRewardExcelTable{
    DataList: [LimitedStageRewardExcel];
}

table LimitedStageRewardExcel{
    GroupId: long;
    RewardTag: RewardTag;
    RewardProb: int;
    RewardParcelType: ParcelType;
    RewardId: long;
    RewardAmount: int;
    IsDisplayed: bool;
}

table LimitedStageSeasonExcelTable{
    DataList: [LimitedStageSeasonExcel];
}

table LimitedStageSeasonExcel{
    Id: long;
    StartDate: string;
    EndDate: string;
    TypeACount: long;
    TypeBCount: long;
    TypeCCount: long;
}

table LoadingImageExcelTable{
    DataList: [LoadingImageExcel];
}

table LoadingImageExcel{
    ID: long;
    ImagePathKr: string;
    ImagePathJp: string;
    DisplayWeight: int;
    ImagePathTh: string;
    ImagePathTw: string;
    ImagePathEn: string;
}

table LocalizeCharProfileExcelTable{
    DataList: [LocalizeCharProfileExcel];
}

table LocalizeCharProfileExcel{
    CharacterId: long;
    StatusMessageKr: string;
    StatusMessageJp: string;
    StatusMessageTh: string;
    StatusMessageTw: string;
    StatusMessageEn: string;
    FullNameKr: string;
    FullNameJp: string;
    FullNameTh: string;
    FullNameTw: string;
    FullNameEn: string;
    FamilyNameKr: string;
    FamilyNameRubyKr: string;
    PersonalNameKr: string;
    PersonalNameRubyKr: string;
    FamilyNameJp: string;
    FamilyNameRubyJp: string;
    PersonalNameJp: string;
    PersonalNameRubyJp: string;
    FamilyNameTh: string;
    FamilyNameRubyTh: string;
    PersonalNameTh: string;
    PersonalNameRubyTh: string;
    FamilyNameTw: string;
    FamilyNameRubyTw: string;
    PersonalNameTw: string;
    PersonalNameRubyTw: string;
    FamilyNameEn: string;
    FamilyNameRubyEn: string;
    PersonalNameEn: string;
    PersonalNameRubyEn: string;
    SchoolYearKr: string;
    SchoolYearJp: string;
    SchoolYearTh: string;
    SchoolYearTw: string;
    SchoolYearEn: string;
    CharacterAgeKr: string;
    CharacterAgeJp: string;
    CharacterAgeTh: string;
    CharacterAgeTw: string;
    CharacterAgeEn: string;
    BirthDay: string;
    BirthdayKr: string;
    BirthdayJp: string;
    BirthdayTh: string;
    BirthdayTw: string;
    BirthdayEn: string;
    CharHeightKr: string;
    CharHeightJp: string;
    CharHeightTh: string;
    CharHeightTw: string;
    CharHeightEn: string;
    DesignerNameKr: string;
    DesignerNameJp: string;
    DesignerNameTh: string;
    DesignerNameTw: string;
    DesignerNameEn: string;
    IllustratorNameKr: string;
    IllustratorNameJp: string;
    IllustratorNameTh: string;
    IllustratorNameTw: string;
    IllustratorNameEn: string;
    CharacterVoiceKr: string;
    CharacterVoiceJp: string;
    CharacterVoiceTh: string;
    CharacterVoiceTw: string;
    CharacterVoiceEn: string;
    HobbyKr: string;
    HobbyJp: string;
    HobbyTh: string;
    HobbyTw: string;
    HobbyEn: string;
    WeaponNameKr: string;
    WeaponDescKr: string;
    WeaponNameJp: string;
    WeaponDescJp: string;
    WeaponNameTh: string;
    WeaponDescTh: string;
    WeaponNameTw: string;
    WeaponDescTw: string;
    WeaponNameEn: string;
    WeaponDescEn: string;
    ProfileIntroductionKr: string;
    ProfileIntroductionJp: string;
    ProfileIntroductionTh: string;
    ProfileIntroductionTw: string;
    ProfileIntroductionEn: string;
    CharacterSSRNewKr: string;
    CharacterSSRNewJp: string;
    CharacterSSRNewTh: string;
    CharacterSSRNewTw: string;
    CharacterSSRNewEn: string;
}

table LocalizeCodeExcelTable{
    DataList: [LocalizeCodeExcel];
}

table LocalizeCodeExcel{
    Key: uint;
    Kr: string;
    Jp: string;
    Th: string;
    Tw: string;
    En: string;
}

table LocalizeCodeInBuildExcelTable{
    DataList: [LocalizeCodeInBuildExcel];
}

table LocalizeCodeInBuildExcel{
    Key: uint;
    Kr: string;
    Jp: string;
    Th: string;
    Tw: string;
    En: string;
}

table LocalizeErrorExcelTable{
    DataList: [LocalizeErrorExcel];
}

table LocalizeErrorExcel{
    Key: uint;
    ErrorLevel: WebAPIErrorLevel;
    Kr: string;
    Jp: string;
    Th: string;
    Tw: string;
    En: string;
}

table LocalizeEtcExcelTable{
    DataList: [LocalizeEtcExcel];
}

table LocalizeEtcExcel{
    Key: uint;
    NameKr: string;
    DescriptionKr: string;
    NameJp: string;
    DescriptionJp: string;
    NameTh: string;
    DescriptionTh: string;
    NameTw: string;
    DescriptionTw: string;
    NameEn: string;
    DescriptionEn: string;
}

table LocalizeGachaShopExcelTable{
    DataList: [LocalizeGachaShopExcel];
}

table LocalizeGachaShopExcel{
    GachaShopId: long;
    TabNameKr: string;
    TabNameJp: string;
    TabNameTh: string;
    TabNameTw: string;
    TabNameEn: string;
    TitleNameKr: string;
    TitleNameJp: string;
    TitleNameTh: string;
    TitleNameTw: string;
    TitleNameEn: string;
    SubTitleKr: string;
    SubTitleJp: string;
    SubTitleTh: string;
    SubTitleTw: string;
    SubTitleEn: string;
    GachaDescriptionKr: string;
    GachaDescriptionJp: string;
    GachaDescriptionTh: string;
    GachaDescriptionTw: string;
    GachaDescriptionEn: string;
}

table LocalizeInformationExcelTable{
    DataList: [LocalizeInformationExcel];
}

table LocalizeInformationExcel{
    Key: uint;
    Kr: string;
    Jp: string;
    Th: string;
    Tw: string;
    En: string;
}

table LocalizeOperatorExcelTable{
    DataList: [LocalizeOperatorExcel];
}

table LocalizeOperatorExcel{
    Key: uint;
    Kr: string;
    Jp: string;
    Th: string;
    Tw: string;
    En: string;
}

table LocalizePrefabExcelTable{
    DataList: [LocalizePrefabExcel];
}

table LocalizePrefabExcel{
    Key: uint;
    Kr: string;
    Jp: string;
    Th: string;
    Tw: string;
    En: string;
}

table LocalizeScenarioExcelTable{
    DataList: [LocalizeScenarioExcel];
}

table LocalizeScenarioExcel{
    Key: uint;
    Kr: string;
    Jp: string;
    Th: string;
    Tw: string;
    En: string;
}

table LocalizeSkillExcelTable{
    DataList: [LocalizeSkillExcel];
}

table LocalizeSkillExcel{
    Key: uint;
    NameKr: string;
    DescriptionKr: string;
    SkillInvokeLocalizeKr: string;
    NameJp: string;
    DescriptionJp: string;
    SkillInvokeLocalizeJp: string;
    NameTh: string;
    DescriptionTh: string;
    SkillInvokeLocalizeTh: string;
    NameTw: string;
    DescriptionTw: string;
    SkillInvokeLocalizeTw: string;
    NameEn: string;
    DescriptionEn: string;
    SkillInvokeLocalizeEn: string;
}

table LogicEffectCommonVisualExcelTable{
    DataList: [LogicEffectCommonVisualExcel];
}

table LogicEffectCommonVisualExcel{
    StringID: uint;
    IconSpriteName: string;
    IconDispelColor: [float];
    ParticleEnterPath: string;
    ParticleEnterSocket: EffectBone;
    ParticleLoopPath: string;
    ParticleLoopSocket: EffectBone;
    ParticleEndPath: string;
    ParticleEndSocket: EffectBone;
    ParticleApplyPath: string;
    ParticleApplySocket: EffectBone;
    ParticleRemovedPath: string;
    ParticleRemovedSocket: EffectBone;
}

table MemoryLobbyExcelTable{
    DataList: [MemoryLobbyExcel];
}

table MemoryLobbyExcel{
    Id: long;
    ProductionStep: ProductionStep;
    LocalizeEtcId: uint;
    CharacterId: long;
    PrefabName: string;
    SlotTextureName: string;
    RewardTextureName: string;
    BGMId: long;
    AudioClipJp: string;
    AudioClipKr: string;
    AudioClipTh: string;
    AudioClipTw: string;
    AudioClipEn: string;
}

table MemoryLobby_GlobalExcelTable{
    DataList: [MemoryLobby_GlobalExcel];
}

table MemoryLobby_GlobalExcel{
    Id: long;
    CharacterId: long;
    PrefabNameKr: string;
    PrefabNameTw: string;
    PrefabNameAsia: string;
    PrefabNameNa: string;
    PrefabNameGlobal: string;
    PrefabNameTeen: string;
}

table MessagePopupExcelTable{
    DataList: [MessagePopupExcel];
}

table MessagePopupExcel{
    StringId: uint;
    MessagePopupLayout: MessagePopupLayout;
    OrderType: MessagePopupImagePositionType;
    Image: string;
    TitleText: uint;
    MessageText: uint;
    DisplayXButton: bool;
    Button: [MessagePopupButtonType];
    ButtonText: [uint];
    ButtonCommand: [string];
    ButtonParameter: [string];
}

table MiniGameAudioAnimatorExcelTable{
    DataList: [MiniGameAudioAnimatorExcel];
}

table MiniGameAudioAnimatorExcel{
    ControllerNameHash: uint;
    VoiceNamePrefix: string;
    StateNameHash: uint;
    StateName: string;
    IgnoreInterruptDelay: bool;
    IgnoreInterruptPlay: bool;
    Volume: float;
    Delay: float;
    AudioPriority: int;
    AudioClipPath: [string];
    VoiceHash: [uint];
}

table MiniGameMissionExcelTable{
    DataList: [MiniGameMissionExcel];
}

table MiniGameMissionExcel{
    Id: long;
    EventContentId: long;
    GroupId: long;
    GroupName: string;
    Category: MissionCategory;
    Description: string;
    ResetType: MissionResetType;
    ToastDisplayType: MissionToastDisplayConditionType;
    ToastImagePath: string;
    ViewFlag: bool;
    DisplayOrder: long;
    PreMissionId: [long];
    AccountType: AccountState;
    AccountLevel: long;
    ShortcutUI: [string];
    CompleteConditionType: MissionCompleteConditionType;
    IsCompleteExtensionTime: bool;
    CompleteConditionCount: long;
    CompleteConditionParameter: [long];
    CompleteConditionParameterName: [string];
    RewardIcon: string;
    MissionRewardParcelType: [ParcelType];
    MissionRewardParcelId: [long];
    MissionRewardAmount: [int];
}

table MiniGamePlayGuideExcelTable{
    DataList: [MiniGamePlayGuideExcel];
}

table MiniGamePlayGuideExcel{
    Id: long;
    EventContentId: long;
    DisplayOrder: int;
    GuideTitle: string;
    GuideImagePath: string;
    GuideText: string;
}

table MiniGameRhythmBgmExcelTable{
    DataList: [MiniGameRhythmBgmExcel];
}

table MiniGameRhythmBgmExcel{
    RhythmBgmId: long;
    EventContentId: long;
    StageSelectImagePath: string;
    Bpm: long;
    Bgm: long;
    BgmNameText: string;
    BgmArtistText: string;
    HasLyricist: bool;
    BgmComposerText: string;
    BgmLength: int;
}

table MiniGameRhythmExcelTable{
    DataList: [MiniGameRhythmExcel];
}

table MiniGameRhythmExcel{
    UniqueId: long;
    RhythmBgmId: long;
    PresetName: string;
    StageDifficulty: Difficulty;
    IsSpecial: bool;
    OpenStageScoreAmount: long;
    MaxHp: long;
    MissDamage: long;
    CriticalHPRestoreValue: long;
    MaxScore: long;
    FeverScoreRate: long;
    NoteScoreRate: long;
    ComboScoreRate: long;
    AttackScoreRate: long;
    FeverCriticalRate: float;
    FeverAttackRate: float;
    MaxHpScore: long;
    RhythmFileName: string;
    ArtLevelSceneName: string;
    ComboImagePath: string;
}

table MiniGameShootingCharacterExcelTable{
    DataList: [MiniGameShootingCharacterExcel];
}

table MiniGameShootingCharacterExcel{
    UniqueId: long;
    SpineResourceName: string;
    BodyRadius: float;
    ModelPrefabName: string;
    NormalAttackSkillData: string;
    PublicSkillData: [string];
    MaxHP: long;
    AttackPower: long;
    DefensePower: long;
    CriticalRate: long;
    CriticalDamageRate: long;
    AttackRange: long;
    MoveSpeed: long;
    ShotTime: long;
    IsBoss: bool;
    Scale: float;
    IgnoreObstacleCheck: bool;
}

table MiniGameShootingGeasExcelTable{
    DataList: [MiniGameShootingGeasExcel];
}

table MiniGameShootingGeasExcel{
    UniqueId: long;
    GeasType: Geas;
    Icon: string;
    Probability: long;
    MaxOverlapCount: int;
    GeasData: string;
    NeedGeasId: long;
    HideInPausePopup: bool;
}

table MiniGameShootingStageExcelTable{
    DataList: [MiniGameShootingStageExcel];
}

table MiniGameShootingStageExcel{
    UniqueId: long;
    BgmId: long;
    CostGoodsId: long;
    Difficulty: Difficulty;
    DesignLevel: string;
    ArtLevel: string;
    StartBattleDuration: long;
    DefaultBattleDuration: long;
    DefaultLogicEffect: string;
    CameraSizeRate: float;
    EventContentStageRewardId: long;
}

table MiniGameShootingStageRewardExcelTable{
    DataList: [MiniGameShootingStageRewardExcel];
}

table MiniGameShootingStageRewardExcel{
    GroupId: long;
    RewardId: long;
    ClearSection: long;
    RewardParcelType: [ParcelType];
    RewardParcelId: [long];
    RewardParcelAmount: [int];
}

table MinigameTBGDiceExcelTable{
    DataList: [MinigameTBGDiceExcel];
}

table MinigameTBGDiceExcel{
    EventContentId: long;
    UniqueId: long;
    DiceGroup: int;
    DiceResult: int;
    Prob: int;
    ProbModifyCondition: [TBGProbModifyCondition];
    ProbModifyValue: [int];
    ProbModifyLimit: [int];
}

table MinigameTBGEncounterExcelTable{
    DataList: [MinigameTBGEncounterExcel];
}

table MinigameTBGEncounterExcel{
    EventContentId: long;
    UniqueId: long;
    AllThema: bool;
    ThemaIndex: int;
    ThemaType: TBGThemaType;
    ObjectType: TBGObjectType;
    EnemyImagePath: string;
    EnemyPrefabName: string;
    EnemyNameLocalize: string;
    OptionGroupId: long;
    RewardHide: bool;
    EncounterTitleLocalize: string;
    StoryImagePath: string;
    BeforeStoryLocalize: string;
    BeforeStoryOption1Localize: string;
    BeforeStoryOption2Localize: string;
    BeforeStoryOption3Localize: string;
    AllyAttackLocalize: string;
    EnemyAttackLocalize: string;
    AttackDefenceLocalize: string;
    ClearStoryLocalize: string;
    DefeatStoryLocalize: string;
    RunawayStoryLocalize: string;
}

table MinigameTBGEncounterOptionExcelTable{
    DataList: [MinigameTBGEncounterOptionExcel];
}

table MinigameTBGEncounterOptionExcel{
    OptionGroupId: long;
    UniqueId: long;
    SlotIndex: int;
    OptionTitleLocalize: string;
    OptionSuccessLocalize: string;
    OptionSuccessRewardGroupId: long;
    OptionSuccessOrHigherDiceCount: int;
    OptionGreatSuccessOrHigherDiceCount: int;
    OptionFailLocalize: string;
    OptionFailLessDiceCount: int;
    RunawayOrHigherDiceCount: int;
    RewardHide: bool;
}

table MinigameTBGEncounterRewardExcelTable{
    DataList: [MinigameTBGEncounterRewardExcel];
}

table MinigameTBGEncounterRewardExcel{
    GroupId: long;
    UniqueId: long;
    TBGOptionSuccessType: TBGOptionSuccessType;
    Paremeter: long;
    ParcelType: ParcelType;
    ParcelId: long;
    Amount: long;
    Prob: int;
}

table MinigameTBGItemExcelTable{
    DataList: [MinigameTBGItemExcel];
}

table MinigameTBGItemExcel{
    UniqueId: long;
    ItemType: TBGItemType;
    TBGItemEffectType: TBGItemEffectType;
    ItemParameter: int;
    LocalizeETCId: string;
    Icon: string;
    BuffIcon: string;
    EncounterCount: int;
    DiceEffectAniClip: string;
}

table MinigameTBGObjectExcelTable{
    DataList: [MinigameTBGObjectExcel];
}

table MinigameTBGObjectExcel{
    UniqueId: long;
    Key: string;
    PrefabName: string;
    ObjectType: TBGObjectType;
    ObjectCostType: ParcelType;
    ObjectCostId: long;
    ObjectCostAmount: int;
    Disposable: bool;
    ReEncounterCost: bool;
}

table MinigameTBGSeasonExcelTable{
    DataList: [MinigameTBGSeasonExcel];
}

table MinigameTBGSeasonExcel{
    EventContentId: long;
    ItemSlot: int;
    DefaultEchelonHp: int;
    DefaultItemDiceId: long;
    EchelonSlot1CharacterId: long;
    EchelonSlot2CharacterId: long;
    EchelonSlot3CharacterId: long;
    EchelonSlot4CharacterId: long;
    EchelonSlot1Portrait: string;
    EchelonSlot2Portrait: string;
    EchelonSlot3Portrait: string;
    EchelonSlot4Portrait: string;
    EventUseCostType: ParcelType;
    EventUseCostId: long;
    EchelonRevivalCostType: ParcelType;
    EchelonRevivalCostId: long;
    EchelonRevivalCostAmount: int;
    EnemyBossHP: int;
    EnemyMinionHP: int;
    AttackDamage: int;
    CriticalAttackDamage: int;
    RoundItemSelectLimit: int;
    InstantClearRound: int;
    MaxHp: int;
    MapImagePath: string;
    MapNameLocalize: string;
}

table MinigameTBGThemaExcelTable{
    DataList: [MinigameTBGThemaExcel];
}

table MinigameTBGThemaExcel{
    EventContentId: long;
    UniqueId: long;
    ThemaIndex: int;
    ThemaType: TBGThemaType;
    ThemaMap: string;
    ThemaMapBG: string;
    PortalCondition: [TBGPortalCondition];
    PortalConditionParameter: [string];
    ThemaNameLocalize: string;
    ThemaLoadingImage: string;
    ThemaPlayerPrefab: string;
    ThemaLeaderId: long;
    ThemaGoalLocalize: string;
    InstantClearCostAmount: long;
}

table MiniGameTBGThemaRewardExcelTable{
    DataList: [MiniGameTBGThemaRewardExcel];
}

table MiniGameTBGThemaRewardExcel{
    EventContentId: long;
    ThemaRound: int;
    ThemaUniqueId: int;
    IsLoop: bool;
    MiniGameTBGThemaRewardType: MiniGameTBGThemaRewardType;
    RewardParcelType: [ParcelType];
    RewardParcelId: [long];
    RewardParcelAmount: [int];
}

table MinigameTBGVoiceExcelTable{
    DataList: [MinigameTBGVoiceExcel];
}

table MinigameTBGVoiceExcel{
    EventContentId: long;
    UniqueId: long;
    VoiceCondition: TBGVoiceCondition;
    VoiceClip: string;
}

table MissionExcelTable{
    DataList: [MissionExcel];
}

table MissionExcel{
    Id: long;
    Category: MissionCategory;
    Description: string;
    ResetType: MissionResetType;
    ToastDisplayType: MissionToastDisplayConditionType;
    ToastImagePath: string;
    ViewFlag: bool;
    Limit: bool;
    StartDate: string;
    EndDate: string;
    EndDay: long;
    StartableEndDate: string;
    DisplayOrder: long;
    PreMissionId: [long];
    AccountType: AccountState;
    AccountLevel: long;
    ContentTags: [SuddenMissionContentType];
    ShortcutUI: [string];
    ChallengeStageShortcut: long;
    CompleteConditionType: MissionCompleteConditionType;
    CompleteConditionCount: long;
    CompleteConditionParameter: [long];
    CompleteConditionParameterName: [string];
    RewardIcon: string;
    MissionRewardParcelType: [ParcelType];
    MissionRewardParcelId: [long];
    MissionRewardAmount: [int];
}

table NormalSkillTemplateExcelTable{
    DataList: [NormalSkillTemplateExcel];
}

table NormalSkillTemplateExcel{
    Index: long;
    FirstCoolTime: float;
    CoolTime: float;
    MultiAni: bool;
}

table ObstacleExcelTable{
    DataList: [ObstacleExcel];
}

table ObstacleExcel{
    Index: long;
    PrefabName: string;
    JumpAble: bool;
    SubOffset: [float];
    X: float;
    Z: float;
    Hp: long;
    MaxHp: long;
    BlockRate: int;
    EvasionRate: int;
    DestroyType: ObstacleDestroyType;
    Point1Offeset: [float];
    EnemyPoint1Osset: [float];
    Point2Offeset: [float];
    EnemyPoint2Osset: [float];
    SubObstacleID: [long];
}

table ObstacleFireLineCheckExcelTable{
    DataList: [ObstacleFireLineCheckExcel];
}

table ObstacleFireLineCheckExcel{
    MyObstacleFireLineCheck: bool;
    AllyObstacleFireLineCheck: bool;
    EnemyObstacleFireLineCheck: bool;
    EmptyObstacleFireLineCheck: bool;
}

table ObstacleStatExcelTable{
    DataList: [ObstacleStatExcel];
}

table ObstacleStatExcel{
    StringID: uint;
    Name: string;
    MaxHP1: long;
    MaxHP100: long;
    BlockRate: long;
    Dodge: long;
    HighlightFloaterHeight: float;
}

table OpenConditionExcelTable{
    DataList: [OpenConditionExcel];
}

table OpenConditionExcel{
    OpenConditionContentType: OpenConditionContent;
    LockUI: [string];
    ShortcutPopupPriority: long;
    ShortcutUIName: [string];
    ShortcutParam: int;
    Scene: string;
    HideWhenLocked: bool;
    AccountLevel: long;
    ScenarioModeId: long;
    CampaignStageId: long;
    MultipleConditionCheckType: MultipleConditionCheckType;
    OpenDayOfWeek: WeekDay;
    OpenHour: long;
    CloseDayOfWeek: WeekDay;
    CloseHour: long;
    OpenedCafeId: long;
    CafeIdforCafeRank: long;
    CafeRank: long;
    ContentsOpenShow: bool;
    ContentsOpenShortcutUI: string;
}

table OperatorExcelTable{
    DataList: [OperatorExcel];
}

table OperatorExcel{
    UniqueId: long;
    GroupId: string;
    OperatorCondition: OperatorCondition;
    OutputSequence: int;
    RandomWeight: int;
    OutputDelay: int;
    Duration: int;
    OperatorOutputPriority: int;
    PortraitPath: string;
    TextLocalizeKey: string;
    VoiceClipsKr: [string];
    VoiceClipsJp: [string];
    VoiceClipsTh: [string];
    VoiceClipsTw: [string];
    VoiceClipsEn: [string];
    OperatorWaitQueue: bool;
}

table ParcelAutoSynthExcelTable{
    DataList: [ParcelAutoSynthExcel];
}

table ParcelAutoSynthExcel{
    RequireParcelType: ParcelType;
    RequireParcelId: long;
    RequireParcelAmount: long;
    SynthStartAmount: long;
    SynthEndAmount: long;
    SynthMaxItem: bool;
    ResultParcelType: ParcelType;
    ResultParcelId: long;
    ResultParcelAmount: long;
}

table PersonalityExcelTable{
    DataList: [PersonalityExcel];
}

table PersonalityExcel{
    Id: long;
    Name: string;
}

table PickupDuplicateBonusExcelTable{
    DataList: [PickupDuplicateBonusExcel];
}

table PickupDuplicateBonusExcel{
    Id: long;
    ShopCategoryType: ShopCategoryType;
    ShopId: long;
    PickupCharacterId: long;
    RewardParcelType: ParcelType;
    RewardParcelId: long;
    RewardParcelAmount: long;
}

table PresetCharacterGroupExcelTable{
    DataList: [PresetCharacterGroupExcel];
}

table PresetCharacterGroupExcel{
    PresetCharacterGroupId: long;
    GetPresetType: string;
    Level: int;
    Exp: int;
    FavorExp: int;
    FavorRank: int;
    StarGrade: int;
    ExSkillLevel: int;
    PassiveSkillLevel: int;
    ExtraPassiveSkillLevel: int;
    CommonSkillLevel: int;
    LeaderSkillLevel: int;
    EquipSlot01: bool;
    EquipSlotTier01: int;
    EquipSlotLevel01: int;
    EquipSlot02: bool;
    EquipSlotTier02: int;
    EquipSlotLevel02: int;
    EquipSlot03: bool;
    EquipSlotTier03: int;
    EquipSlotLevel03: int;
    EquipCharacterWeapon: bool;
    EquipCharacterWeaponTier: int;
    EquipCharacterWeaponLevel: int;
    EquipCharacterGear: bool;
    EquipCharacterGearTier: int;
    EquipCharacterGearLevel: int;
}

table PresetCharacterGroupSettingExcelTable{
    DataList: [PresetCharacterGroupSettingExcel];
}

table PresetCharacterGroupSettingExcel{
    CharacterId: long;
    ArenaSimulatorFixed: bool;
    PresetType: [string];
}

table PresetCharactersExcelTable{
    DataList: [PresetCharactersExcel];
}

table PresetCharactersExcel{
    CharacterId: long;
    PresetGroupId: long;
    ArenaSimulatorFixed: bool;
    Level: int;
    Exp: int;
    FavorExp: int;
    FavorRank: int;
    StarGrade: int;
    ExSkillLevel: int;
    PassiveSkillLevel: int;
    ExtraPassiveSkillLevel: int;
    CommonSkillLevel: int;
    LeaderSkillLevel: int;
    EquipSlot01: bool;
    EquipSlotTier01: int;
    EquipSlotLevel01: int;
    EquipSlot02: bool;
    EquipSlotTier02: int;
    EquipSlotLevel02: int;
    EquipSlot03: bool;
    EquipSlotTier03: int;
    EquipSlotLevel03: int;
    EquipCharacterWeapon: bool;
    EquipCharacterWeaponTier: int;
    EquipCharacterWeaponLevel: int;
    EquipCharacterGear: bool;
    EquipCharacterGearTier: int;
    EquipCharacterGearLevel: int;
}

table PresetParcelsExcelTable{
    DataList: [PresetParcelsExcel];
}

table PresetParcelsExcel{
    ParcelType: ParcelType;
    ParcelId: long;
    PresetGroupId: long;
    ParcelAmount: long;
}

table ProductExcelTable{
    DataList: [ProductExcel];
}

table ProductExcel{
    Id: long;
    ProductId: string;
    TeenProductId: string;
    StoreType: StoreType;
    Price: long;
    PriceReference: string;
    PurchasePeriodType: PurchasePeriodType;
    PurchasePeriodLimit: long;
    ParcelType_: [ParcelType];
    ParcelId: [long];
    ParcelAmount: [long];
}

table ProductMonthlyExcelTable{
    DataList: [ProductMonthlyExcel];
}

table ProductMonthlyExcel{
    Id: long;
    ProductId: string;
    TeenProductId: string;
    StoreType: StoreType;
    Price: long;
    PriceReference: string;
    ProductTagType: ProductTagType;
    MonthlyDays: long;
    ParcelType_: [ParcelType];
    ParcelId: [long];
    ParcelAmount: [long];
    EnterCostReduceGroupId: long;
    DailyParcelType: [ParcelType];
    DailyParcelId: [long];
    DailyParcelAmount: [long];
}

table ProtocolSettingExcelTable{
    DataList: [ProtocolSettingExcel];
}

table ProtocolSettingExcel{
    Protocol: string;
    ContentLockType: ContentLockType;
    OpenConditionContent: OpenConditionContent;
    Currency: bool;
    Inventory: bool;
    Mail: bool;
}

table RaidRankingRewardExcelTable{
    DataList: [RaidRankingRewardExcel];
}

table RaidRankingRewardExcel{
    RankingRewardGroupId: long;
    Id: long;
    RankStart: long;
    RankEnd: long;
    RankStartTw: long;
    RankEndTw: long;
    RankStartAsia: long;
    RankEndAsia: long;
    RankStartNa: long;
    RankEndNa: long;
    RankStartGlobal: long;
    RankEndGlobal: long;
    PercentRankStart: long;
    PercentRankEnd: long;
    Tier: int;
    RewardParcelType: [ParcelType];
    RewardParcelUniqueId: [long];
    RewardParcelUniqueName: [string];
    RewardParcelAmount: [long];
}

table RaidSeasonManageExcelTable{
    DataList: [RaidSeasonManageExcel];
}

table RaidSeasonManageExcel{
    SeasonId: long;
    SeasonDisplay: long;
    SeasonStartData: string;
    SeasonEndData: string;
    SettlementEndDate: string;
    OpenRaidBossGroup: [string];
    RankingRewardGroupId: long;
    MaxSeasonRewardGauage: int;
    StackedSeasonRewardGauge: [long];
    SeasonRewardId: [long];
}

table RaidStageExcelTable{
    DataList: [RaidStageExcel];
}

table RaidStageExcel{
    Id: long;
    UseBossIndex: bool;
    UseBossAIPhaseSync: bool;
    RaidBossGroup: string;
    PortraitPath: string;
    BGPath: string;
    RaidCharacterId: long;
    BossCharacterId: [long];
    Difficulty: Difficulty;
    DifficultyOpenCondition: bool;
    MaxPlayerCount: long;
    RaidRoomLifeTime: int;
    BattleDuration: long;
    GroundId: long;
    GroundDevName: string;
    EnterTimeLine: string;
    TacticEnvironment: TacticEnvironment;
    SeasonDamageRatio: int;
    DefaultClearScore: long;
    MaximumScore: long;
    PerSecondMinusScore: long;
    HPPercentScore: long;
    MinimumAcquisitionScore: long;
    MaximumAcquisitionScore: long;
    RaidRewardGroupId: long;
    RaidRewardDevName: string;
    BattleReadyTimelinePath: [string];
    BattleReadyTimelinePhaseStart: [int];
    BattleReadyTimelinePhaseEnd: [int];
    VictoryTimelinePath: string;
    PhaseChangeTimelinePath: string;
    TimeLinePhase: long;
    EnterScenarioKey: uint;
    ClearScenarioKey: uint;
    InitSupplyCount: int;
    ShowSkillCard: bool;
    BossBGInfoKey: uint;
}

table RaidStageRewardExcelTable{
    DataList: [RaidStageRewardExcel];
}

table RaidStageRewardExcel{
    GroupId: long;
    IsClearStageRewardHideInfo: bool;
    ClearStageRewardProb: long;
    ClearStageRewardParcelType: ParcelType;
    ClearStageRewardParcelUniqueID: long;
    ClearStageRewardParcelUniqueName: string;
    ClearStageRewardAmount: long;
}

table RaidStageSeasonRewardExcelTable{
    DataList: [RaidStageSeasonRewardExcel];
}

table RaidStageSeasonRewardExcel{
    SeasonRewardId: long;
    SeasonRewardParcelType: [ParcelType];
    SeasonRewardParcelUniqueId: [long];
    SeasonRewardParcelUniqueName: [string];
    SeasonRewardAmount: [long];
}

table RecipeCraftExcelTable{
    DataList: [RecipeCraftExcel];
}

table RecipeCraftExcel{
    Id: long;
    DevName: string;
    RecipeType: RecipeType;
    RecipeIngredientId: long;
    RecipeIngredientDevName: string;
    ParcelType_: [ParcelType];
    ParcelId: [long];
    ParcelDevName: [string];
    ResultAmountMin: [long];
    ResultAmountMax: [long];
}

table RecipeExcelTable{
    DataList: [RecipeExcel];
}

table RecipeExcel{
    Id: long;
    RecipeType: RecipeType;
    RecipeIngredientId: long;
    RecipeSelectionGroupId: long;
    ParcelType_: [ParcelType];
    ParcelId: [long];
    ResultAmountMin: [long];
    ResultAmountMax: [long];
}

table RecipeIngredientExcelTable{
    DataList: [RecipeIngredientExcel];
}

table RecipeIngredientExcel{
    Id: long;
    RecipeType: RecipeType;
    CostParcelType: [ParcelType];
    CostId: [long];
    CostAmount: [long];
    IngredientParcelType: [ParcelType];
    IngredientId: [long];
    IngredientAmount: [long];
    CostTimeInSecond: long;
}

table RecipeSelectionAutoUseExcelTable{
    DataList: [RecipeSelectionAutoUseExcel];
}

table RecipeSelectionAutoUseExcel{
    Id: long;
    ParcelType: ParcelType;
    TargetItemId: long;
    Priority: [long];
}

table RecipeSelectionGroupExcelTable{
    DataList: [RecipeSelectionGroupExcel];
}

table RecipeSelectionGroupExcel{
    RecipeSelectionGroupId: long;
    RecipeSelectionGroupComponentId: long;
    ParcelType: ParcelType;
    ParcelId: long;
    ResultAmountMin: long;
    ResultAmountMax: long;
}

table Position{
    X: float;
    Z: float;
}

table Motion{
    Name: string;
    Positions: [Position];
}

table MoveEnd{
    Normal: Motion;
    Stand: Motion;
    Kneel: Motion;
}

table Form{
    MoveEnd: MoveEnd;
    PublicSkill: Motion;
}

table RootMotionFlat{
    Forms: [Form];
    ExSkills: [Motion];
    MoveLeft: Motion;
    MoveRight: Motion;
}

table ScenarioBGEffectExcelTable{
    DataList: [ScenarioBGEffectExcel];
}

table ScenarioBGEffectExcel{
    Name: uint;
    Effect: string;
    Scroll: ScenarioBGScroll;
    ScrollTime: long;
    ScrollFrom: long;
    ScrollTo: long;
}

table ScenarioBGNameExcelTable{
    DataList: [ScenarioBGNameExcel];
}

table ScenarioBGNameExcel{
    Name: uint;
    ProductionStep: ProductionStep;
    BGFileName: string;
    BGType: ScenarioBGType;
    AnimationRoot: string;
    AnimationName: string;
    SpineScale: float;
    SpineLocalPosX: int;
    SpineLocalPosY: int;
}

table ScenarioBGName_GlobalExcelTable{
    DataList: [ScenarioBGName_GlobalExcel];
}

table ScenarioBGName_GlobalExcel{
    GroupName: uint;
    NameKr: uint;
    NameTw: uint;
    NameAsia: uint;
    NameNa: uint;
    NameGlobal: uint;
    NameTeen: uint;
}

table ScenarioCharacterEmotionExcelTable{
    DataList: [ScenarioCharacterEmotionExcel];
}

table ScenarioCharacterEmotionExcel{
    EmoticonName: string;
    Name: uint;
}

table ScenarioCharacterNameExcelTable{
    DataList: [ScenarioCharacterNameExcel];
}

table ScenarioCharacterNameExcel{
    CharacterName: uint;
    ProductionStep: ProductionStep;
    NameKR: string;
    NicknameKR: string;
    NameJP: string;
    NicknameJP: string;
    NameTH: string;
    NicknameTH: string;
    NameTW: string;
    NicknameTW: string;
    NameEN: string;
    NicknameEN: string;
    Shape: ScenarioCharacterShapes;
    SpinePrefabName: string;
    SmallPortrait: string;
}

table ScenarioCharacterSituationSetExcelTable{
    DataList: [ScenarioCharacterSituationSetExcel];
}

table ScenarioCharacterSituationSetExcel{
    Name: uint;
    Face: string;
    Behavior: string;
    Action: string;
    Shape: string;
    Effect: uint;
    Emotion: uint;
}

table ScenarioEffectExcelTable{
    DataList: [ScenarioEffectExcel];
}

table ScenarioEffectExcel{
    EffectName: string;
    Name: uint;
}

table ScenarioModeExcelTable{
    DataList: [ScenarioModeExcel];
}

table ScenarioModeExcel{
    ModeId: long;
    ModeType: ScenarioModeTypes;
    SubType: ScenarioModeSubTypes;
    VolumeId: long;
    ChapterId: long;
    EpisodeId: long;
    Hide: bool;
    Open: bool;
    ScenarioOpenDate: string;
    ScenarioCloseDate: string;
    FrontScenarioGroupId: [long];
    StrategyId: long;
    GroundId: long;
    IsDefeatBattle: bool;
    BattleDuration: long;
    BackScenarioGroupId: [long];
    ClearedModeId: [long];
    ScenarioModeRewardId: long;
    IsScenarioSpecialReward: bool;
    AccountLevelLimit: long;
    ClearedStageId: long;
    NeedClub: Club;
    NeedClubStudentCount: int;
    NeedTSS: long;
    EventContentId: long;
    EventContentType: EventContentType;
    EventContentCondition: long;
    EventContentConditionGroup: long;
    MapDifficulty: StageDifficulty;
    StepIndex: int;
    EventIconParcelPath: string;
    Lof: bool;
    StageTopography: StageTopography;
    FixedEchelonId: long;
    CompleteReportEventName: string;
}

table ScenarioModeRewardExcelTable{
    DataList: [ScenarioModeRewardExcel];
}

table ScenarioModeRewardExcel{
    ScenarioModeRewardId: long;
    RewardTag: RewardTag;
    RewardProb: int;
    RewardParcelType: ParcelType;
    RewardParcelId: long;
    RewardParcelAmount: int;
    IsDisplayed: bool;
}

table ScenarioReplayExcelTable{
    DataList: [ScenarioReplayExcel];
}

table ScenarioReplayExcel{
    ModeId: long;
    VolumeId: long;
    ReplayType: ScenarioModeReplayTypes;
    ChapterId: long;
    EpisodeId: long;
    FrontScenarioGroupId: [long];
    GroundId: long;
    BattleDuration: long;
    BackScenarioGroupId: [long];
}

table ScenarioResourceInfoExcelTable{
    DataList: [ScenarioResourceInfoExcel];
}

table ScenarioResourceInfoExcel{
    Id: long;
    ScenarioModeId: long;
    VideoName: string;
    BgmId: string;
    AudioName: string;
    SpinePath: string;
    Ratio: int;
    LobbyAniPath: string;
}

table ScenarioScriptContentExcelTable{
    DataList: [ScenarioScriptContentExcel];
}

table ScenarioScriptContentExcel{
    GroupId: long;
    SelectionGroup: long;
    BGMId: long;
    Sound: string;
    Transition: uint;
    BGName: uint;
    BGEffect: uint;
    PopupFileName: string;
    ScriptKr: string;
    TextJp: string;
    TextTh: string;
    TextTw: string;
    TextEn: string;
    VoiceJp: string;
    TeenMode: bool;
}

table ScenarioScriptEvent1ExcelTable{
    DataList: [ScenarioScriptEvent1Excel];
}

table ScenarioScriptEvent1Excel{
    GroupId: long;
    SelectionGroup: long;
    BGMId: long;
    Sound: string;
    Transition: uint;
    BGName: uint;
    BGEffect: uint;
    PopupFileName: string;
    ScriptKr: string;
    TextJp: string;
    TextTh: string;
    TextTw: string;
    TextEn: string;
    VoiceJp: string;
    TeenMode: bool;
}

table ScenarioScriptEvent2ExcelTable{
    DataList: [ScenarioScriptEvent2Excel];
}

table ScenarioScriptEvent2Excel{
    GroupId: long;
    SelectionGroup: long;
    BGMId: long;
    Sound: string;
    Transition: uint;
    BGName: uint;
    BGEffect: uint;
    PopupFileName: string;
    ScriptKr: string;
    TextJp: string;
    TextTh: string;
    TextTw: string;
    TextEn: string;
    VoiceJp: string;
    TeenMode: bool;
}

table ScenarioScriptEvent3ExcelTable{
    DataList: [ScenarioScriptEvent3Excel];
}

table ScenarioScriptEvent3Excel{
    GroupId: long;
    SelectionGroup: long;
    BGMId: long;
    Sound: string;
    Transition: uint;
    BGName: uint;
    BGEffect: uint;
    PopupFileName: string;
    ScriptKr: string;
    TextJp: string;
    TextTh: string;
    TextTw: string;
    TextEn: string;
    VoiceJp: string;
    TeenMode: bool;
}

table ScenarioScriptEvent4ExcelTable{
    DataList: [ScenarioScriptEvent4Excel];
}

table ScenarioScriptEvent4Excel{
    GroupId: long;
    SelectionGroup: long;
    BGMId: long;
    Sound: string;
    Transition: uint;
    BGName: uint;
    BGEffect: uint;
    PopupFileName: string;
    ScriptKr: string;
    TextJp: string;
    TextTh: string;
    TextTw: string;
    TextEn: string;
    VoiceJp: string;
    TeenMode: bool;
}

table ScenarioScriptEvent5ExcelTable{
    DataList: [ScenarioScriptEvent5Excel];
}

table ScenarioScriptEvent5Excel{
    GroupId: long;
    SelectionGroup: long;
    BGMId: long;
    Sound: string;
    Transition: uint;
    BGName: uint;
    BGEffect: uint;
    PopupFileName: string;
    ScriptKr: string;
    TextJp: string;
    TextTh: string;
    TextTw: string;
    TextEn: string;
    VoiceJp: string;
    TeenMode: bool;
}

table ScenarioScriptFavor1ExcelTable{
    DataList: [ScenarioScriptFavor1Excel];
}

table ScenarioScriptFavor1Excel{
    GroupId: long;
    SelectionGroup: long;
    BGMId: long;
    Sound: string;
    Transition: uint;
    BGName: uint;
    BGEffect: uint;
    PopupFileName: string;
    ScriptKr: string;
    TextJp: string;
    TextTh: string;
    TextTw: string;
    TextEn: string;
    VoiceJp: string;
    TeenMode: bool;
}

table ScenarioScriptFavor2ExcelTable{
    DataList: [ScenarioScriptFavor2Excel];
}

table ScenarioScriptFavor2Excel{
    GroupId: long;
    SelectionGroup: long;
    BGMId: long;
    Sound: string;
    Transition: uint;
    BGName: uint;
    BGEffect: uint;
    PopupFileName: string;
    ScriptKr: string;
    TextJp: string;
    TextTh: string;
    TextTw: string;
    TextEn: string;
    VoiceJp: string;
    TeenMode: bool;
}

table ScenarioScriptFavor3ExcelTable{
    DataList: [ScenarioScriptFavor3Excel];
}

table ScenarioScriptFavor3Excel{
    GroupId: long;
    SelectionGroup: long;
    BGMId: long;
    Sound: string;
    Transition: uint;
    BGName: uint;
    BGEffect: uint;
    PopupFileName: string;
    ScriptKr: string;
    TextJp: string;
    TextTh: string;
    TextTw: string;
    TextEn: string;
    VoiceJp: string;
    TeenMode: bool;
}

table ScenarioScriptFavor4ExcelTable{
    DataList: [ScenarioScriptFavor4Excel];
}

table ScenarioScriptFavor4Excel{
    GroupId: long;
    SelectionGroup: long;
    BGMId: long;
    Sound: string;
    Transition: uint;
    BGName: uint;
    BGEffect: uint;
    PopupFileName: string;
    ScriptKr: string;
    TextJp: string;
    TextTh: string;
    TextTw: string;
    TextEn: string;
    VoiceJp: string;
    TeenMode: bool;
}

table ScenarioScriptFavor5ExcelTable{
    DataList: [ScenarioScriptFavor5Excel];
}

table ScenarioScriptFavor5Excel{
    GroupId: long;
    SelectionGroup: long;
    BGMId: long;
    Sound: string;
    Transition: uint;
    BGName: uint;
    BGEffect: uint;
    PopupFileName: string;
    ScriptKr: string;
    TextJp: string;
    TextTh: string;
    TextTw: string;
    TextEn: string;
    VoiceJp: string;
    TeenMode: bool;
}

table ScenarioScriptGroup1ExcelTable{
    DataList: [ScenarioScriptGroup1Excel];
}

table ScenarioScriptGroup1Excel{
    GroupId: long;
    SelectionGroup: long;
    BGMId: long;
    Sound: string;
    Transition: uint;
    BGName: uint;
    BGEffect: uint;
    PopupFileName: string;
    ScriptKr: string;
    TextJp: string;
    TextTh: string;
    TextTw: string;
    TextEn: string;
    VoiceJp: string;
    TeenMode: bool;
}

table ScenarioScriptGroup2ExcelTable{
    DataList: [ScenarioScriptGroup2Excel];
}

table ScenarioScriptGroup2Excel{
    GroupId: long;
    SelectionGroup: long;
    BGMId: long;
    Sound: string;
    Transition: uint;
    BGName: uint;
    BGEffect: uint;
    PopupFileName: string;
    ScriptKr: string;
    TextJp: string;
    TextTh: string;
    TextTw: string;
    TextEn: string;
    VoiceJp: string;
    TeenMode: bool;
}

table ScenarioScriptGroup3ExcelTable{
    DataList: [ScenarioScriptGroup3Excel];
}

table ScenarioScriptGroup3Excel{
    GroupId: long;
    SelectionGroup: long;
    BGMId: long;
    Sound: string;
    Transition: uint;
    BGName: uint;
    BGEffect: uint;
    PopupFileName: string;
    ScriptKr: string;
    TextJp: string;
    TextTh: string;
    TextTw: string;
    TextEn: string;
    VoiceJp: string;
    TeenMode: bool;
}

table ScenarioScriptGroup4ExcelTable{
    DataList: [ScenarioScriptGroup4Excel];
}

table ScenarioScriptGroup4Excel{
    GroupId: long;
    SelectionGroup: long;
    BGMId: long;
    Sound: string;
    Transition: uint;
    BGName: uint;
    BGEffect: uint;
    PopupFileName: string;
    ScriptKr: string;
    TextJp: string;
    TextTh: string;
    TextTw: string;
    TextEn: string;
    VoiceJp: string;
    TeenMode: bool;
}

table ScenarioScriptGroup5ExcelTable{
    DataList: [ScenarioScriptGroup5Excel];
}

table ScenarioScriptGroup5Excel{
    GroupId: long;
    SelectionGroup: long;
    BGMId: long;
    Sound: string;
    Transition: uint;
    BGName: uint;
    BGEffect: uint;
    PopupFileName: string;
    ScriptKr: string;
    TextJp: string;
    TextTh: string;
    TextTw: string;
    TextEn: string;
    VoiceJp: string;
    TeenMode: bool;
}

table ScenarioScriptMain1ExcelTable{
    DataList: [ScenarioScriptMain1Excel];
}

table ScenarioScriptMain1Excel{
    GroupId: long;
    SelectionGroup: long;
    BGMId: long;
    Sound: string;
    Transition: uint;
    BGName: uint;
    BGEffect: uint;
    PopupFileName: string;
    ScriptKr: string;
    TextJp: string;
    TextTh: string;
    TextTw: string;
    TextEn: string;
    VoiceJp: string;
    TeenMode: bool;
}

table ScenarioScriptMain2ExcelTable{
    DataList: [ScenarioScriptMain2Excel];
}

table ScenarioScriptMain2Excel{
    GroupId: long;
    SelectionGroup: long;
    BGMId: long;
    Sound: string;
    Transition: uint;
    BGName: uint;
    BGEffect: uint;
    PopupFileName: string;
    ScriptKr: string;
    TextJp: string;
    TextTh: string;
    TextTw: string;
    TextEn: string;
    VoiceJp: string;
    TeenMode: bool;
}

table ScenarioScriptMain3ExcelTable{
    DataList: [ScenarioScriptMain3Excel];
}

table ScenarioScriptMain3Excel{
    GroupId: long;
    SelectionGroup: long;
    BGMId: long;
    Sound: string;
    Transition: uint;
    BGName: uint;
    BGEffect: uint;
    PopupFileName: string;
    ScriptKr: string;
    TextJp: string;
    TextTh: string;
    TextTw: string;
    TextEn: string;
    VoiceJp: string;
    TeenMode: bool;
}

table ScenarioScriptMain4ExcelTable{
    DataList: [ScenarioScriptMain4Excel];
}

table ScenarioScriptMain4Excel{
    GroupId: long;
    SelectionGroup: long;
    BGMId: long;
    Sound: string;
    Transition: uint;
    BGName: uint;
    BGEffect: uint;
    PopupFileName: string;
    ScriptKr: string;
    TextJp: string;
    TextTh: string;
    TextTw: string;
    TextEn: string;
    VoiceJp: string;
    TeenMode: bool;
}

table ScenarioScriptMain5ExcelTable{
    DataList: [ScenarioScriptMain5Excel];
}

table ScenarioScriptMain5Excel{
    GroupId: long;
    SelectionGroup: long;
    BGMId: long;
    Sound: string;
    Transition: uint;
    BGName: uint;
    BGEffect: uint;
    PopupFileName: string;
    ScriptKr: string;
    TextJp: string;
    TextTh: string;
    TextTw: string;
    TextEn: string;
    VoiceJp: string;
    TeenMode: bool;
}

table ScenarioScriptTestExcelTable{
    DataList: [ScenarioScriptTestExcel];
}

table ScenarioScriptTestExcel{
    GroupId: long;
    SelectionGroup: long;
    BGMId: long;
    Sound: string;
    Transition: uint;
    BGName: uint;
    BGEffect: uint;
    PopupFileName: string;
    ScriptKr: string;
    TextJp: string;
    TextTh: string;
    TextTw: string;
    TextEn: string;
    VoiceJp: string;
    TeenMode: bool;
}

table ScenarioTransitionExcelTable{
    DataList: [ScenarioTransitionExcel];
}

table ScenarioTransitionExcel{
    Name: uint;
    TransitionOut: string;
    TransitionOutDuration: long;
    TransitionOutResource: string;
    TransitionIn: string;
    TransitionInDuration: long;
    TransitionInResource: string;
}

table SchoolDungeonRewardExcelTable{
    DataList: [SchoolDungeonRewardExcel];
}

table SchoolDungeonRewardExcel{
    GroupId: long;
    DungeonType: SchoolDungeonType;
    RewardTag: RewardTag;
    RewardParcelType: ParcelType;
    RewardParcelId: long;
    RewardParcelAmount: long;
    RewardParcelProbability: long;
    IsDisplayed: bool;
}

table SchoolDungeonStageExcelTable{
    DataList: [SchoolDungeonStageExcel];
}

table SchoolDungeonStageExcel{
    StageId: long;
    DungeonType: SchoolDungeonType;
    Difficulty: int;
    BattleDuration: long;
    PrevStageId: long;
    StageEnterCostType: [ParcelType];
    StageEnterCostId: [long];
    StageEnterCostAmount: [long];
    StageEnterCostMinimumAmount: [long];
    GroundId: int;
    StarGoal: [StarGoalType];
    StarGoalAmount: [int];
    StageTopography: StageTopography;
    RecommandLevel: long;
    StageRewardId: long;
    PlayTimeLimitInSeconds: long;
}

table ServiceActionExcelTable{
    DataList: [ServiceActionExcel];
}

table ServiceActionExcel{
    ServiceActionType: ServiceActionType;
    IsLegacy: bool;
    GoodsId: long;
}

table ShiftingCraftRecipeExcelTable{
    DataList: [ShiftingCraftRecipeExcel];
}

table ShiftingCraftRecipeExcel{
    Id: long;
    DisplayOrder: long;
    NotificationId: int;
    ResultParcel: ParcelType;
    ResultId: long;
    ResultAmount: long;
    RequireItemId: long;
    RequireItemAmount: long;
    RequireGold: long;
    IngredientTag: [Tag];
    IngredientExp: long;
}

table ShopCashExcelTable{
    DataList: [ShopCashExcel];
}

table ShopCashExcel{
    Id: long;
    CashProductId: long;
    PackageType: PurchaseSourceType;
    LocalizeEtcId: uint;
    IconPath: string;
    DisplayOrder: long;
    RenewalDisplayOrder: long;
    CategoryType: ProductCategory;
    DisplayTag: ProductDisplayTag;
    SalePeriodFrom: string;
    SalePeriodTo: string;
    PeriodTag: bool;
    AccountLevelLimit: long;
    AccountLevelHide: bool;
    ClearMissionLimit: long;
    ClearMissionHide: bool;
    PurchaseReportEventName: string;
    PackageClientType: PurchaseSourceType;
    IsStartDash: bool;
    ViewFlag: bool;
}

table ShopCashScenarioResourceInfoExcelTable{
    DataList: [ShopCashScenarioResourceInfoExcel];
}

table ShopCashScenarioResourceInfoExcel{
    ScenarioResrouceInfoId: long;
    ShopCashId: long;
    IconPath: string;
}

table ShopExcelTable{
    DataList: [ShopExcel];
}

table ShopExcel{
    Id: long;
    LocalizeEtcId: uint;
    CategoryType: ShopCategoryType;
    IsLegacy: bool;
    GoodsId: [long];
    DisplayOrder: long;
    SalePeriodFrom: string;
    SalePeriodTo: string;
    PurchaseCooltimeMin: long;
    PurchaseCountLimit: long;
    PurchaseCountResetType: PurchaseCountResetType;
    BuyReportEventName: string;
    RestrictBuyWhenInventoryFull: bool;
    DisplayTag: ProductDisplayTag;
    ShopUpdateGroupId: int;
}

table ShopFilterClassifiedExcelTable{
    DataList: [ShopFilterClassifiedExcel];
}

table ShopFilterClassifiedExcel{
    Id: long;
    CategoryType: ShopCategoryType;
    ConsumeParcelType: ParcelType;
    ConsumeParcelId: long;
    ShopFilterType: ShopFilterType;
    GoodsId: long;
}

table ShopFreeRecruitExcelTable{
    DataList: [ShopFreeRecruitExcel];
}

table ShopFreeRecruitExcel{
    Id: long;
    FreeRecruitPeriodFrom: string;
    FreeRecruitPeriodTo: string;
    FreeRecruitType: ShopFreeRecruitType;
    FreeRecruitDecorationImagePath: string;
    ShopRecruitId: [long];
}

table ShopFreeRecruitPeriodExcelTable{
    DataList: [ShopFreeRecruitPeriodExcel];
}

table ShopFreeRecruitPeriodExcel{
    ShopFreeRecruitId: long;
    ShopFreeRecruitIntervalId: long;
    IntervalDate: string;
    FreeRecruitCount: int;
}

table ShopInfoExcelTable{
    DataList: [ShopInfoExcel];
}

table ShopInfoExcel{
    CategoryType: ShopCategoryType;
    IsRefresh: bool;
    IsSoldOutDimmed: bool;
    CostParcelType: [ParcelType];
    CostParcelId: [long];
    AutoRefreshCoolTime: long;
    RefreshAbleCount: long;
    GoodsId: [long];
    OpenPeriodFrom: string;
    OpenPeriodTo: string;
    ShopProductUpdateTime: string;
    DisplayParcelType: ParcelType;
    DisplayParcelId: long;
    IsShopVisible: bool;
    DisplayOrder: int;
    ShopUpdateDate: int;
    ShopUpdateGroupId1: int;
    ShopUpdateGroupId2: int;
    ShopUpdateGroupId3: int;
    ShopUpdateGroupId4: int;
    ShopUpdateGroupId5: int;
    ShopUpdateGroupId6: int;
    ShopUpdateGroupId7: int;
    ShopUpdateGroupId8: int;
    ShopUpdateGroupId9: int;
    ShopUpdateGroupId10: int;
    ShopUpdateGroupId11: int;
    ShopUpdateGroupId12: int;
}

table ShopRecruitExcelTable{
    DataList: [ShopRecruitExcel];
}

table ShopRecruitExcel{
    Id: long;
    CategoryType: ShopCategoryType;
    IsLegacy: bool;
    OneGachaGoodsId: long;
    TenGachaGoodsId: long;
    GoodsDevName: string;
    DisplayTag: GachaDisplayTag;
    DisplayOrder: long;
    GachaBannerPath: string;
    MovieBannerPath: [string];
    MovieBannerPathTeen: [string];
    LinkedRobbyBannerId: long;
    InfoCharacterId: [long];
    SalePeriodFrom: string;
    SalePeriodTo: string;
    RecruitCoinId: long;
    RecruitSellectionShopId: long;
    PurchaseCooltimeMin: long;
    PurchaseCountLimit: long;
    PurchaseCountResetType: PurchaseCountResetType;
    IsNewbie: bool;
    IsSelectRecruit: bool;
    DirectPayInvisibleTokenId: long;
    DirectPayAndroidShopCashId: long;
    DirectPayAppleShopCashId: long;
    DirectPayOneStoreShopCashId: long;
    ProbabilityUrlDev: string;
    ProbabilityUrlLive: string;
    ProductCategory: ProductCategory;
}

table ShopRefreshExcelTable{
    DataList: [ShopRefreshExcel];
}

table ShopRefreshExcel{
    Id: long;
    LocalizeEtcId: uint;
    IsLegacy: bool;
    GoodsId: long;
    DisplayOrder: long;
    CategoryType: ShopCategoryType;
    RefreshGroup: int;
    Prob: int;
    BuyReportEventName: string;
    DisplayTag: ProductDisplayTag;
}

table ShortcutTypeExcelTable{
    DataList: [ShortcutTypeExcel];
}

table ShortcutTypeExcel{
    Id: long;
    IsAscending: bool;
    ContentType: [ShortcutContentType];
}

table SkillExcelTable{
    DataList: [SkillExcel];
}

table SkillExcel{
    Id: long;
    LocalizeSkillId: uint;
    GroupId: string;
    SkillDataKey: string;
    VisualDataKey: string;
    Level: int;
    SkillCost: int;
    ExtraSkillCost: int;
    EnemySkillCost: int;
    ExtraEnemySkillCost: int;
    NPCSkillCost: int;
    ExtraNPCSkillCost: int;
    BulletType: BulletType;
    StartCoolTime: int;
    CoolTime: int;
    EnemyStartCoolTime: int;
    EnemyCoolTime: int;
    NPCStartCoolTime: int;
    NPCCoolTime: int;
    UseAtg: int;
    RequireCharacterLevel: int;
    RequireLevelUpMaterial: long;
    IconName: string;
    IsShowInfo: bool;
    IsShowSpeechbubble: bool;
}

table SoundUIExcelTable{
    DataList: [SoundUIExcel];
}

table SoundUIExcel{
    ID: long;
    SoundUniqueId: string;
    Path: string;
}

table SpecialLobbyIllustExcelTable{
    DataList: [SpecialLobbyIllustExcel];
}

table SpecialLobbyIllustExcel{
    UniqueId: long;
    DevName: string;
    CharacterCostumeUniqueId: long;
    PrefabName: string;
    SlotTextureName: string;
    RewardTextureName: string;
}

table SpineLipsyncExcelTable{
    DataList: [SpineLipsyncExcel];
}

table SpineLipsyncExcel{
    ClipNameKey: uint;
    AnimJson: string;
}

table StatLevelInterpolationExcelTable{
    DataList: [StatLevelInterpolationExcel];
}

table StatLevelInterpolationExcel{
    Level: long;
    StatTypeIndex: [long];
}

table StoryStrategyExcelTable{
    DataList: [StoryStrategyExcel];
}

table StoryStrategyExcel{
    Id: long;
    Name: string;
    Localize: string;
    StageEnterEchelonCount: int;
    BattleDuration: long;
    WhiteListId: long;
    StrategyMap: string;
    StrategyMapBG: string;
    MaxTurn: int;
    StageTopography: StageTopography;
    RecommandLevel: int;
    StrategyEnvironment: StrategyEnvironment;
    ContentType: ContentType;
    BGMId: long;
    FirstClearReportEventName: string;
}

table StrategyObjectBuffDefineExcelTable{
    DataList: [StrategyObjectBuffDefineExcel];
}

table StrategyObjectBuffDefineExcel{
    StrategyObjectBuffID: long;
    StrategyObjectTurn: int;
    SkillGroupId: string;
    LocalizeCodeId: uint;
    IconPath: string;
}

table StringTestExcelTable{
    DataList: [StringTestExcel];
}

table StringTestExcel{
    String: [string];
    Sentence1: string;
    Script: string;
}

table SystemMailExcelTable{
    DataList: [SystemMailExcel];
}

table SystemMailExcel{
    MailType: MailType;
    ExpiredDay: long;
    Sender: string;
    Comment: string;
}

table TacticalSupportSystemExcelTable{
    DataList: [TacticalSupportSystemExcel];
}

table TacticalSupportSystemExcel{
    Id: long;
    SummonedTime: long;
    DefaultPersonalityId: long;
    CanTargeting: bool;
    CanCover: bool;
    ObstacleUniqueName: string;
    ObstacleCoverRange: long;
    SummonSkilllGroupId: string;
    CrashObstacleOBBWidth: long;
    CrashObstacleOBBHeight: long;
    IsTSSBlockedNodeCheck: bool;
    NumberOfUses: int;
    InventoryOffsetX: float;
    InventoryOffsetY: float;
    InventoryOffsetZ: float;
    InteractionChar: [long];
    CharacterInteractionStartDelay: long;
    GetOnStartEffectPath: string;
    GetOnEndEffectPath: string;
}

table TacticArenaSimulatorSettingExcelTable{
    DataList: [TacticArenaSimulatorSettingExcel];
}

table TacticArenaSimulatorSettingExcel{
    Order: long;
    Repeat: long;
    AttackerFrom: ArenaSimulatorServer;
    AttackerUserArenaGroup: long;
    AttackerUserArenaRank: long;
    AttackerPresetGroupId: long;
    AttackerStrikerNum: long;
    AttackerSpecialNum: long;
    DefenderFrom: ArenaSimulatorServer;
    DefenderUserArenaGroup: long;
    DefenderUserArenaRank: long;
    DefenderPresetGroupId: long;
    DefenderStrikerNum: long;
    DefenderSpecialNum: long;
    GroundId: long;
}

table TacticDamageSimulatorSettingExcelTable{
    DataList: [TacticDamageSimulatorSettingExcel];
}

table TacticDamageSimulatorSettingExcel{
    Order: int;
    Repeat: int;
    TestPreset: long;
    TestBattleTime: long;
    StrikerSquard: long;
    SpecialSquard: long;
    ReplaceCharacterCostRegen: bool;
    ReplaceCostRegenValue: int;
    UseAutoSkill: bool;
    OverrideStreetAdaptation: TerrainAdaptationStat;
    OverrideOutdoorAdaptation: TerrainAdaptationStat;
    OverrideIndoorAdaptation: TerrainAdaptationStat;
    ApplyOverrideAdaptation: bool;
    GroundId: long;
    FixedCharacter: [long];
}

table TacticEntityEffectFilterExcelTable{
    DataList: [TacticEntityEffectFilterExcel];
}

table TacticEntityEffectFilterExcel{
    TargetEffectName: string;
    ShowEffectToVehicle: bool;
    ShowEffectToBoss: bool;
}

table TacticSimulatorSettingExcelTable{
    DataList: [TacticSimulatorSettingExcel];
}

table TacticSimulatorSettingExcel{
    GroundId: long;
    GetExp: long;
    GetStarGrade: long;
    Equipment: long;
}

table TacticSkipExcelTable{
    DataList: [TacticSkipExcel];
}

table TacticSkipExcel{
    LevelDiff: int;
    HPResult: long;
}

table TacticTimeAttackSimulatorConfigExcelTable{
    DataList: [TacticTimeAttackSimulatorConfigExcel];
}

table TacticTimeAttackSimulatorConfigExcel{
    Order: long;
    Repeat: long;
    PresetGroupId: long;
    AttackStrikerNum: long;
    AttackSpecialNum: long;
    GeasId: long;
}

table TagSettingExcelTable{
    DataList: [TagSettingExcel];
}

table TagSettingExcel{
    Id: Tag;
    IsOpen: bool;
    LocalizeEtcId: uint;
}

table TerrainAdaptationFactorExcelTable{
    DataList: [TerrainAdaptationFactorExcel];
}

table TerrainAdaptationFactorExcel{
    TerrainAdaptation: StageTopography;
    TerrainAdaptationStat: TerrainAdaptationStat;
    ShotFactor: long;
    BlockFactor: long;
    AccuracyFactor: long;
    DodgeFactor: long;
    AttackPowerFactor: long;
}

table TimeAttackDungeonExcelTable{
    DataList: [TimeAttackDungeonExcel];
}

table TimeAttackDungeonExcel{
    Id: long;
    TimeAttackDungeonType: TimeAttackDungeonType;
    LocalizeEtcKey: uint;
    IconPath: string;
}

table TimeAttackDungeonGeasExcelTable{
    DataList: [TimeAttackDungeonGeasExcel];
}

table TimeAttackDungeonGeasExcel{
    Id: long;
    TimeAttackDungeonType: TimeAttackDungeonType;
    LocalizeEtcKey: uint;
    BattleDuration: long;
    ClearDefaultPoint: long;
    ClearTimeWeightPoint: long;
    TimeWeightConst: long;
    Difficulty: int;
    RecommandLevel: int;
    GroundId: long;
    AllyPassiveSkillId: [string];
    AllyPassiveSkillLevel: [int];
    EnemyPassiveSkillId: [string];
    EnemyPassiveSkillLevel: [int];
    GeasIconPath: [string];
    GeasLocalizeEtcKey: [uint];
}

table TimeAttackDungeonRewardExcelTable{
    DataList: [TimeAttackDungeonRewardExcel];
}

table TimeAttackDungeonRewardExcel{
    Id: long;
    RewardMaxPoint: long;
    RewardType: [TimeAttackDungeonRewardType];
    RewardMinPoint: [long];
    RewardParcelType: [ParcelType];
    RewardParcelId: [long];
    RewardParcelDefaultAmount: [long];
    RewardParcelMaxAmount: [long];
}

table TimeAttackDungeonSeasonManageExcelTable{
    DataList: [TimeAttackDungeonSeasonManageExcel];
}

table TimeAttackDungeonSeasonManageExcel{
    Id: long;
    StartDate: string;
    EndDate: string;
    UISlot: long;
    DungeonId: long;
    DifficultyGeas: [long];
    TimeAttackDungeonRewardId: long;
    RoomLifeTimeInSeconds: long;
}

table ToastExcelTable{
    DataList: [ToastExcel];
}

table ToastExcel{
    Id: uint;
    ToastType: ToastType;
    MissionId: uint;
    TextId: uint;
    LifeTime: long;
}

table TranscendenceRecipeExcelTable{
    DataList: [TranscendenceRecipeExcel];
}

table TranscendenceRecipeExcel{
    Id: long;
    DevName: string;
    CostCurrencyType: CurrencyTypes;
    CostCurrencyAmount: long;
    ParcelType_: [ParcelType];
    ParcelId: [long];
    ParcelAmount: [int];
}

table TrophyCollectionExcelTable{
    DataList: [TrophyCollectionExcel];
}

table TrophyCollectionExcel{
    GroupId: long;
    LocalizeCodeId: uint;
    FurnitureId: [long];
}

table TutorialCharacterDialogExcelTable{
    DataList: [TutorialCharacterDialogExcel];
}

table TutorialCharacterDialogExcel{
    TalkId: long;
    AnimationName: string;
    LocalizeKR: string;
    LocalizeJP: string;
    LocalizeTH: string;
    LocalizeTW: string;
    LocalizeEN: string;
    SoundPathKR: string;
    SoundPathJP: string;
    SoundPathTH: string;
    SoundPathTW: string;
    SoundPathEN: string;
}

table TutorialExcelTable{
    DataList: [TutorialExcel];
}

table TutorialExcel{
    ID: long;
    CompletionReportEventName: string;
    CompulsoryTutorial: bool;
    DescriptionTutorial: bool;
    TutorialStageId: long;
    UIName: [string];
    TutorialParentName: [string];
}

table TutorialFailureImageExcelTable{
    DataList: [TutorialFailureImageExcel];
}

table TutorialFailureImageExcel{
    Id: long;
    Contents: TutorialFailureContentType;
    Type: string;
    ImagePathKr: string;
    ImagePathJp: string;
    ImagePathTh: string;
    ImagePathTw: string;
    ImagePathEn: string;
}

table VoiceCommonExcelTable{
    DataList: [VoiceCommonExcel];
}

table VoiceCommonExcel{
    VoiceEvent: VoiceEvent;
    Rate: long;
    VoiceHash: [uint];
}

table VoiceExcelTable{
    DataList: [VoiceExcel];
}

table VoiceExcel{
    NameHash: uint;
    OnlyOne: bool;
    VolumeJp: float;
    DelayJp: float;
    Priority: int;
    AudioClipJp: string;
    VolumeKr: float;
    DelayKr: float;
    AudioClipKr: string;
    VolumeTh: float;
    DelayTh: float;
    AudioClipTh: string;
    VolumeTw: float;
    DelayTw: float;
    AudioClipTw: string;
    VolumeEn: float;
    DelayEn: float;
    AudioClipEn: string;
}

table VoiceLogicEffectExcelTable{
    DataList: [VoiceLogicEffectExcel];
}

table VoiceLogicEffectExcel{
    LogicEffectNameHash: uint;
    Self: bool;
    Priority: int;
    VoiceHash: [uint];
    VoiceId: uint;
}

table VoiceRoomExcelTable{
    DataList: [VoiceRoomExcel];
}

table VoiceRoomExcel{
    NameHash: uint;
    VoiceCategory: string;
    DisplayOrder: long;
    CollectionVisible: bool;
    CVCollectionType: CVCollectionType;
    UnlockFavorRank: long;
    UnlockEquipWeapon: bool;
    LocalizeCVGroup: string;
    AudioClipJp: string;
    AudioClipKr: string;
    AudioClipEn: string;
    AudioClipTw: string;
    AudioClipTh: string;
}

table VoiceRoomExceptionExcelTable{
    DataList: [VoiceRoomExceptionExcel];
}

table VoiceRoomExceptionExcel{
    ExceptionTarget: CVExceptionTarget;
    SquadType: SquadType;
    CharacterId: long;
    LinkedCharacterVoicePrintType: CVPrintType;
    LinkedCharacterName: string;
    BlackListNameHash: [uint];
}

table VoiceSkillUseExcelTable{
    DataList: [VoiceSkillUseExcel];
}

table VoiceSkillUseExcel{
    Name: string;
    VoiceHash: [uint];
}

table WebEventSeasonExcelTable{
    DataList: [WebEventSeasonExcel];
}

table WebEventSeasonExcel{
    Id: long;
    Enabled: bool;
    StartDate: string;
    EndDate: string;
    LobbyBannerImage: string;
    PopupTitleLocalizeKey: string;
    EventUrl: string;
}

table WeekDungeonExcelTable{
    DataList: [WeekDungeonExcel];
}

table WeekDungeonExcel{
    StageId: long;
    WeekDungeonType: WeekDungeonType;
    Difficulty: int;
    BattleDuration: long;
    PrevStageId: long;
    StageEnterCostType: [ParcelType];
    StageEnterCostId: [long];
    StageEnterCostAmount: [int];
    GroundId: int;
    StarGoal: [StarGoalType];
    StarGoalAmount: [int];
    StageTopography: StageTopography;
    RecommandLevel: long;
    StageRewardId: long;
    PlayTimeLimitInSeconds: long;
    BattleRewardExp: long;
    BattleRewardPlayerExp: long;
    GroupBuffID: [long];
}

table WeekDungeonFindGiftRewardExcelTable{
    DataList: [WeekDungeonFindGiftRewardExcel];
}

table WeekDungeonFindGiftRewardExcel{
    StageRewardId: long;
    DevName: string;
    RewardParcelType: [ParcelType];
    RewardParcelId: [long];
    RewardParcelAmount: [long];
    RewardParcelProbability: [long];
    DropItemModelPrefabPath: [string];
}

table WeekDungeonGroupBuffExcelTable{
    DataList: [WeekDungeonGroupBuffExcel];
}

table WeekDungeonGroupBuffExcel{
    WeekDungeonBuffId: long;
    School: School;
    RecommandLocalizeEtcId: uint;
    FormationLocalizeEtcId: uint;
    SkillGroupId: string;
}

table WeekDungeonOpenScheduleExcelTable{
    DataList: [WeekDungeonOpenScheduleExcel];
}

table WeekDungeonOpenScheduleExcel{
    WeekDay: WeekDay;
    Open: [WeekDungeonType];
}

table WeekDungeonRewardExcelTable{
    DataList: [WeekDungeonRewardExcel];
}

table WeekDungeonRewardExcel{
    GroupId: long;
    DungeonType: WeekDungeonType;
    RewardParcelType: ParcelType;
    RewardParcelId: long;
    RewardParcelAmount: long;
    RewardParcelProbability: long;
    IsDisplayed: bool;
    DropItemModelPrefabPath: string;
}

table WorldRaidBossGroupExcelTable{
    DataList: [WorldRaidBossGroupExcel];
}

table WorldRaidBossGroupExcel{
    Id: long;
    WorldRaidBossGroupId: long;
    WorldBossName: string;
    WorldBossPopupPortrait: string;
    WorldBossPopupBG: string;
    WorldBossParcelPortrait: string;
    WorldBossListParcel: string;
    WorldBossHP: long;
    WorldBossHPTw: long;
    WorldBossHPAsia: long;
    WorldBossHPNa: long;
    WorldBossHPGlobal: long;
    UIHideBeforeSpawn: bool;
    HideAnotherBossKilled: bool;
    WorldBossClearRewardGroupId: long;
    AnotherBossKilled: [long];
    EchelonConstraintGroupId: long;
    ExclusiveOperatorBossSpawn: string;
    ExclusiveOperatorBossKill: string;
    ExclusiveOperatorScenarioBattle: string;
    ExclusiveOperatorBossDamaged: string;
    BossGroupOpenCondition: long;
}

table WorldRaidConditionExcelTable{
    DataList: [WorldRaidConditionExcel];
}

table WorldRaidConditionExcel{
    Id: long;
    LockUI: [string];
    HideWhenLocked: bool;
    AccountLevel: long;
    ScenarioModeId: [long];
    CampaignStageID: [long];
    MultipleConditionCheckType: MultipleConditionCheckType;
    AfterWhenDate: string;
    WorldRaidBossKill: [long];
}

table WorldRaidFavorBuffExcelTable{
    DataList: [WorldRaidFavorBuffExcel];
}

table WorldRaidFavorBuffExcel{
    WorldRaidFavorRank: long;
    WorldRaidFavorRankBonus: long;
}

table WorldRaidSeasonManageExcelTable{
    DataList: [WorldRaidSeasonManageExcel];
}

table WorldRaidSeasonManageExcel{
    SeasonId: long;
    EventContentId: long;
    EnterTicket: CurrencyTypes;
    WorldRaidLobbyScene: string;
    WorldRaidLobbyBanner: string;
    WorldRaidLobbyBG: string;
    WorldRaidLobbyBannerShow: bool;
    SeasonOpenCondition: long;
    WorldRaidLobbyEnterScenario: long;
    CanPlayNotSeasonTime: bool;
    WorldRaidUniqueThemeLobbyUI: bool;
    WorldRaidUniqueThemeName: string;
    CanWorldRaidGemEnter: bool;
    HideWorldRaidTicketUI: bool;
    UseWorldRaidCommonToast: bool;
    OpenRaidBossGroupId: [long];
    BossSpawnTime: [string];
    EliminateTime: [string];
    ScenarioOutputConditionId: [long];
    ConditionScenarioGroupid: [long];
    WorldRaidMapEnterOperator: string;
    UseFavorRankBuff: bool;
}

table WorldRaidStageExcelTable{
    DataList: [WorldRaidStageExcel];
}

table WorldRaidStageExcel{
    Id: long;
    UseBossIndex: bool;
    UseBossAIPhaseSync: bool;
    WorldRaidBossGroupId: long;
    PortraitPath: string;
    BGPath: string;
    RaidCharacterId: long;
    BossCharacterId: [long];
    AssistCharacterLimitCount: long;
    WorldRaidDifficulty: WorldRaidDifficulty;
    DifficultyOpenCondition: bool;
    RaidEnterAmount: long;
    ReEnterAmount: long;
    BattleDuration: long;
    GroundId: long;
    RaidBattleEndRewardGroupId: long;
    RaidRewardGroupId: long;
    BattleReadyTimelinePath: [string];
    BattleReadyTimelinePhaseStart: [int];
    BattleReadyTimelinePhaseEnd: [int];
    BeforeVictoryTimelinePath: string;
    VictoryTimelinePath: string;
    PhaseChangeTimelinePath: string;
    TimeLinePhase: long;
    EnterScenarioKey: long;
    ClearScenarioKey: long;
    UseFixedEchelon: bool;
    FixedEchelonId: long;
    IsRaidScenarioBattle: bool;
    ShowSkillCard: bool;
    BossBGInfoKey: uint;
    DamageToWorldBoss: long;
    AllyPassiveSkill: [string];
    AllyPassiveSkillLevel: [int];
    SaveCurrentLocalBossHP: bool;
}

table WorldRaidStageRewardExcelTable{
    DataList: [WorldRaidStageRewardExcel];
}

table WorldRaidStageRewardExcel{
    GroupId: long;
    IsClearStageRewardHideInfo: bool;
    ClearStageRewardProb: long;
    ClearStageRewardParcelType: ParcelType;
    ClearStageRewardParcelUniqueID: long;
    ClearStageRewardParcelUniqueName: string;
    ClearStageRewardAmount: long;
}

